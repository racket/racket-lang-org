(feed ((xmlns "http://www.w3.org/2005/Atom") (xmlns:gd "http://schemas.google.com/g/2005") (xmlns:georss "http://www.georss.org/georss") (xmlns:openSearch "http://a9.com/-/spec/opensearchrss/1.0/") (xmlns:thr "http://purl.org/syndication/thread/1.0")) (id "tag:blogger.com,1999:blog-2080885971644496896.archive") (updated "2016-02-17T19:16:08.412-05:00") (title ((type "text")) "The Racket Blog") (link ((href "https://www.blogger.com/feeds/2080885971644496896/archive") (rel "http://schemas.google.com/g/2005#feed") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/archive") (rel "self") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/archive") (rel "http://schemas.google.com/g/2005#post") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/") (rel "alternate") (type "text/html"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (generator ((uri "https://www.blogger.com") (version "7.00")) "Blogger") (entry (id "tag:blogger.com,1999:blog-2080885971644496896.layout") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#template"))) (title ((type "text")) "Template: The Racket Blog") (content ((type "text")) "<" "?xml version=\"1.0\" encoding=\"UTF-8\" ?" ">" "\n" "<" "!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"" ">" "\n" "<" "html xmlns='http://www.w3.org/1999/xhtml' xmlns:b='http://www.google.com/2005/gml/b' xmlns:data='http://www.google.com/2005/gml/data' xmlns:expr='http://www.google.com/2005/gml/expr'" ">" "\n" "<" "head" ">" "\n" "<" "b:include data='blog' name='all-head-content'/" ">" "\n" "<" "title" ">" "<" "data:blog.pageTitle/" ">" "<" "/title" ">" "\n" "<" "b:skin" ">" "<" "![CDATA[/*\n-----------------------------------------------\nBlogger Template Style\nName:     Minima\nDesigner: Douglas Bowman\nURL:      www.stopdesign.com\nDate:     26 Feb 2004\nUpdated by: Blogger Team\n----------------------------------------------- */\n\n/* Variable definitions\n   ====================\n   " "<" "Variable name=\"bgcolor\"\n             description=\"Page Background Color\"\n             type=\"color\"\n             default=\"#fff\" value=\"#ffffff\"\n            " ">" "\n   " "<" "Variable name=\"textcolor\"\n             description=\"Text Color\"\n             type=\"color\"\n             default=\"#333\" value=\"#333333\"\n            " ">" "\n   " "<" "Variable name=\"linkcolor\"\n             description=\"Link Color\"\n             type=\"color\"\n             default=\"#58a\" value=\"#5588aa\"\n            " ">" "\n   " "<" "Variable name=\"pagetitlecolor\"\n             description=\"Blog Title Color\"\n             type=\"color\"\n             default=\"#666\" value=\"#ffffff\"\n            " ">" "\n   " "<" "Variable name=\"descriptioncolor\"\n             description=\"Blog Description Color\"\n             type=\"color\"\n             default=\"#999\" value=\"#999999\"\n            " ">" "\n   " "<" "Variable name=\"titlecolor\"\n             description=\"Post Title Color\"\n             type=\"color\"\n             default=\"#c60\" value=\"#cc6600\"\n            " ">" "\n   " "<" "Variable name=\"bordercolor\"\n             description=\"Border Color\"\n             type=\"color\"\n             default=\"#ccc\" value=\"#cccccc\"\n            " ">" "\n   " "<" "Variable name=\"sidebarcolor\"\n             description=\"Sidebar Title Color\"\n             type=\"color\"\n             default=\"#999\" value=\"#999999\"\n            " ">" "\n   " "<" "Variable name=\"sidebartextcolor\"\n             description=\"Sidebar Text Color\"\n             type=\"color\"\n             default=\"#666\" value=\"#666666\"\n            " ">" "\n   " "<" "Variable name=\"visitedlinkcolor\"\n             description=\"Visited Link Color\"\n             type=\"color\"\n             default=\"#999\" value=\"#999999\"\n            " ">" "\n   " "<" "Variable name=\"bodyfont\"\n             description=\"Text Font\"\n             type=\"font\"\n             default=\"normal normal 100% Georgia, Serif\" value=\"normal normal 100% font-family: Optima, Arial, Verdana, Helvetica, sans-serif;\"\n            " ">" "\n   " "<" "Variable name=\"headerfont\"\n             description=\"Sidebar Title Font\"\n             type=\"font\"\n             default=\"normal normal 78% 'Trebuchet MS',Trebuchet,Arial,Verdana,Sans-serif\" value=\"normal normal 78% font-family: Optima, Arial, Verdana, Helvetica, sans-serif;\"\n            " ">" "\n   " "<" "Variable name=\"pagetitlefont\"\n             description=\"Blog Title Font\"\n             type=\"font\"\n             default=\"normal normal 200% Georgia, Serif\" value=\"normal normal 256% font-family: Optima, Arial, Verdana, Helvetica, sans-serif;\"\n            " ">" "\n   " "<" "Variable name=\"descriptionfont\"\n             description=\"Blog Description Font\"\n             type=\"font\"\n             default=\"normal normal 78% 'Trebuchet MS', Trebuchet, Arial, Verdana, Sans-serif\" value=\"normal normal 78% font-family: Optima, Arial, Verdana, Helvetica, sans-serif;\"\n            " ">" "\n   " "<" "Variable name=\"postfooterfont\"\n             description=\"Post Footer Font\"\n             type=\"font\"\n             default=\"normal normal 78% 'Trebuchet MS', Trebuchet, Arial, Verdana, Sans-serif\" value=\"normal normal 78% font-family: Optima, Arial, Verdana, Helvetica, sans-serif;\"\n            " ">" "\n*/\n\n/* Use this with templates/template-twocol.html */\n\nbody {\n  background: $bgcolor;\n  margin: 0;\n  color: $textcolor;\n  // ELI: I don't know why this was here, it was butchering the whole layout\n  // font: x-small Georgia Serif;\n  // font-size/* */:/**/small;\n  // font-size: /**/small;\n  // text-align: center;\n  }\na:link {\n  color: $linkcolor;\n  text-decoration: none;\n}\na:visited {\n  color: $visitedlinkcolor;\n  text-decoration: none;\n}\na:hover {\n  color: $titlecolor;\n  text-decoration: underline;\n}\na img {\n  border-width: 0;\n}\n\n/* Header\n----------------------------------------------- */\n\n/* ELI: seems like this has no effect on anything */\n\n#header-wrapper {\n  width: 800px;        /* this used to be 660 [soegaard] */\n  margin: 0 auto 10px;\n  border: 1px solid $bordercolor;\n}\n\n#header-inner {\n  background-position: center;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n#header {\n  margin: 5px;\n  border: 1px solid $bordercolor;\n  text-align: center;\n  color: $pagetitlecolor;\n}\n\n#header h1 {\n  margin: 5px 5px 0;\n  padding:15px 20px .25em;\n  line-height: 1.2em;\n  text-transform: uppercase;\n  letter-spacing: .2em;\n  font: $pagetitlefont;\n}\n\n#header a {\n  color: $pagetitlecolor;\n  text-decoration: none;\n}\n\n#header a:hover {\n  color: $pagetitlecolor;\n}\n\n#header .description {\n  margin: 0 5px 5px;\n  padding: 0 20px 15px;\n  max-width: 840px;           /* this used to be 700 [soegaard] */\n  text-transform: uppercase;\n  letter-spacing: .2em;\n  line-height: 1.4em;\n  font: $descriptionfont;\n  color: $descriptioncolor;\n}\n\n#header img {\n  margin-left: auto;\n  margin-right: auto;\n}\n\n/* Wrappers\n----------------------------------------------- */\n\n/* The whole main area */\n#outer-wrapper {\n  // ELI:\n  margin-top: 0;\n  margin-bottom: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 45em;\n  padding: 10px;\n  text-align: left;\n  font: $bodyfont;\n  }\n\n/* The text area */\n#main-wrapper {\n  width: 100%;           /* used to be 63%, before 410px [asumu,soegaard,ELI] */\n  word-wrap: break-word; /* fix for long text breaking sidebar float in IE */\n  overflow: hidden;      /* fix for long non-text content breaking IE sidebar float */\n  }\n\n/* Sidebar stuff */\n#sidebar-wrapper {\n  width: 33%;            /* used to be 220px [ELI] */\n  font-size: 87.5%;      /* ELI */\n  /* float: right; */\n  word-wrap: break-word; /* fix for long text breaking sidebar float in IE */\n  overflow: hidden;      /* fix for long non-text content breaking IE sidebar float */\n}\n\n/* Headings\n----------------------------------------------- */\n\nh2 {\n  margin: 1.5em 0 .75em;\n  font: $headerfont;\n  line-height: 1.4em;\n  text-transform: uppercase;\n  letter-spacing: .2em;\n  color: $sidebarcolor;\n}\n\n\n/* Posts\n----------------------------------------------- */\nh2.date-header {\n  margin: 1.5em 0 .5em;\n}\n\n.post {\n  margin: .5em 0 1.5em;\n  border-bottom: 1px dotted $bordercolor;\n  padding-bottom: 1.5em;\n}\n.post h3 {\n  margin: .25em 0 0;\n  padding: 0 0 4px;\n  font-size: 140%;\n  font-weight: normal;\n  line-height: 1.4em;\n  color: $titlecolor;\n}\n\n.post h3 a, .post h3 a:visited, .post h3 strong {\n  display: block;\n  text-decoration: none;\n  color: $titlecolor;\n  font-weight: normal;\n}\n\n.post h3 strong, .post h3 a:hover {\n  color: $textcolor;\n}\n\n.post p {\n  margin: 0 0 .75em;\n  line-height: 1.6em;\n}\n\n.post-footer {\n  margin: .75em 0;\n  color: $sidebarcolor;\n  text-transform: uppercase;\n  letter-spacing: .1em;\n  font: $postfooterfont;\n  line-height: 1.4em;\n}\n\n.comment-link {\n  margin-left: .6em;\n}\n.post img {\n  padding: 4px;\n  border: 1px solid $bordercolor;\n}\n.post blockquote {\n  margin: 1em 20px;\n}\n.post blockquote p {\n  margin: .75em 0;\n}\n\n.post-header-line-1 {    /* add some vertical space after author [soegaard] */\n  margin-bottom: .6em;\n  font-style: italic;\n}\n\n/* Comments\n----------------------------------------------- */\n#comments h4 {\n  margin: 1em 0;\n  font-weight: bold;\n  line-height: 1.4em;\n  text-transform: uppercase;\n  letter-spacing: .2em;\n  color: $sidebarcolor;\n}\n\n#comments-block {\n  margin: 1em 0 1.5em;\n  line-height: 1.6em;\n}\n#comments-block .comment-author {\n  margin: .5em 0;\n}\n#comments-block .comment-body {\n  margin: .25em 0 0;\n}\n#comments-block .comment-footer {\n  margin: -.25em 0 2em;\n  line-height: 1.4em;\n  text-transform: uppercase;\n  letter-spacing: .1em;\n}\n#comments-block .comment-body p {\n  margin: 0 0 .75em;\n}\n.deleted-comment {\n  font-style: italic;\n  color: gray;\n}\n\n#blog-pager-newer-link {\n  float: left;\n}\n\n#blog-pager-older-link {\n  float: right;\n}\n\n#blog-pager {\n  text-align: center;\n}\n\n.feed-links {\n  clear: both;\n  line-height: 2.5em;\n}\n\n/* Sidebar Content\n----------------------------------------------- */\n.sidebar {\n  color: $sidebartextcolor;\n  line-height: 1.5em;\n}\n\n.sidebar ul {\n  list-style: none;\n  margin: 0 0 0;\n  padding: 0 0 0;\n}\n.sidebar li {\n  margin: 0;\n  padding: 0 0 .25em 15px;\n  text-indent: -15px;\n  line-height: 1.5em;\n}\n\n.sidebar .widget, .main .widget {\n  border-bottom: 1px dotted $bordercolor;\n  margin: 0 0 1.5em;\n  padding: 0 0 1.5em;\n}\n\n.main .Blog {\n  border-bottom-width: 0;\n}\n\n\n/* Profile\n----------------------------------------------- */\n.profile-img {\n  float: left;\n  margin: 0 5px 5px 0;\n  padding: 4px;\n  border: 1px solid $bordercolor;\n}\n\n.profile-data {\n  margin: 0;\n  text-transform: uppercase;\n  letter-spacing: .1em;\n  font: $postfooterfont;\n  color: $sidebarcolor;\n  font-weight: bold;\n  line-height: 1.6em;\n}\n\n.profile-datablock {\n  margin: .5em 0 .5em;\n}\n\n.profile-textblock {\n  margin: 0.5em 0;\n  line-height: 1.6em;\n}\n\n.profile-link {\n  font: $postfooterfont;\n  text-transform: uppercase;\n  letter-spacing: .1em;\n}\n\n/* Colors for highlighting via http://www.scheme.dk/paste/ */\n\n.scheme           { color: brown; margin: 4pt; }  /* background punctuation */\n.scheme .keyword  { color: rgb(68,0,203); font-weight: bold; }\n.scheme .builtin  { color: navy;   }\n.scheme .variable { color: black;  }\n.scheme .global   { color: purple; }\n.scheme .selfeval { color: green;  }\n.scheme .comment  { color: teal;   }\n\n/* Footer\n----------------------------------------------- */\n#footer {\n  width: 660px;\n  clear: both;\n  margin: 0 auto;\n  padding-top: 15px;\n  line-height: 1.6em;\n  text-transform: uppercase;\n  letter-spacing: .1em;\n  text-align: center;\n}\n\n/** Page structure tweaks for layout editor wireframe */\nbody#layout #header {\n  margin-left: 0px;\n  margin-right: 0px;\n}\n\n/*** Racket CSS begin ***/\n#navbar-iframe {\n  position: absolute;\n  top: 60px; right: 0px;\n}\n#navbar-iframe:hover {\n}\n/* --- navbar styles --- */\n/*** Racket CSS end ***/\n\n]]" ">" "<" "/b:skin" ">" "\n\n\n" "<" "link href='https://racket-lang.org/gumby-rkt.css' rel='stylesheet' type='text/css'/" ">" "\n" "<" "link href='https://racket-lang.org/plticon.ico' rel='icon' type='image/ico'/" ">" "\n\n" "<" "/head" ">" "\n\n" "<" "body" ">" "\n\n" "<" "!-- Racket navbar begin --" ">" "\n" "<" "div class='rktnavbar gumby-content' gumby-fixed='top' id='nav1'" ">" "<" "div class='row'" ">" "\n" "<" "a class='five columns logo' href='http://racket-lang.org/'" ">" "<" "img alt='Racket' class='logo' height='60' src='https://racket-lang.org/logo-and-text.png' width='198'/" ">" "<" "/a" ">" "\n" "<" "ul class='five columns'" ">" "<" "li/" ">" "\n" "<" "li/" ">" "\n" "<" "li/" ">" "\n" "<" "li/" ">" "<" "/ul" ">" "<" "/div" ">" "<" "/div" ">" "\n" "<" "!-- Racket navbar end --" ">" "\n\n  " "<" "b:section class='navbar' id='navbar' maxwidgets='1' showaddelement='no'" ">" "\n    " "<" "b:widget id='Navbar1' locked='true' title='Navbar' type='Navbar'" ">" "\n      " "<" "b:includable id='main'" ">" "&" "lt;script type=" "&" "quot;text/javascript" "&" "quot;" "&" "gt;\n    function setAttributeOnload(object, attribute, val) {\n      if(window.addEventListener) {\n        window.addEventListener(" "&" "#39;load" "&" "#39;,\n          function(){ object[attribute] = val; }, false);\n      } else {\n        window.attachEvent(" "&" "#39;onload" "&" "#39;, function(){ object[attribute] = val; });\n      }\n    }\n  " "&" "lt;/script" "&" "gt;\n" "&" "lt;div id=" "&" "quot;navbar-iframe-container" "&" "quot;" "&" "gt;" "&" "lt;/div" "&" "gt;\n" "&" "lt;script type=" "&" "quot;text/javascript" "&" "quot; src=" "&" "quot;https://apis.google.com/js/plusone.js" "&" "quot;" "&" "gt;" "&" "lt;/script" "&" "gt;\n" "&" "lt;script type=" "&" "quot;text/javascript" "&" "quot;" "&" "gt;\n        gapi.load(" "&" "quot;gapi.iframes:gapi.iframes.style.bubble" "&" "quot;, function() {\n          if (gapi.iframes " "&" "amp;" "&" "amp; gapi.iframes.getContext) {\n            gapi.iframes.getContext().openChild({\n                url: " "&" "#39;https://www.blogger.com/navbar.g?targetBlogID\\0752080885971644496896\\46blogName\\75The+Racket+Blog\\46publishMode\\75PUBLISH_MODE_HOSTED\\46navbarType\\75DISABLED\\46layoutType\\75LAYOUTS\\46searchRoot\\75http://blog.racket-lang.org/search\\46blogLocale\\75en\\46v\\0752\\46homepageUrl\\75http://blog.racket-lang.org/\\46vt\\0755151180936093146796" "&" "#39;,\n                where: document.getElementById(" "&" "quot;navbar-iframe-container" "&" "quot;),\n                id: " "&" "quot;navbar-iframe" "&" "quot;\n            });\n          }\n        });\n      " "&" "lt;/script" "&" "gt;" "&" "lt;script type=" "&" "quot;text/javascript" "&" "quot;" "&" "gt;\n(function() {\nvar script = document.createElement(" "&" "#39;script" "&" "#39;);\nscript.type = " "&" "#39;text/javascript" "&" "#39;;\nscript.src = " "&" "#39;//pagead2.googlesyndication.com/pagead/js/google_top_exp.js" "&" "#39;;\nvar head = document.getElementsByTagName(" "&" "#39;head" "&" "#39;)[0];\nif (head) {\nhead.appendChild(script);\n}})();\n" "&" "lt;/script" "&" "gt;\n" "<" "/b:includable" ">" "\n    " "<" "/b:widget" ">" "\n  " "<" "/b:section" ">" "\n\n" "<" "div id='outer-wrapper'" ">" "<" "div id='wrap2'" ">" "\n\n  " "<" "!-- skip links for text browsers --" ">" "\n  " "<" "span id='skiplinks' style='display: none;'" ">" "\n    " "<" "a href='#main'" ">" "skip to main " "<" "/a" ">" " |\n    " "<" "a href='#sidebar'" ">" "skip to sidebar" "<" "/a" ">" "\n  " "<" "/span" ">" "\n\n  " "<" "div id='content-wrapper'" ">" "\n\n    " "<" "div id='crosscol-wrapper' style='text-align: center;'" ">" "\n      " "<" "b:section class='crosscol' id='crosscol' showaddelement='no'/" ">" "\n    " "<" "/div" ">" "\n\n    " "<" "div id='main-wrapper'" ">" "\n      " "<" "b:section class='main' id='main' showaddelement='no'" ">" "\n        " "<" "b:widget id='Blog1' locked='true' title='Blog Posts' type='Blog'" ">" "\n          " "<" "b:includable id='main' var='top'" ">" "\n            " "<" "!-- posts --" ">" "\n            " "<" "div class='blog-posts hfeed'" ">" "\n\n              " "<" "b:include data='top' name='status-message'/" ">" "\n\n              " "<" "data:defaultAdStart/" ">" "\n              " "<" "b:loop values='data:posts' var='post'" ">" "\n                " "<" "b:if cond='data:post.isDateStart'" ">" "\n                  " "<" "b:if cond='data:post.isFirstPost == " "&" "quot;false" "&" "quot;'" ">" "\n                    " "&" "lt;/div" "&" "gt;" "&" "lt;/div" "&" "gt;\n                  " "<" "/b:if" ">" "\n                " "<" "/b:if" ">" "\n                " "<" "b:if cond='data:post.isDateStart'" ">" "\n                  " "&" "lt;div class=" "&" "quot;date-outer" "&" "quot;" "&" "gt;\n                " "<" "/b:if" ">" "\n                " "<" "b:if cond='data:post.dateHeader'" ">" "\n                  " "<" "h2 class='date-header'" ">" "<" "span" ">" "<" "data:post.dateHeader/" ">" "<" "/span" ">" "<" "/h2" ">" "\n                " "<" "/b:if" ">" "\n                " "<" "b:if cond='data:post.isDateStart'" ">" "\n                  " "&" "lt;div class=" "&" "quot;date-posts" "&" "quot;" "&" "gt;\n                " "<" "/b:if" ">" "\n                " "<" "div class='post-outer'" ">" "\n                  " "<" "b:include data='post' name='post'/" ">" "\n                  " "<" "b:if cond='data:blog.pageType == " "&" "quot;static_page" "&" "quot;'" ">" "\n                    " "<" "b:include data='post' name='comments'/" ">" "\n                  " "<" "/b:if" ">" "\n                  " "<" "b:if cond='data:blog.pageType == " "&" "quot;item" "&" "quot;'" ">" "\n                    " "<" "b:include data='post' name='comments'/" ">" "\n                  " "<" "/b:if" ">" "\n                " "<" "/div" ">" "\n                " "<" "b:if cond='data:post.includeAd'" ">" "\n                  " "<" "b:if cond='data:post.isFirstPost'" ">" "\n                    " "<" "data:defaultAdEnd/" ">" "\n                    " "<" "b:else/" ">" "\n                    " "<" "data:adEnd/" ">" "\n                  " "<" "/b:if" ">" "\n                  " "<" "div class='inline-ad'" ">" "\n                    " "<" "data:adCode/" ">" "\n                  " "<" "/div" ">" "\n                  " "<" "data:adStart/" ">" "\n                " "<" "/b:if" ">" "\n                " "<" "b:if cond='data:post.trackLatency'" ">" "\n                  " "<" "data:post.latencyJs/" ">" "\n                " "<" "/b:if" ">" "\n              " "<" "/b:loop" ">" "\n              " "<" "b:if cond='data:numPosts != 0'" ">" "\n                " "&" "lt;/div" "&" "gt;" "&" "lt;/div" "&" "gt;\n              " "<" "/b:if" ">" "\n              " "<" "data:adEnd/" ">" "\n            " "<" "/div" ">" "\n\n            " "<" "!-- navigation --" ">" "\n            " "<" "b:include name='nextprev'/" ">" "\n\n            " "<" "!-- feed links --" ">" "\n            " "<" "b:include name='feedLinks'/" ">" "\n\n            " "<" "b:if cond='data:top.showStars'" ">" "\n              " "<" "script src='//www.google.com/jsapi' type='text/javascript'/" ">" "\n              " "<" "script type='text/javascript'" ">" "\n                google.load(" "&" "quot;annotations" "&" "quot;, " "&" "quot;1" "&" "quot;, {" "&" "quot;locale" "&" "quot;: " "&" "quot;" "<" "data:top.languageCode/" ">" "&" "quot;});\n                function initialize() {\n                google.annotations.setApplicationId(" "<" "data:top.blogspotReviews/" ">" ");\n                google.annotations.createAll();\n                google.annotations.fetch();\n                }\n                google.setOnLoadCallback(initialize);\n              " "<" "/script" ">" "\n            " "<" "/b:if" ">" "\n          " "<" "/b:includable" ">" "\n          " "<" "b:includable id='backlinkDeleteIcon' var='backlink'" ">" "\n            " "<" "span expr:class='" "&" "quot;item-control " "&" "quot; + data:backlink.adminClass'" ">" "\n              " "<" "a expr:href='data:backlink.deleteUrl' expr:title='data:top.deleteBacklinkMsg'" ">" "\n                " "<" "img src='//www.blogger.com/img/icon_delete13.gif'/" ">" "\n              " "<" "/a" ">" "\n            " "<" "/span" ">" "\n          " "<" "/b:includable" ">" "\n          " "<" "b:includable id='backlinks' var='post'" ">" "\n            " "<" "a name='links'/" ">" "<" "h4" ">" "<" "data:post.backlinksLabel/" ">" "<" "/h4" ">" "\n            " "<" "b:if cond='data:post.numBacklinks != 0'" ">" "\n              " "<" "dl class='comments-block' id='comments-block'" ">" "\n                " "<" "b:loop values='data:post.backlinks' var='backlink'" ">" "\n                  " "<" "div class='collapsed-backlink backlink-control'" ">" "\n                    " "<" "dt class='comment-title'" ">" "\n                      " "<" "span class='backlink-toggle-zippy'" ">" "&" "#160;" "<" "/span" ">" "\n                      " "<" "a expr:href='data:backlink.url' rel='nofollow'" ">" "<" "data:backlink.title/" ">" "<" "/a" ">" "\n                      " "<" "b:include data='backlink' name='backlinkDeleteIcon'/" ">" "\n                    " "<" "/dt" ">" "\n                    " "<" "dd class='comment-body collapseable'" ">" "\n                      " "<" "data:backlink.snippet/" ">" "\n                    " "<" "/dd" ">" "\n                    " "<" "dd class='comment-footer collapseable'" ">" "\n                      " "<" "span class='comment-author'" ">" "<" "data:post.authorLabel/" ">" " " "<" "data:backlink.author/" ">" "<" "/span" ">" "\n                      " "<" "span class='comment-timestamp'" ">" "<" "data:post.timestampLabel/" ">" " " "<" "data:backlink.timestamp/" ">" "<" "/span" ">" "\n                    " "<" "/dd" ">" "\n                  " "<" "/div" ">" "\n                " "<" "/b:loop" ">" "\n              " "<" "/dl" ">" "\n            " "<" "/b:if" ">" "\n            " "<" "p class='comment-footer'" ">" "\n              " "<" "a class='comment-link' expr:href='data:post.createLinkUrl' expr:id='data:widget.instanceId + " "&" "quot;_backlinks-create-link" "&" "quot;' target='_blank'" ">" "<" "data:post.createLinkLabel/" ">" "<" "/a" ">" "\n            " "<" "/p" ">" "\n          " "<" "/b:includable" ">" "\n          " "<" "b:includable id='comment-form' var='post'" ">" "\n            " "<" "div class='comment-form'" ">" "\n              " "<" "a name='comment-form'/" ">" "\n              " "<" "h4 id='comment-post-message'" ">" "<" "data:postCommentMsg/" ">" "<" "/h4" ">" "\n              " "<" "p" ">" "<" "data:blogCommentMessage/" ">" "<" "/p" ">" "\n              " "<" "data:blogTeamBlogMessage/" ">" "\n              " "<" "a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/" ">" "\n              " "<" "iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' frameborder='0' height='410' id='comment-editor' name='comment-editor' src='' width='100%'/" ">" "\n              " "<" "data:post.friendConnectJs/" ">" "\n              " "<" "data:post.cmtfpIframe/" ">" "\n              " "<" "script type='text/javascript'" ">" "\n                BLOG_CMT_createIframe(" "&" "#39;" "<" "data:post.appRpcRelayPath/" ">" "&" "#39;, " "&" "#39;" "<" "data:post.communityId/" ">" "&" "#39;);\n              " "<" "/script" ">" "\n            " "<" "/div" ">" "\n          " "<" "/b:includable" ">" "\n          " "<" "b:includable id='commentDeleteIcon' var='comment'" ">" "\n            " "<" "span expr:class='" "&" "quot;item-control " "&" "quot; + data:comment.adminClass'" ">" "\n              " "<" "a expr:href='data:comment.deleteUrl' expr:title='data:top.deleteCommentMsg'" ">" "\n                " "<" "img src='//www.blogger.com/img/icon_delete13.gif'/" ">" "\n              " "<" "/a" ">" "\n            " "<" "/span" ">" "\n          " "<" "/b:includable" ">" "\n          " "<" "b:includable id='comment_count_picker' var='post'" ">" "\n  " "<" "b:if cond='data:post.commentSource == 1'" ">" "\n    " "<" "span class='cmt_count_iframe_holder' expr:data-count='data:post.numComments' expr:data-onclick='data:post.addCommentOnclick' expr:data-post-url='data:post.url' expr:data-url='data:post.canonicalUrl'" ">" "\n    " "<" "/span" ">" "\n  " "<" "b:else/" ">" "\n    " "<" "a class='comment-link' expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'" ">" "\n      " "<" "data:post.commentLabelFull/" ">" ":\n    " "<" "/a" ">" "\n  " "<" "/b:if" ">" "\n" "<" "/b:includable" ">" "\n          " "<" "b:includable id='comment_picker' var='post'" ">" "\n  " "<" "b:if cond='data:post.commentSource == 1'" ">" "\n    " "<" "b:include data='post' name='iframe_comments'/" ">" "\n  " "<" "b:elseif cond='data:post.showThreadedComments'/" ">" "\n    " "<" "b:include data='post' name='threaded_comments'/" ">" "\n  " "<" "b:else/" ">" "\n    " "<" "b:include data='post' name='comments'/" ">" "\n  " "<" "/b:if" ">" "\n" "<" "/b:includable" ">" "\n          " "<" "b:includable id='comments' var='post'" ">" "\n            " "<" "div class='comments' id='comments'" ">" "\n              " "<" "a name='comments'/" ">" "\n              " "<" "b:if cond='data:post.allowComments'" ">" "\n                " "<" "h4" ">" "\n                  " "<" "b:if cond='data:post.numComments == 1'" ">" "\n                    1 " "<" "data:commentLabel/" ">" ":\n                    " "<" "b:else/" ">" "\n                    " "<" "data:post.numComments/" ">" " " "<" "data:commentLabelPlural/" ">" ":\n                  " "<" "/b:if" ">" "\n                " "<" "/h4" ">" "\n\n                " "<" "b:if cond='data:post.commentPagingRequired'" ">" "\n                  " "<" "span class='paging-control-container'" ">" "\n                    " "<" "a expr:class='data:post.oldLinkClass' expr:href='data:post.oldestLinkUrl'" ">" "<" "data:post.oldestLinkText/" ">" "<" "/a" ">" "\n                    " "&" "#160;\n                    " "<" "a expr:class='data:post.oldLinkClass' expr:href='data:post.olderLinkUrl'" ">" "<" "data:post.olderLinkText/" ">" "<" "/a" ">" "\n                    " "&" "#160;\n                    " "<" "data:post.commentRangeText/" ">" "\n                    " "&" "#160;\n                    " "<" "a expr:class='data:post.newLinkClass' expr:href='data:post.newerLinkUrl'" ">" "<" "data:post.newerLinkText/" ">" "<" "/a" ">" "\n                    " "&" "#160;\n                    " "<" "a expr:class='data:post.newLinkClass' expr:href='data:post.newestLinkUrl'" ">" "<" "data:post.newestLinkText/" ">" "<" "/a" ">" "\n                  " "<" "/span" ">" "\n                " "<" "/b:if" ">" "\n\n                " "<" "div expr:class='data:post.postAuthorClass' expr:id='data:widget.instanceId + " "&" "quot;_comments-block-wrapper" "&" "quot;'" ">" "\n                  " "<" "dl expr:class='data:post.avatarIndentClass' id='comments-block'" ">" "\n                    " "<" "b:loop values='data:post.comments' var='comment'" ">" "\n                      " "<" "dt expr:class='" "&" "quot;comment-author " "&" "quot; + data:comment.authorClass' expr:id='data:comment.anchorName'" ">" "\n                        " "<" "b:if cond='data:comment.favicon'" ">" "\n                          " "<" "img expr:src='data:comment.favicon' height='16px' style='margin-bottom:-2px;' width='16px'/" ">" "\n                        " "<" "/b:if" ">" "\n                        " "<" "a expr:name='data:comment.anchorName'/" ">" "\n                        " "<" "b:if cond='data:blog.enabledCommentProfileImages'" ">" "\n                          " "<" "data:comment.authorAvatarImage/" ">" "\n                        " "<" "/b:if" ">" "\n                        " "<" "b:if cond='data:comment.authorUrl'" ">" "\n                          " "<" "a expr:href='data:comment.authorUrl' rel='nofollow'" ">" "<" "data:comment.author/" ">" "<" "/a" ">" "\n                          " "<" "b:else/" ">" "\n                          " "<" "data:comment.author/" ">" "\n                        " "<" "/b:if" ">" "\n                        " "<" "data:commentPostedByMsg/" ">" "\n                      " "<" "/dt" ">" "\n                      " "<" "dd expr:class='" "&" "quot;comment-body " "&" "quot; + data:comment.commentAuthorClass' expr:id='data:widget.instanceId + data:comment.cmtBodyIdPostfix'" ">" "\n                        " "<" "b:if cond='data:comment.isDeleted'" ">" "\n                          " "<" "span class='deleted-comment'" ">" "<" "data:comment.body/" ">" "<" "/span" ">" "\n                          " "<" "b:else/" ">" "\n                          " "<" "p" ">" "\n                            " "<" "data:comment.body/" ">" "\n                            " "<" "span class='interaction-iframe-guide'/" ">" "\n                          " "<" "/p" ">" "\n                        " "<" "/b:if" ">" "\n                      " "<" "/dd" ">" "\n                      " "<" "dd class='comment-footer'" ">" "\n                        " "<" "span class='comment-timestamp'" ">" "\n                          " "<" "a expr:href='data:comment.url' title='comment permalink'" ">" "\n                            " "<" "data:comment.timestamp/" ">" "\n                          " "<" "/a" ">" "\n                          " "<" "b:include data='comment' name='commentDeleteIcon'/" ">" "\n                        " "<" "/span" ">" "\n                      " "<" "/dd" ">" "\n                    " "<" "/b:loop" ">" "\n                  " "<" "/dl" ">" "\n                " "<" "/div" ">" "\n\n                " "<" "b:if cond='data:post.commentPagingRequired'" ">" "\n                  " "<" "span class='paging-control-container'" ">" "\n                    " "<" "a expr:class='data:post.oldLinkClass' expr:href='data:post.oldestLinkUrl'" ">" "\n                      " "<" "data:post.oldestLinkText/" ">" "\n                    " "<" "/a" ">" "\n                    " "<" "a expr:class='data:post.oldLinkClass' expr:href='data:post.olderLinkUrl'" ">" "\n                      " "<" "data:post.olderLinkText/" ">" "\n                    " "<" "/a" ">" "\n                    " "&" "#160;\n                    " "<" "data:post.commentRangeText/" ">" "\n                    " "&" "#160;\n                    " "<" "a expr:class='data:post.newLinkClass' expr:href='data:post.newerLinkUrl'" ">" "\n                      " "<" "data:post.newerLinkText/" ">" "\n                    " "<" "/a" ">" "\n                    " "<" "a expr:class='data:post.newLinkClass' expr:href='data:post.newestLinkUrl'" ">" "\n                      " "<" "data:post.newestLinkText/" ">" "\n                    " "<" "/a" ">" "\n                  " "<" "/span" ">" "\n                " "<" "/b:if" ">" "\n\n                " "<" "p class='comment-footer'" ">" "\n                  " "<" "b:if cond='data:post.embedCommentForm'" ">" "\n                    " "<" "b:if cond='data:post.allowNewComments'" ">" "\n                      " "<" "b:include data='post' name='comment-form'/" ">" "\n                      " "<" "b:else/" ">" "\n                      " "<" "data:post.noNewCommentsText/" ">" "\n                    " "<" "/b:if" ">" "\n                    " "<" "b:else/" ">" "\n                    " "<" "b:if cond='data:post.allowComments'" ">" "\n                      " "<" "a expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'" ">" "<" "data:postCommentMsg/" ">" "<" "/a" ">" "\n                    " "<" "/b:if" ">" "\n                  " "<" "/b:if" ">" "\n\n                " "<" "/p" ">" "\n              " "<" "/b:if" ">" "\n\n              " "<" "div id='backlinks-container'" ">" "\n                " "<" "div expr:id='data:widget.instanceId + " "&" "quot;_backlinks-container" "&" "quot;'" ">" "\n                  " "<" "b:if cond='data:post.showBacklinks'" ">" "\n                    " "<" "b:include data='post' name='backlinks'/" ">" "\n                  " "<" "/b:if" ">" "\n                " "<" "/div" ">" "\n              " "<" "/div" ">" "\n            " "<" "/div" ">" "\n          " "<" "/b:includable" ">" "\n          " "<" "b:includable id='feedLinks'" ">" "\n            " "<" "b:if cond='data:blog.pageType != " "&" "quot;item" "&" "quot;'" ">" " " "<" "!-- Blog feed links --" ">" "\n              " "<" "b:if cond='data:feedLinks'" ">" "\n                " "<" "div class='blog-feeds'" ">" "\n                  " "<" "b:include data='feedLinks' name='feedLinksBody'/" ">" "\n                " "<" "/div" ">" "\n              " "<" "/b:if" ">" "\n              " "<" "b:else/" ">" " " "<" "!--Post feed links --" ">" "\n              " "<" "div class='post-feeds'" ">" "\n                " "<" "b:loop values='data:posts' var='post'" ">" "\n                  " "<" "b:if cond='data:post.allowComments'" ">" "\n                    " "<" "b:if cond='data:post.feedLinks'" ">" "\n                      " "<" "b:include data='post.feedLinks' name='feedLinksBody'/" ">" "\n                    " "<" "/b:if" ">" "\n                  " "<" "/b:if" ">" "\n                " "<" "/b:loop" ">" "\n              " "<" "/div" ">" "\n            " "<" "/b:if" ">" "\n          " "<" "/b:includable" ">" "\n          " "<" "b:includable id='feedLinksBody' var='links'" ">" "\n            " "<" "div class='feed-links'" ">" "\n              " "<" "data:feedLinksMsg/" ">" "\n              " "<" "b:loop values='data:links' var='f'" ">" "\n                " "<" "a class='feed-link' expr:href='data:f.url' expr:type='data:f.mimeType' target='_blank'" ">" "<" "data:f.name/" ">" " (" "<" "data:f.feedType/" ">" ")" "<" "/a" ">" "\n              " "<" "/b:loop" ">" "\n            " "<" "/div" ">" "\n          " "<" "/b:includable" ">" "\n          " "<" "b:includable id='iframe_comments' var='post'" ">" "\n\n  " "<" "b:if cond='data:post.allowIframeComments'" ">" "\n    " "<" "script expr:src='data:post.iframeCommentSrc' type='text/javascript'/" ">" "\n    " "<" "div class='cmt_iframe_holder' expr:data-href='data:post.canonicalUrl' expr:data-viewtype='data:post.viewType'/" ">" "\n\n    " "<" "b:if cond='data:post.embedCommentForm == " "&" "quot;false" "&" "quot;'" ">" "\n      " "<" "a expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'" ">" "<" "data:postCommentMsg/" ">" "<" "/a" ">" "\n    " "<" "/b:if" ">" "\n  " "<" "/b:if" ">" "\n" "<" "/b:includable" ">" "\n          " "<" "b:includable id='mobile-index-post' var='post'" ">" "\n  " "<" "div class='mobile-date-outer date-outer'" ">" "\n    " "<" "b:if cond='data:post.dateHeader'" ">" "\n      " "<" "div class='date-header'" ">" "\n        " "<" "span" ">" "<" "data:post.dateHeader/" ">" "<" "/span" ">" "\n      " "<" "/div" ">" "\n    " "<" "/b:if" ">" "\n\n    " "<" "div class='mobile-post-outer'" ">" "\n      " "<" "a expr:href='data:post.url'" ">" "\n        " "<" "h3 class='mobile-index-title entry-title' itemprop='name'" ">" "\n          " "<" "data:post.title/" ">" "\n        " "<" "/h3" ">" "\n\n        " "<" "div class='mobile-index-arrow'" ">" "&" "amp;rsaquo;" "<" "/div" ">" "\n\n        " "<" "div class='mobile-index-contents'" ">" "\n          " "<" "b:if cond='data:post.thumbnailUrl'" ">" "\n            " "<" "div class='mobile-index-thumbnail'" ">" "\n              " "<" "div class='Image'" ">" "\n                " "<" "img expr:src='data:post.thumbnailUrl'/" ">" "\n              " "<" "/div" ">" "\n            " "<" "/div" ">" "\n          " "<" "/b:if" ">" "\n\n          " "<" "div class='post-body'" ">" "\n            " "<" "b:if cond='data:post.snippet'" ">" "<" "data:post.snippet/" ">" "<" "/b:if" ">" "\n          " "<" "/div" ">" "\n        " "<" "/div" ">" "\n\n        " "<" "div style='clear: both;'/" ">" "\n      " "<" "/a" ">" "\n\n      " "<" "div class='mobile-index-comment'" ">" "\n        " "<" "b:include cond='data:blog.pageType != " "&" "quot;static_page" "&" "quot;                          and data:post.allowComments                          and data:post.numComments != 0' data='post' name='comment_count_picker'/" ">" "\n      " "<" "/div" ">" "\n    " "<" "/div" ">" "\n  " "<" "/div" ">" "\n" "<" "/b:includable" ">" "\n          " "<" "b:includable id='mobile-main' var='top'" ">" "\n    " "<" "!-- posts --" ">" "\n    " "<" "div class='blog-posts hfeed'" ">" "\n\n      " "<" "b:include data='top' name='status-message'/" ">" "\n\n      " "<" "b:if cond='data:blog.pageType == " "&" "quot;index" "&" "quot;'" ">" "\n        " "<" "b:loop values='data:posts' var='post'" ">" "\n          " "<" "b:include data='post' name='mobile-index-post'/" ">" "\n        " "<" "/b:loop" ">" "\n      " "<" "b:else/" ">" "\n        " "<" "b:loop values='data:posts' var='post'" ">" "\n          " "<" "b:include data='post' name='mobile-post'/" ">" "\n        " "<" "/b:loop" ">" "\n      " "<" "/b:if" ">" "\n    " "<" "/div" ">" "\n\n   " "<" "b:include name='mobile-nextprev'/" ">" "\n" "<" "/b:includable" ">" "\n          " "<" "b:includable id='mobile-nextprev'" ">" "\n  " "<" "div class='blog-pager' id='blog-pager'" ">" "\n    " "<" "b:if cond='data:newerPageUrl'" ">" "\n      " "<" "div class='mobile-link-button' id='blog-pager-newer-link'" ">" "\n      " "<" "a class='blog-pager-newer-link' expr:href='data:newerPageUrl' expr:id='data:widget.instanceId + " "&" "quot;_blog-pager-newer-link" "&" "quot;' expr:title='data:newerPageTitle'" ">" "&" "amp;lsaquo;" "<" "/a" ">" "\n      " "<" "/div" ">" "\n    " "<" "/b:if" ">" "\n\n    " "<" "b:if cond='data:olderPageUrl'" ">" "\n      " "<" "div class='mobile-link-button' id='blog-pager-older-link'" ">" "\n      " "<" "a class='blog-pager-older-link' expr:href='data:olderPageUrl' expr:id='data:widget.instanceId + " "&" "quot;_blog-pager-older-link" "&" "quot;' expr:title='data:olderPageTitle'" ">" "&" "amp;rsaquo;" "<" "/a" ">" "\n      " "<" "/div" ">" "\n    " "<" "/b:if" ">" "\n\n    " "<" "div class='mobile-link-button' id='blog-pager-home-link'" ">" "\n    " "<" "a class='home-link' expr:href='data:blog.homepageUrl'" ">" "<" "data:homeMsg/" ">" "<" "/a" ">" "\n    " "<" "/div" ">" "\n\n    " "<" "div class='mobile-desktop-link'" ">" "\n      " "<" "a class='home-link' expr:href='data:desktopLinkUrl'" ">" "<" "data:desktopLinkMsg/" ">" "<" "/a" ">" "\n    " "<" "/div" ">" "\n\n  " "<" "/div" ">" "\n  " "<" "div class='clear'/" ">" "\n" "<" "/b:includable" ">" "\n          " "<" "b:includable id='mobile-post' var='post'" ">" "\n  " "<" "div class='date-outer'" ">" "\n    " "<" "b:if cond='data:post.dateHeader'" ">" "\n      " "<" "h2 class='date-header'" ">" "<" "span" ">" "<" "data:post.dateHeader/" ">" "<" "/span" ">" "<" "/h2" ">" "\n    " "<" "/b:if" ">" "\n    " "<" "div class='date-posts'" ">" "\n      " "<" "div class='post-outer'" ">" "\n\n        " "<" "div class='post hentry uncustomized-post-template' itemscope='itemscope' itemtype='http://schema.org/BlogPosting'" ">" "\n          " "<" "b:if cond='data:post.thumbnailUrl'" ">" "\n            " "<" "meta expr:content='data:post.thumbnailUrl' itemprop='image_url'/" ">" "\n          " "<" "/b:if" ">" "\n          " "<" "meta expr:content='data:blog.blogId' itemprop='blogId'/" ">" "\n          " "<" "meta expr:content='data:post.id' itemprop='postId'/" ">" "\n\n          " "<" "a expr:name='data:post.id'/" ">" "\n          " "<" "b:if cond='data:post.title'" ">" "\n            " "<" "h3 class='post-title entry-title' itemprop='name'" ">" "\n              " "<" "b:if cond='data:post.link'" ">" "\n                " "<" "a expr:href='data:post.link'" ">" "<" "data:post.title/" ">" "<" "/a" ">" "\n              " "<" "b:elseif cond='data:post.url and data:blog.url != data:post.url'/" ">" "\n                " "<" "a expr:href='data:post.url'" ">" "<" "data:post.title/" ">" "<" "/a" ">" "\n              " "<" "b:else/" ">" "\n                " "<" "data:post.title/" ">" "\n              " "<" "/b:if" ">" "\n            " "<" "/h3" ">" "\n          " "<" "/b:if" ">" "\n\n          " "<" "div class='post-header'" ">" "\n            " "<" "div class='post-header-line-1'/" ">" "\n          " "<" "/div" ">" "\n\n          " "<" "div class='post-body entry-content' expr:id='" "&" "quot;post-body-" "&" "quot; + data:post.id' itemprop='articleBody'" ">" "\n            " "<" "data:post.body/" ">" "\n            " "<" "div style='clear: both;'/" ">" " " "<" "!-- clear for photos floats --" ">" "\n          " "<" "/div" ">" "\n\n          " "<" "div class='post-footer'" ">" "\n            " "<" "div class='post-footer-line post-footer-line-1'" ">" "\n              " "<" "span class='post-author vcard'" ">" "\n                " "<" "b:if cond='data:top.showAuthor'" ">" "\n                  " "<" "b:if cond='data:post.authorProfileUrl'" ">" "\n                    " "<" "span class='fn' itemprop='author' itemscope='itemscope' itemtype='http://schema.org/Person'" ">" "\n                      " "<" "meta expr:content='data:post.authorProfileUrl' itemprop='url'/" ">" "\n                      " "<" "a expr:href='data:post.authorProfileUrl' rel='author' title='author profile'" ">" "\n                        " "<" "span itemprop='name'" ">" "<" "data:post.author/" ">" "<" "/span" ">" "\n                      " "<" "/a" ">" "\n                    " "<" "/span" ">" "\n                  " "<" "b:else/" ">" "\n                    " "<" "span class='fn' itemprop='author' itemscope='itemscope' itemtype='http://schema.org/Person'" ">" "\n                      " "<" "span itemprop='name'" ">" "<" "data:post.author/" ">" "<" "/span" ">" "\n                    " "<" "/span" ">" "\n                  " "<" "/b:if" ">" "\n                " "<" "/b:if" ">" "\n              " "<" "/span" ">" "\n\n              " "<" "span class='post-timestamp'" ">" "\n                " "<" "b:if cond='data:top.showTimestamp'" ">" "\n                  " "<" "data:top.timestampLabel/" ">" "\n                  " "<" "b:if cond='data:post.url'" ">" "\n                    " "<" "meta expr:content='data:post.canonicalUrl' itemprop='url'/" ">" "\n                    " "<" "a class='timestamp-link' expr:href='data:post.url' rel='bookmark' title='permanent link'" ">" "<" "abbr class='published' expr:title='data:post.timestampISO8601' itemprop='datePublished'" ">" "<" "data:post.timestamp/" ">" "<" "/abbr" ">" "<" "/a" ">" "\n                  " "<" "/b:if" ">" "\n                " "<" "/b:if" ">" "\n              " "<" "/span" ">" "\n\n              " "<" "span class='post-comment-link'" ">" "\n                " "<" "b:include cond='data:blog.pageType not in {" "&" "quot;item" "&" "quot;," "&" "quot;static_page" "&" "quot;}                                  and data:post.allowComments' data='post' name='comment_count_picker'/" ">" "\n              " "<" "/span" ">" "\n            " "<" "/div" ">" "\n\n            " "<" "div class='post-footer-line post-footer-line-2'" ">" "\n              " "<" "b:if cond='data:top.showMobileShare'" ">" "\n                " "<" "div class='mobile-link-button goog-inline-block' id='mobile-share-button'" ">" "\n                  " "<" "a href='javascript:void(0);'" ">" "<" "data:shareMsg/" ">" "<" "/a" ">" "\n                " "<" "/div" ">" "\n              " "<" "/b:if" ">" "\n              " "<" "b:if cond='data:top.showDummy'" ">" "\n                " "<" "div class='goog-inline-block dummy-container'" ">" "<" "data:post.dummyTag/" ">" "<" "/div" ">" "\n              " "<" "/b:if" ">" "\n            " "<" "/div" ">" "\n\n          " "<" "/div" ">" "\n        " "<" "/div" ">" "\n\n        " "<" "b:include cond='data:blog.pageType in {" "&" "quot;static_page" "&" "quot;," "&" "quot;item" "&" "quot;}' data='post' name='comment_picker'/" ">" "\n      " "<" "/div" ">" "\n    " "<" "/div" ">" "\n  " "<" "/div" ">" "\n" "<" "/b:includable" ">" "\n          " "<" "b:includable id='nextprev'" ">" "\n            " "<" "div class='blog-pager' id='blog-pager'" ">" "\n              " "<" "b:if cond='data:newerPageUrl'" ">" "\n                " "<" "span id='blog-pager-newer-link'" ">" "\n                  " "<" "a class='blog-pager-newer-link' expr:href='data:newerPageUrl' expr:id='data:widget.instanceId + " "&" "quot;_blog-pager-newer-link" "&" "quot;' expr:title='data:newerPageTitle'" ">" "<" "data:newerPageTitle/" ">" "<" "/a" ">" "\n                " "<" "/span" ">" "\n              " "<" "/b:if" ">" "\n              " "<" "b:if cond='data:olderPageUrl'" ">" "\n                " "<" "span id='blog-pager-older-link'" ">" "\n                  " "<" "a class='blog-pager-older-link' expr:href='data:olderPageUrl' expr:id='data:widget.instanceId + " "&" "quot;_blog-pager-older-link" "&" "quot;' expr:title='data:olderPageTitle'" ">" "<" "data:olderPageTitle/" ">" "<" "/a" ">" "\n                " "<" "/span" ">" "\n              " "<" "/b:if" ">" "\n              " "<" "a class='home-link' expr:href='data:blog.homepageUrl'" ">" "<" "data:homeMsg/" ">" "<" "/a" ">" "\n            " "<" "/div" ">" "\n            " "<" "div class='clear'/" ">" "\n          " "<" "/b:includable" ">" "\n          " "<" "b:includable id='post' var='post'" ">" "\n            " "<" "div class='post'" ">" "\n              " "<" "a expr:name='data:post.id'/" ">" "\n              " "<" "b:if cond='data:post.title'" ">" "\n                " "<" "h3 class='post-title'" ">" "\n                  " "<" "b:if cond='data:post.link'" ">" "\n                    " "<" "a expr:href='data:post.link'" ">" "<" "data:post.title/" ">" "<" "/a" ">" "\n                    " "<" "b:else/" ">" "\n                    " "<" "b:if cond='data:post.url'" ">" "\n                      " "<" "a expr:href='data:post.url'" ">" "<" "data:post.title/" ">" "<" "/a" ">" "\n                      " "<" "b:else/" ">" "\n                      " "<" "data:post.title/" ">" "\n                    " "<" "/b:if" ">" "\n                  " "<" "/b:if" ">" "\n                " "<" "/h3" ">" "\n              " "<" "/b:if" ">" "\n\n              " "<" "div class='post-header-line-1'" ">" "<" "span class='post-author'" ">" "\n                  " "<" "b:if cond='data:top.showAuthor'" ">" "\n                    " "<" "data:top.authorLabel/" ">" " " "<" "data:post.author/" ">" "\n                  " "<" "/b:if" ">" "\n                " "<" "/span" ">" " " "<" "span class='post-timestamp'" ">" "\n                  " "<" "b:if cond='data:top.showTimestamp'" ">" "\n                    " "<" "data:top.timestampLabel/" ">" "\n                    " "<" "b:if cond='data:post.url'" ">" "\n                      " "<" "a class='timestamp-link' expr:href='data:post.url' title='permanent link'" ">" "<" "data:post.timestamp/" ">" "<" "/a" ">" "\n                    " "<" "/b:if" ">" "\n                  " "<" "/b:if" ">" "\n              " "<" "/span" ">" " " "<" "/div" ">" "\n\n              " "<" "div class='post-body'" ">" "\n                " "<" "p" ">" "<" "data:post.body/" ">" "<" "/p" ">" "\n                " "<" "div style='clear: both;'/" ">" " " "<" "!-- clear for photos floats --" ">" "\n              " "<" "/div" ">" "\n              " "<" "div class='post-footer'" ">" "\n                " "<" "p class='post-footer-line post-footer-line-1'" ">" "<" "span class='post-comment-link'" ">" "\n                    " "<" "b:if cond='data:blog.pageType != " "&" "quot;item" "&" "quot;'" ">" "\n\n                      " "<" "b:if cond='data:post.allowComments'" ">" "\n                        " "<" "a class='comment-link' expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'" ">" "<" "b:if cond='data:post.numComments == 1'" ">" "1 " "<" "data:top.commentLabel/" ">" "<" "b:else/" ">" "<" "data:post.numComments/" ">" " " "<" "data:top.commentLabelPlural/" ">" "<" "/b:if" ">" "<" "/a" ">" "\n                      " "<" "/b:if" ">" "\n                    " "<" "/b:if" ">" "\n                  " "<" "/span" ">" " " "<" "span class='post-icons'" ">" "\n                    " "<" "!-- email post links --" ">" "\n                    " "<" "b:if cond='data:post.emailPostUrl'" ">" "\n                      " "<" "span class='item-action'" ">" "\n                        " "<" "a expr:href='data:post.emailPostUrl' expr:title='data:top.emailPostMsg'" ">" "\n                          " "<" "span class='email-post-icon'" ">" "&" "#160;" "<" "/span" ">" "\n                        " "<" "/a" ">" "\n                      " "<" "/span" ">" "\n                    " "<" "/b:if" ">" "\n\n                    " "<" "!-- quickedit pencil --" ">" "\n                    " "<" "b:include data='post' name='postQuickEdit'/" ">" "\n                " "<" "/span" ">" " " "<" "/p" ">" "\n\n                " "<" "p class='post-footer-line post-footer-line-2'" ">" "<" "span class='post-labels'" ">" "\n                    " "<" "b:if cond='data:post.labels'" ">" "\n                      " "<" "data:postLabelsLabel/" ">" "\n                      " "<" "b:loop values='data:post.labels' var='label'" ">" "\n                        " "<" "a expr:href='data:label.url' rel='tag'" ">" "<" "data:label.name/" ">" "<" "/a" ">" "<" "b:if cond='data:label.isLast != " "&" "quot;true" "&" "quot;'" ">" "," "<" "/b:if" ">" "\n                      " "<" "/b:loop" ">" "\n                    " "<" "/b:if" ">" "\n                " "<" "/span" ">" "<" "/p" ">" "\n\n                " "<" "p class='post-footer-line post-footer-line-3'/" ">" "\n              " "<" "/div" ">" "\n            " "<" "/div" ">" "\n          " "<" "/b:includable" ">" "\n          " "<" "b:includable id='postQuickEdit' var='post'" ">" "\n            " "<" "b:if cond='data:post.editUrl'" ">" "\n              " "<" "span expr:class='" "&" "quot;item-control " "&" "quot; + data:post.adminClass'" ">" "\n                " "<" "a expr:href='data:post.editUrl' expr:title='data:top.editPostMsg'" ">" "\n                  " "<" "img alt='' class='icon-action' height='18' src='http://img2.blogblog.com/img/icon18_edit_allbkg.gif' width='18'/" ">" "\n                " "<" "/a" ">" "\n              " "<" "/span" ">" "\n            " "<" "/b:if" ">" "\n          " "<" "/b:includable" ">" "\n          " "<" "b:includable id='shareButtons' var='post'" ">" "\n            " "<" "b:if cond='data:post.sharePostUrl'" ">" "\n              " "<" "a class='share-button sb-email' expr:href='data:post.sharePostUrl + " "&" "quot;" "&" "amp;target=email" "&" "quot;' expr:title='data:top.emailThisMsg' target='_blank'" ">" "<" "span class='share-button-link-text'" ">" "<" "data:top.emailThisMsg/" ">" "<" "/span" ">" "<" "/a" ">" "\n              " "<" "a class='share-button sb-blog' expr:href='data:post.sharePostUrl + " "&" "quot;" "&" "amp;target=blog" "&" "quot;' expr:onclick='" "&" "quot;window.open(this.href, \\" "&" "quot;_blank\\" "&" "quot;, \\" "&" "quot;height=270,width=475\\" "&" "quot;); return false;" "&" "quot;' expr:title='data:top.blogThisMsg' target='_blank'" ">" "<" "span class='share-button-link-text'" ">" "<" "data:top.blogThisMsg/" ">" "<" "/span" ">" "<" "/a" ">" "\n              " "<" "a class='share-button sb-twitter' expr:href='data:post.sharePostUrl + " "&" "quot;" "&" "amp;target=twitter" "&" "quot;' expr:title='data:top.shareToTwitterMsg' target='_blank'" ">" "<" "span class='share-button-link-text'" ">" "<" "data:top.shareToTwitterMsg/" ">" "<" "/span" ">" "<" "/a" ">" "\n              " "<" "a class='share-button sb-facebook' expr:href='data:post.sharePostUrl + " "&" "quot;" "&" "amp;target=facebook" "&" "quot;' expr:onclick='" "&" "quot;window.open(this.href, \\" "&" "quot;_blank\\" "&" "quot;, \\" "&" "quot;height=430,width=640\\" "&" "quot;); return false;" "&" "quot;' expr:title='data:top.shareToFacebookMsg' target='_blank'" ">" "<" "span class='share-button-link-text'" ">" "<" "data:top.shareToFacebookMsg/" ">" "<" "/span" ">" "<" "/a" ">" "\n              " "<" "a class='share-button sb-buzz' expr:href='data:post.sharePostUrl + " "&" "quot;" "&" "amp;target=buzz" "&" "quot;' expr:onclick='" "&" "quot;window.open(this.href, \\" "&" "quot;_blank\\" "&" "quot;, \\" "&" "quot;height=415,width=690\\" "&" "quot;); return false;" "&" "quot;' expr:title='data:top.shareToBuzzMsg' target='_blank'" ">" "<" "span class='share-button-link-text'" ">" "<" "data:top.shareToBuzzMsg/" ">" "<" "/span" ">" "<" "/a" ">" "\n            " "<" "/b:if" ">" "\n          " "<" "/b:includable" ">" "\n          " "<" "b:includable id='status-message'" ">" "\n            " "<" "b:if cond='data:navMessage'" ">" "\n              " "<" "div class='status-msg-wrap'" ">" "\n                " "<" "div class='status-msg-body'" ">" "\n                  " "<" "data:navMessage/" ">" "\n                " "<" "/div" ">" "\n                " "<" "div class='status-msg-border'" ">" "\n                  " "<" "div class='status-msg-bg'" ">" "\n                    " "<" "div class='status-msg-hidden'" ">" "<" "data:navMessage/" ">" "<" "/div" ">" "\n                  " "<" "/div" ">" "\n                " "<" "/div" ">" "\n              " "<" "/div" ">" "\n              " "<" "div style='clear: both;'/" ">" "\n            " "<" "/b:if" ">" "\n          " "<" "/b:includable" ">" "\n          " "<" "b:includable id='threaded-comment-form' var='post'" ">" "\n  " "<" "div class='comment-form'" ">" "\n    " "<" "a name='comment-form'/" ">" "\n    " "<" "b:if cond='data:mobile'" ">" "\n      " "<" "p" ">" "<" "data:blogCommentMessage/" ">" "<" "/p" ">" "\n      " "<" "data:blogTeamBlogMessage/" ">" "\n      " "<" "a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/" ">" "\n      " "<" "iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' expr:height='data:cmtIframeInitialHeight' frameborder='0' id='comment-editor' name='comment-editor' src='' style='display: none' width='100%'/" ">" "\n    " "<" "b:else/" ">" "\n      " "<" "p" ">" "<" "data:blogCommentMessage/" ">" "<" "/p" ">" "\n      " "<" "data:blogTeamBlogMessage/" ">" "\n      " "<" "a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/" ">" "\n      " "<" "iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' expr:height='data:cmtIframeInitialHeight' frameborder='0' id='comment-editor' name='comment-editor' src='' width='100%'/" ">" "\n    " "<" "/b:if" ">" "\n    " "<" "data:post.friendConnectJs/" ">" "\n    " "<" "data:post.cmtfpIframe/" ">" "\n    " "<" "script type='text/javascript'" ">" "\n      BLOG_CMT_createIframe(" "&" "#39;" "<" "data:post.appRpcRelayPath/" ">" "&" "#39;);\n    " "<" "/script" ">" "\n  " "<" "/div" ">" "\n" "<" "/b:includable" ">" "\n          " "<" "b:includable id='threaded_comment_js' var='post'" ">" "\n  " "<" "script async='async' expr:src='data:post.commentSrc' type='text/javascript'/" ">" "\n\n  " "<" "script type='text/javascript'" ">" "\n    (function() {\n      var items = " "<" "data:post.commentJso/" ">" ";\n      var msgs = " "<" "data:post.commentMsgs/" ">" ";\n      var config = " "<" "data:post.commentConfig/" ">" ";\n\n// " "<" "![CDATA[\n      var cursor = null;\n      if (items " "&" "&" " items.length " ">" " 0) {\n        cursor = parseInt(items[items.length - 1].timestamp) + 1;\n      }\n\n      var bodyFromEntry = function(entry) {\n        if (entry.gd$extendedProperty) {\n          for (var k in entry.gd$extendedProperty) {\n            if (entry.gd$extendedProperty[k].name == 'blogger.contentRemoved') {\n              return '" "<" "span class=\"deleted-comment\"" ">" "' + entry.content.$t + '" "<" "/span" ">" "';\n            }\n          }\n        }\n        return entry.content.$t;\n      }\n\n      var parse = function(data) {\n        cursor = null;\n        var comments = [];\n        if (data " "&" "&" " data.feed " "&" "&" " data.feed.entry) {\n          for (var i = 0, entry; entry = data.feed.entry[i]; i++) {\n            var comment = {};\n            // comment ID, parsed out of the original id format\n            var id = /blog-(\\d+).post-(\\d+)/.exec(entry.id.$t);\n            comment.id = id ? id[2] : null;\n            comment.body = bodyFromEntry(entry);\n            comment.timestamp = Date.parse(entry.published.$t) + '';\n            if (entry.author " "&" "&" " entry.author.constructor === Array) {\n              var auth = entry.author[0];\n              if (auth) {\n                comment.author = {\n                  name: (auth.name ? auth.name.$t : undefined),\n                  profileUrl: (auth.uri ? auth.uri.$t : undefined),\n                  avatarUrl: (auth.gd$image ? auth.gd$image.src : undefined)\n                };\n              }\n            }\n            if (entry.link) {\n              if (entry.link[2]) {\n                comment.link = comment.permalink = entry.link[2].href;\n              }\n              if (entry.link[3]) {\n                var pid = /.*comments\\/default\\/(\\d+)\\?.*/.exec(entry.link[3].href);\n                if (pid " "&" "&" " pid[1]) {\n                  comment.parentId = pid[1];\n                }\n              }\n            }\n            comment.deleteclass = 'item-control blog-admin';\n            if (entry.gd$extendedProperty) {\n              for (var k in entry.gd$extendedProperty) {\n                if (entry.gd$extendedProperty[k].name == 'blogger.itemClass') {\n                  comment.deleteclass += ' ' + entry.gd$extendedProperty[k].value;\n                } else if (entry.gd$extendedProperty[k].name == 'blogger.displayTime') {\n                  comment.displayTime = entry.gd$extendedProperty[k].value;\n                }\n              }\n            }\n            comments.push(comment);\n          }\n        }\n        return comments;\n      };\n\n      var paginator = function(callback) {\n        if (hasMore()) {\n          var url = config.feed + '?alt=json" "&" "v=2" "&" "orderby=published" "&" "reverse=false" "&" "max-results=50';\n          if (cursor) {\n            url += '" "&" "published-min=' + new Date(cursor).toISOString();\n          }\n          window.bloggercomments = function(data) {\n            var parsed = parse(data);\n            cursor = parsed.length " "<" " 50 ? null\n                : parseInt(parsed[parsed.length - 1].timestamp) + 1\n            callback(parsed);\n            window.bloggercomments = null;\n          }\n          url += '" "&" "callback=bloggercomments';\n          var script = document.createElement('script');\n          script.type = 'text/javascript';\n          script.src = url;\n          document.getElementsByTagName('head')[0].appendChild(script);\n        }\n      };\n      var hasMore = function() {\n        return !!cursor;\n      };\n      var getMeta = function(key, comment) {\n        if ('iswriter' == key) {\n          var matches = !!comment.author\n              " "&" "&" " comment.author.name == config.authorName\n              " "&" "&" " comment.author.profileUrl == config.authorUrl;\n          return matches ? 'true' : '';\n        } else if ('deletelink' == key) {\n          return config.baseUri + '/delete-comment.g?blogID='\n               + config.blogId + '" "&" "postID=' + comment.id;\n        } else if ('deleteclass' == key) {\n          return comment.deleteclass;\n        }\n        return '';\n      };\n\n      var replybox = null;\n      var replyUrlParts = null;\n      var replyParent = undefined;\n\n      var onReply = function(commentId, domId) {\n        if (replybox == null) {\n          // lazily cache replybox, and adjust to suit this style:\n          replybox = document.getElementById('comment-editor');\n          if (replybox != null) {\n            replybox.height = '250px';\n            replybox.style.display = 'block';\n            replyUrlParts = replybox.src.split('#');\n          }\n        }\n        if (replybox " "&" "&" " (commentId !== replyParent)) {\n          replybox.src = '';\n          document.getElementById(domId).insertBefore(replybox, null);\n          replybox.src = replyUrlParts[0]\n              + (commentId ? '" "&" "parentID=' + commentId : '')\n              + '#' + replyUrlParts[1];\n          replyParent = commentId;\n        }\n      };\n\n      var hash = (window.location.hash || '#').substring(1);\n      var startThread, targetComment;\n      if (/^comment-form_/.test(hash)) {\n        startThread = hash.substring('comment-form_'.length);\n      } else if (/^c[0-9]+$/.test(hash)) {\n        targetComment = hash.substring(1);\n      }\n\n      // Configure commenting API:\n      var configJso = {\n        'maxDepth': config.maxThreadDepth\n      };\n      var provider = {\n        'id': config.postId,\n        'data': items,\n        'loadNext': paginator,\n        'hasMore': hasMore,\n        'getMeta': getMeta,\n        'onReply': onReply,\n        'rendered': true,\n        'initComment': targetComment,\n        'initReplyThread': startThread,\n        'config': configJso,\n        'messages': msgs\n      };\n\n      var render = function() {\n        if (window.goog " "&" "&" " window.goog.comments) {\n          var holder = document.getElementById('comment-holder');\n          window.goog.comments.render(holder, provider);\n        }\n      };\n\n      // render now, or queue to render when library loads:\n      if (window.goog " "&" "&" " window.goog.comments) {\n        render();\n      } else {\n        window.goog = window.goog || {};\n        window.goog.comments = window.goog.comments || {};\n        window.goog.comments.loadQueue = window.goog.comments.loadQueue || [];\n        window.goog.comments.loadQueue.push(render);\n      }\n    })();\n// ]]" ">" "\n  " "<" "/script" ">" "\n" "<" "/b:includable" ">" "\n          " "<" "b:includable id='threaded_comments' var='post'" ">" "\n  " "<" "div class='comments' id='comments'" ">" "\n    " "<" "a name='comments'/" ">" "\n    " "<" "h4" ">" "<" "data:post.commentLabelFull/" ">" ":" "<" "/h4" ">" "\n\n    " "<" "div class='comments-content'" ">" "\n      " "<" "b:include cond='data:post.embedCommentForm' data='post' name='threaded_comment_js'/" ">" "\n      " "<" "div id='comment-holder'" ">" "\n         " "<" "data:post.commentHtml/" ">" "\n      " "<" "/div" ">" "\n    " "<" "/div" ">" "\n\n    " "<" "p class='comment-footer'" ">" "\n      " "<" "b:if cond='data:post.allowNewComments'" ">" "\n        " "<" "b:include data='post' name='threaded-comment-form'/" ">" "\n      " "<" "b:else/" ">" "\n        " "<" "data:post.noNewCommentsText/" ">" "\n      " "<" "/b:if" ">" "\n    " "<" "/p" ">" "\n\n    " "<" "b:if cond='data:showCmtPopup'" ">" "\n      " "<" "div id='comment-popup'" ">" "\n        " "<" "iframe allowtransparency='true' frameborder='0' id='comment-actions' name='comment-actions' scrolling='no'" ">" "\n        " "<" "/iframe" ">" "\n      " "<" "/div" ">" "\n    " "<" "/b:if" ">" "\n\n    " "<" "div id='backlinks-container'" ">" "\n    " "<" "div expr:id='data:widget.instanceId + " "&" "quot;_backlinks-container" "&" "quot;'" ">" "\n      " "<" "b:include cond='data:post.showBacklinks' data='post' name='backlinks'/" ">" "\n    " "<" "/div" ">" "\n    " "<" "/div" ">" "\n  " "<" "/div" ">" "\n" "<" "/b:includable" ">" "\n        " "<" "/b:widget" ">" "\n      " "<" "/b:section" ">" "\n    " "<" "/div" ">" "\n\n    " "<" "div id='sidebar-wrapper'" ">" "\n      " "<" "b:section class='sidebar' id='sidebar' preferred='yes'" ">" "\n        " "<" "b:widget id='BlogArchive1' locked='false' title='Blog Archive' type='BlogArchive'" ">" "\n          " "<" "b:includable id='main'" ">" "\n            " "<" "b:if cond='data:title'" ">" "\n              " "<" "h2" ">" "<" "data:title/" ">" "<" "/h2" ">" "\n            " "<" "/b:if" ">" "\n            " "<" "div class='widget-content'" ">" "\n              " "<" "div id='ArchiveList'" ">" "\n                " "<" "div expr:id='data:widget.instanceId + " "&" "quot;_ArchiveList" "&" "quot;'" ">" "\n                  " "<" "b:if cond='data:style == " "&" "quot;HIERARCHY" "&" "quot;'" ">" "\n                    " "<" "b:include data='data' name='interval'/" ">" "\n                  " "<" "/b:if" ">" "\n                  " "<" "b:if cond='data:style == " "&" "quot;FLAT" "&" "quot;'" ">" "\n                    " "<" "b:include data='data' name='flat'/" ">" "\n                  " "<" "/b:if" ">" "\n                  " "<" "b:if cond='data:style == " "&" "quot;MENU" "&" "quot;'" ">" "\n                    " "<" "b:include data='data' name='menu'/" ">" "\n                  " "<" "/b:if" ">" "\n                " "<" "/div" ">" "\n              " "<" "/div" ">" "\n              " "<" "b:include name='quickedit'/" ">" "\n            " "<" "/div" ">" "\n          " "<" "/b:includable" ">" "\n          " "<" "b:includable id='flat' var='data'" ">" "\n            " "<" "ul class='flat'" ">" "\n              " "<" "b:loop values='data:data' var='i'" ">" "\n                " "<" "li class='archivedate'" ">" "\n                  " "<" "a expr:href='data:i.url'" ">" "<" "data:i.name/" ">" "<" "/a" ">" " (" "<" "data:i.post-count/" ">" ")\n                " "<" "/li" ">" "\n              " "<" "/b:loop" ">" "\n            " "<" "/ul" ">" "\n          " "<" "/b:includable" ">" "\n          " "<" "b:includable id='interval' var='intervalData'" ">" "\n            " "<" "b:loop values='data:intervalData' var='i'" ">" "\n              " "<" "ul class='hierarchy'" ">" "\n                " "<" "li expr:class='" "&" "quot;archivedate " "&" "quot; + data:i.expclass'" ">" "\n                  " "<" "b:include data='i' name='toggle'/" ">" "\n                  " "<" "a class='post-count-link' expr:href='data:i.url'" ">" "<" "data:i.name/" ">" "<" "/a" ">" "\n                  " "<" "span class='post-count' dir='ltr'" ">" "(" "<" "data:i.post-count/" ">" ")" "<" "/span" ">" "\n                  " "<" "b:if cond='data:i.data'" ">" "\n                    " "<" "b:include data='i.data' name='interval'/" ">" "\n                  " "<" "/b:if" ">" "\n                  " "<" "b:if cond='data:i.posts'" ">" "\n                    " "<" "b:include data='i.posts' name='posts'/" ">" "\n                  " "<" "/b:if" ">" "\n                " "<" "/li" ">" "\n              " "<" "/ul" ">" "\n            " "<" "/b:loop" ">" "\n          " "<" "/b:includable" ">" "\n          " "<" "b:includable id='menu' var='data'" ">" "\n            " "<" "select expr:id='data:widget.instanceId + " "&" "quot;_ArchiveMenu" "&" "quot;'" ">" "\n              " "<" "option value=''" ">" "<" "data:title/" ">" "<" "/option" ">" "\n              " "<" "b:loop values='data:data' var='i'" ">" "\n                " "<" "option expr:value='data:i.url'" ">" "<" "data:i.name/" ">" " (" "<" "data:i.post-count/" ">" ")" "<" "/option" ">" "\n              " "<" "/b:loop" ">" "\n            " "<" "/select" ">" "\n          " "<" "/b:includable" ">" "\n          " "<" "b:includable id='posts' var='posts'" ">" "\n            " "<" "ul class='posts'" ">" "\n              " "<" "b:loop values='data:posts' var='i'" ">" "\n                " "<" "li" ">" "<" "a expr:href='data:i.url'" ">" "<" "data:i.title/" ">" "<" "/a" ">" "<" "/li" ">" "\n              " "<" "/b:loop" ">" "\n            " "<" "/ul" ">" "\n          " "<" "/b:includable" ">" "\n          " "<" "b:includable id='toggle' var='interval'" ">" "\n            " "<" "b:if cond='data:interval.toggleId'" ">" "\n              " "<" "b:if cond='data:interval.expclass == " "&" "quot;expanded" "&" "quot;'" ">" "\n                " "<" "a class='toggle' href='javascript:void(0)'" ">" "\n                  " "<" "span class='zippy toggle-open'" ">" "&" "#9660;" "&" "#160;" "<" "/span" ">" "\n                " "<" "/a" ">" "\n                " "<" "b:else/" ">" "\n                " "<" "a class='toggle' href='javascript:void(0)'" ">" "\n                  " "<" "span class='zippy'" ">" "\n                    " "<" "b:if cond='data:blog.languageDirection == " "&" "quot;rtl" "&" "quot;'" ">" "\n                      " "&" "#9668;" "&" "#160;\n                      " "<" "b:else/" ">" "\n                      " "&" "#9658;" "&" "#160;\n                    " "<" "/b:if" ">" "\n                  " "<" "/span" ">" "\n                " "<" "/a" ">" "\n              " "<" "/b:if" ">" "\n            " "<" "/b:if" ">" "\n          " "<" "/b:includable" ">" "\n        " "<" "/b:widget" ">" "\n        " "<" "b:widget id='LinkList1' locked='false' title='Racket Resources' type='LinkList'" ">" "\n          " "<" "b:includable id='main'" ">" "\n\n            " "<" "b:if cond='data:title'" ">" "<" "h2" ">" "<" "data:title/" ">" "<" "/h2" ">" "<" "/b:if" ">" "\n            " "<" "div class='widget-content'" ">" "\n              " "<" "ul" ">" "\n                " "<" "b:loop values='data:links' var='link'" ">" "\n                  " "<" "li" ">" "<" "a expr:href='data:link.target'" ">" "<" "data:link.name/" ">" "<" "/a" ">" "<" "/li" ">" "\n                " "<" "/b:loop" ">" "\n              " "<" "/ul" ">" "\n              " "<" "b:include name='quickedit'/" ">" "\n            " "<" "/div" ">" "\n          " "<" "/b:includable" ">" "\n        " "<" "/b:widget" ">" "\n      " "<" "/b:section" ">" "\n    " "<" "/div" ">" "\n\n    " "<" "!-- spacer for skins that want sidebar and main to be the same height--" ">" "\n    " "<" "div class='clear'" ">" "&" "#160;" "<" "/div" ">" "\n\n  " "<" "/div" ">" " " "<" "!-- end content-wrapper --" ">" "\n\n  " "<" "div id='footer-wrapper'" ">" "\n    " "<" "b:section class='footer' id='footer'/" ">" "\n  " "<" "/div" ">" "\n\n" "<" "/div" ">" "<" "/div" ">" "\n" "<" "/body" ">" "\n" "<" "/html" ">") (link ((href "https://www.blogger.com/feeds/2080885971644496896/template/default") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/template/default") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/") (rel "alternate") (type "text/html"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_PUBLISHING_MODE") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "The type of publishing done for this blog.") (content ((type "text")) "PUBLISH_MODE_HOSTED") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_PUBLISHING_MODE") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_PUBLISHING_MODE") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_ADMIN_PERMISSION") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "The list of administrators' emails for the blog.") (content ((type "text")) "rmculpepper@gmail.com,asumu.takikawa@gmail.com,robby.findler@gmail.com,samth0@gmail.com,eli@barzilay.org,mflatt@cs.utah.edu,elibarzi@gmail.com,jensaxelsoegaard@gmail.com") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_ADMIN_PERMISSION") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_ADMIN_PERMISSION") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_ADULT_CONTENT") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "Whether this blog contains adult content") (content ((type "text")) "false") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_ADULT_CONTENT") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_ADULT_CONTENT") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_ALTERNATE_JSRENDER_ALLOWED") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "Whether alternate JS renderings are allowed") (content ((type "text")) "true") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_ALTERNATE_JSRENDER_ALLOWED") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_ALTERNATE_JSRENDER_ALLOWED") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_ANALYTICS_ACCOUNT_NUMBER") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "Blog's Google Analytics account number") (content ((type "text"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_ANALYTICS_ACCOUNT_NUMBER") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_ANALYTICS_ACCOUNT_NUMBER") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_ARCHIVE_DATE_FORMAT") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "The number of the archive index date format") (content ((type "text")) "7") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_ARCHIVE_DATE_FORMAT") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_ARCHIVE_DATE_FORMAT") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_ARCHIVE_FREQUENCY") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "How frequently this blog should be archived") (content ((type "text")) "MONTHLY") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_ARCHIVE_FREQUENCY") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_ARCHIVE_FREQUENCY") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_AUTHOR_PERMISSION") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "The list of authors' emails who have permission to publish.") (content ((type "text")) "mightyfoo@gmail.com,jay.mccarthy@gmail.com,mwand1@gmail.com,mrkludge@gmail.com,neil.toronto@gmail.com,jacobm@gmail.com,david.herman@gmail.com,jbclements@gmail.com,noelwelsh@gmail.com,rcobbe@gmail.com,kfisler@gmail.com,carl.eastlund@gmail.com,joe.politz@gmail.com,ghcooper@gmail.com,kgray@mail.com,sstrickl@gmail.com,stamourv@gmail.com,matthiasf@gmail.com,johnbclements@gmail.com,danny.yoo@gmail.com,shriram@gmail.com") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_AUTHOR_PERMISSION") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_AUTHOR_PERMISSION") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_BACKLINKS_ALLOWED") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "Whether to show comment backlinks on the blog") (content ((type "text")) "false") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_BACKLINKS_ALLOWED") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_BACKLINKS_ALLOWED") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_BY_POST_ARCHIVING") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "Whether to provide an archive page for each post") (content ((type "text")) "true") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_BY_POST_ARCHIVING") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_BY_POST_ARCHIVING") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_COMMENT_ACCESS") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "Who can comment") (content ((type "text")) "REGISTERED") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_COMMENT_ACCESS") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_COMMENT_ACCESS") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_COMMENT_CAPTCHA") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "Whether to require commenters to complete a Captcha") (content ((type "text")) "true") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_COMMENT_CAPTCHA") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_COMMENT_CAPTCHA") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_COMMENT_EMAIL") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "List of e-mail addresses to send notifications of new comments to") (content ((type "text")) "blog-posts@racket-lang.org") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_COMMENT_EMAIL") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_COMMENT_EMAIL") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_COMMENT_FEED") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "The type of feed to provide for blog comments") (content ((type "text")) "FULL") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_COMMENT_FEED") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_COMMENT_FEED") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_COMMENT_FORM_LOCATION") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "Blog comment form location") (content ((type "text")) "FULL_PAGE") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_COMMENT_FORM_LOCATION") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_COMMENT_FORM_LOCATION") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_COMMENT_MESSAGE") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "Blog comment message") (content ((type "text"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_COMMENT_MESSAGE") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_COMMENT_MESSAGE") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_COMMENT_MODERATION") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "Whether to enable comment moderation") (content ((type "text")) "ON_OLD_POSTS") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_COMMENT_MODERATION") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_COMMENT_MODERATION") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_COMMENT_MODERATION_DELAY") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "Number of days after which new comments are subject to moderation") (content ((type "text")) "45") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_COMMENT_MODERATION_DELAY") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_COMMENT_MODERATION_DELAY") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_COMMENT_MODERATION_EMAIL") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "Email address to send notifications of new comments needing moderation to") (content ((type "text")) "eli@barzilay.org") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_COMMENT_MODERATION_EMAIL") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_COMMENT_MODERATION_EMAIL") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_COMMENT_PROFILE_IMAGES") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "Whether to show profile images in comments") (content ((type "text")) "true") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_COMMENT_PROFILE_IMAGES") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_COMMENT_PROFILE_IMAGES") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_COMMENTS_ALLOWED") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "Whether to show comments") (content ((type "text")) "true") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_COMMENTS_ALLOWED") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_COMMENTS_ALLOWED") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_COMMENTS_TIME_STAMP_FORMAT") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "Comment time stamp format number") (content ((type "text")) "29") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_COMMENTS_TIME_STAMP_FORMAT") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_COMMENTS_TIME_STAMP_FORMAT") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_CONVERT_LINE_BREAKS") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "Whether to convert line breaks into " "<" "br /" ">" " tags in post editor") (content ((type "text")) "false") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_CONVERT_LINE_BREAKS") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_CONVERT_LINE_BREAKS") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_CUSTOM_PAGE_NOT_FOUND") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "The content served when the requested post or page is not found.") (content ((type "text"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_CUSTOM_PAGE_NOT_FOUND") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_CUSTOM_PAGE_NOT_FOUND") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_CUSTOM_ROBOTS_TXT") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "The custom robots.txt content of the blog served to search engines.") (content ((type "text"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_CUSTOM_ROBOTS_TXT") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_CUSTOM_ROBOTS_TXT") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_CUSTOM_ROBOTS_TXT_ENABLED") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "Whether this blog serves custom robots.txt content to search engines.") (content ((type "text")) "false") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_CUSTOM_ROBOTS_TXT_ENABLED") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_CUSTOM_ROBOTS_TXT_ENABLED") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_DATE_FORMAT") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "The number of the date header format") (content ((type "text")) "6") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_DATE_FORMAT") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_DATE_FORMAT") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_DEFAULT_BACKLINKS_MODE") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "Default backlinks mode for posts") (content ((type "text")) "DEFAULT_NO_BACKLINKS") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_DEFAULT_BACKLINKS_MODE") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_DEFAULT_BACKLINKS_MODE") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_DEFAULT_COMMENTS_MODE") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "Default comment mode for posts") (content ((type "text")) "DEFAULT_HAVE_COMMENTS") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_DEFAULT_COMMENTS_MODE") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_DEFAULT_COMMENTS_MODE") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_DESCRIPTION") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "A description of the blog") (content ((type "text")) "News, insights, tutorials, and more from the PLT team behind the Racket language.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_DESCRIPTION") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_DESCRIPTION") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_EMAIL_POST_LINKS") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "Whether to show a link for users to e-mail posts") (content ((type "text")) "false") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_EMAIL_POST_LINKS") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_EMAIL_POST_LINKS") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_FEED_REDIRECT_URL") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "URL to redirect post feed requests to") (content ((type "text"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_FEED_REDIRECT_URL") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_FEED_REDIRECT_URL") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_FLOAT_ALIGNMENT") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "Whether float alignment is enabled for the blog") (content ((type "text")) "true") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_FLOAT_ALIGNMENT") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_FLOAT_ALIGNMENT") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_LOCALE") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "Language for this blog") (content ((type "text")) "en") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_LOCALE") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_LOCALE") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_M2B_WHITELIST_EMAIL") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "List of email addresses that can post to the blog via email.") (content ((type "text"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_M2B_WHITELIST_EMAIL") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_M2B_WHITELIST_EMAIL") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_MAX_NUM") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "Maximum number of things to show on the main page\"") (content ((type "text")) "7") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_MAX_NUM") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_MAX_NUM") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_MAX_UNIT") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "Unit of things to show on the main page") (content ((type "text")) "POSTS") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_MAX_UNIT") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_MAX_UNIT") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_META_DESCRIPTION") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "The meta description of the blog served to search engines.") (content ((type "text"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_META_DESCRIPTION") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_META_DESCRIPTION") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_META_DESCRIPTION_ENABLED") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "Whether this blog is served with meta descriptions.") (content ((type "text")) "false") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_META_DESCRIPTION_ENABLED") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_META_DESCRIPTION_ENABLED") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_NAME") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "The name of the blog") (content ((type "text")) "The Racket Blog") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_NAME") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_NAME") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_PER_POST_FEED") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "The type of feed to provide for per-post comments") (content ((type "text")) "FULL") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_PER_POST_FEED") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_PER_POST_FEED") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_POST_FEED") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "The type of feed to provide for blog posts") (content ((type "text")) "FULL") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_POST_FEED") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_POST_FEED") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_POST_FEED_FOOTER") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "Footer to append to the end of each entry in the post feed") (content ((type "text"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_POST_FEED_FOOTER") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_POST_FEED_FOOTER") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_POST_TEMPLATE") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "The template for blog posts") (content ((type "text"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_POST_TEMPLATE") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_POST_TEMPLATE") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_PROMOTED") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "Whether this blog can be promoted on Blogger") (content ((type "text")) "true") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_PROMOTED") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_PROMOTED") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_QUICK_EDITING") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "Whether Quick Editing is enabled") (content ((type "text")) "true") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_QUICK_EDITING") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_QUICK_EDITING") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_READ_ACCESS_MODE") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "The access type for the readers of the blog.") (content ((type "text")) "PUBLIC") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_READ_ACCESS_MODE") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_READ_ACCESS_MODE") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_READER_PERMISSION") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "The list of emails for users who have permission to read the blog.") (content ((type "text"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_READER_PERMISSION") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_READER_PERMISSION") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_SEARCHABLE") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "Whether this blog should be indexed by search engines") (content ((type "text")) "true") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_SEARCHABLE") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_SEARCHABLE") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_SEND_EMAIL") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "Comma separated list of emails to send new blog posts to") (content ((type "text")) "robby@eecs.northwestern.edu,eli@barzilay.org") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_SEND_EMAIL") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_SEND_EMAIL") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_SHOW_TITLE") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "Whether to show the title field") (content ((type "text")) "true") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_SHOW_TITLE") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_SHOW_TITLE") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_SHOW_URL") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "Whether to show a related link box in the post composer") (content ((type "text")) "true") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_SHOW_URL") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_SHOW_URL") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_TIME_STAMP_FORMAT") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "The number of the time stamp format") (content ((type "text")) "4") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_TIME_STAMP_FORMAT") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_TIME_STAMP_FORMAT") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_TIME_ZONE") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "The time zone for this blog") (content ((type "text")) "America/New_York") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_TIME_ZONE") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_TIME_ZONE") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.settings.BLOG_USE_LIGHTBOX") (published "2007-05-03T15:58:51.897-04:00") (updated "2016-02-17T19:16:08.412-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#settings"))) (title ((type "text")) "Whether to show images in the Lightbox when clicked") (content ((type "text")) "true") (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_USE_LIGHTBOX") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/settings/BLOG_USE_LIGHTBOX") (rel "self") (type "application/atom+xml"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16"))))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1889348089950500193") (published "2016-02-08T14:05:00.000-05:00") (updated "2016-02-08T14:05:46.054-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Racket Web Server Security Vulnerability") (post-content "We recently discovered a serious security vulnerability in the Racket web server, which can lead to unintended disclosure of files on the machine running the web server. This vulnerability is fixed in " (a ((href "http://blog.racket-lang.org/2016/02/racket-v64.html")) "Racket version 6.4") ", just released, and we encourage people to upgrade to that version." (br) "\n" (br) "\nThe vulnerability affects web servers that serve static files using the " (span ((style "font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;")) "#:extra-files-paths" nbsp) "option, including the default value of this option. If you do not use the Racket web serve to serve static files, or you do so via a mechanism that does not use the " (span ((style "font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;")) "make-url-" ">" "path") nbsp "function, then you are likely not vulnerable. Affected web serves will allow specially-crafted URLs to access files outside of the specified paths, potentially exposing any file that the web server process is able to read." (br) "\n" (br) "\nIf you cannot immediately upgrade to version 6.4, we have provided a package catalog with updated versions of the \"web-server-lib\" package for versions of Racket back to 6.0. That catalog is located at" (br) "\n" (br) "\n" nbsp (a ((href "http://download.racket-lang.org/patches/web-server-1/")) "http://download.racket-lang.org/patches/web-server-1/") (br) "\n" (br) "\nTo use it to upgrade your Racket installation, add it as a catalog using " (span ((style "font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;")) "raco pkg config") ". To make this process easier, you can download the Racket script available " (a ((href "https://gist.github.com/samth/c81e1e2fabc744759970")) "here") ". Then run:" (br) "\n" (span ((style "font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;")) (br)) "\n" (span ((style "font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;")) nbsp " $ racket add-catalog.rkt") (br) "\n" (span ((style "font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;")) nbsp " $ raco pkg update -i web-server-lib") (br) "\n" (br) "\nIf you need advice on updating Racket installations older than version 6.0, please let us know and we will provide them." (br) "\n" (br) "\nTo test that your Racket installation is fixed, you can run " (a ((href "https://gist.github.com/samth/740cc39eb6c0d9bd7bc3")) "the program here") ". It will print whether your installation is out of date.") (link ((href "http://blog.racket-lang.org/feeds/1889348089950500193/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=1889348089950500193") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1889348089950500193") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1889348089950500193") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2016/02/racket-web-server-security-vulnerability.html") (rel "alternate") (title "Racket Web Server Security Vulnerability") (type "text/html"))) (author (name "Sam Tobin-Hochstadt") (uri "https://www.blogger.com/profile/12049111326816937908") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-9155326247533000133") (published "2016-02-08T11:04:00.000-05:00") (updated "2016-02-08T11:04:44.322-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Racket v6.4") (post-content "Racket version 6.4 is now available from " (a ((href "http://racket-lang.org/")) "http://racket-lang.org/") (br) "\n" (ul "\n" (li "We fixed a security vulnerability in the web server. The existing web server is vulnerable to a navigation attack if it is also enabled to serve files statically; that is, any file readable by the web server is accessible remotely. For more information, see " (a ((href "http://blog.racket-lang.org/2016/02/racket-web-server-security-vulnerability.html")) "this post") ".") "\n" (li "DrRacket's scrolling is faster.") "\n" (li "Incremental garbage-collection mode can eliminate long pauses in a program. For example, incremental mode is useful for avoiding pauses in games and animations." (br) "\nPrograms must specifically request incremental mode with " (tt "(collect-garbage 'incremental)") ", but libraries such as " (tt "2htdp/universe") " include the request as part of the library's implementation.") "\n" (li "The default package catalog is an HTTPS address instead of HTTP, and package operations properly validate server certificates when using HTTPS.") "\n" (li "Documentation may define their own categories for the manual top-level page by using strings, rather than only symbols that name pre-defined categories.") "\n" (li "The Racket cheat sheet is included in the main distribution.") "\n" (li "DrRacket is available in Bulgarian, thanks to Alexander Shopov.") "\n" (li "The contract Typed Racket generates for the " (tt "Any") " type is more permissive, allowing more typed/untyped programs to work without contract errors.") "\n" (li "Redex supports binding specifications; describe which variables bind in which expressions and your metafunctions and reduction relations automatically become scope-sensitive. Thanks to Paul Stansifer for this improvement.") "\n" (li "All " (tt "pict") " functions accept " (tt "pict-convertible") "s. This allows for transparent interoperability between " (tt "pict") " and libraries like " (tt "2htdp/image") ".") "\n" (li "The " (tt "raco profile") " and " (tt "raco contract-profile") " commands provide easy access to profiling tools, without requiring program modifications.") "\n") "\nFeedback Welcome") (link ((href "http://blog.racket-lang.org/feeds/9155326247533000133/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=9155326247533000133") (rel "replies") (title "2 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/9155326247533000133") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/9155326247533000133") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2016/02/racket-v64.html") (rel "alternate") (title "Racket v6.4") (type "text/html"))) (author (name "Ryan Culpepper") (uri "https://www.blogger.com/profile/04275692281825651783") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "2")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5211027193984274951") (published "2015-11-23T23:30:00.000-05:00") (updated "2015-11-23T23:30:11.384-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Racket v6.3") (post-content "Racket version 6.3 is now available from " (a ((href "http://racket-lang.org/")) "http://racket-lang.org/") (br) "\n" (ul "\n" (li "Racket's macro expander uses a new representation of binding called \"set of scopes\". The new binding model provides a simpler explanation of how macros preserve binding, especially across module boundaries and in hygiene-bending expansions. The new expander is mostly compatible with existing Racket macros, but there are some incompatibilities. For the formally inclined, a research paper on this macro system will appear at POPL next year: " (a ((href "http://www.cs.utah.edu/plt/scope-sets/")) "http://www.cs.utah.edu/plt/scope-sets/")) "\n" (li "Racket's GUI library now uses Gtk+ 3 when available, instead of Gtk+ 2. Set the " (tt "PLT_GTK2") " environment variable to select Gtk+ 2.") "\n" (li "Added a new Redex tutorial based on a week-long workshop in SLC.") "\n" (li "Better syntax error checking for Redex patterns that do not use holes correctly.") "\n" (li "The blueboxes are more agressive about finding names to look up in the docs, meaning they are useful much more often.") "\n" (li "Submodules are now fully supported in Typed Racket. Previously, some uses of submodules would produce internal errors, making it hard to " (tt "module+ test") " and " (tt "module+ main") " effectively in Typed Racket. The switch to the set-of-scopes expander fixed these problems, and submodules are now happily at home in Typed Racket.") "\n" (li "The " (tt "typed/racket/unsafe") " library provides import and export forms that circumvent contract generation. This improves performance for typed-untyped interaction at the cost of safety and debuggability.") "\n" (li "Typed Racket provides experimental support for units (from " (tt "racket/unit") ").") "\n" (li "The experimental " (tt "define-new-subtype") " form allows overlaying finer distinctions between otherwise identical types, similar to Haskell's " (tt "new type") ".") "\n" (li "The " (tt "Promise") " type constructor changes in a backwards-incompatible way to exclude promises created with " (tt "promise/name") ".") "\n" (li "The " (tt "unstable-*") " packages are out of the main distribution. Most of their contents have been either merged with established Racket libraries or spun off as their own packages. This change is backwards compatible for packages that properly list their dependencies. Full details: " (a ((href "http://blog.racket-lang.org/2015/10/retiring-unstable.html")) "http://blog.racket-lang.org/2015/10/retiring-unstable.html")) "\n" (li "edu: " (tt "big-bang") " supports a display-mode clause so that world programs can take over the entire screen.") "\n") "\n" (div "\nFeedback welcome") "\n") (link ((href "http://blog.racket-lang.org/feeds/5211027193984274951/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=5211027193984274951") (rel "replies") (title "8 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/5211027193984274951") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/5211027193984274951") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2015/11/racket-v63.html") (rel "alternate") (title "Racket v6.3") (type "text/html"))) (author (name "Ryan Culpepper") (uri "https://www.blogger.com/profile/04275692281825651783") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "8")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3633011834223686647") (published "2015-10-30T17:34:00.000-04:00") (updated "2015-10-30T17:34:58.522-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Retiring unstable") (post-content (p "Some of you may be familiar with the " (code "unstable") " collection, whose" (br) "\npurpose was to serve as a staging ground for new APIs that hadn't yet" (br) "\nfound a more permanent home. With the advent of the package system," (br) "\npackages can serve that same purpose, which removes the need for a" (br) "\ndedicated " (code "unstable") " collection provided by the main distribution.") (p "For this reason we are moving " (code "unstable-*") " packages out of the main" (br) "\ndistribution.") (p "For backwards compatibility, the packages remain available from the" (br) "\npackage catalog. Packages that properly list their dependencies (as they" (br) "\nshould! it's an error not to!) are unaffected by this change. Packages" (br) "\nthat are missing dependencies may need to be adjusted to include the" (br) "\nappropriate " (code "unstable") " dependencies.") (p "The " (code "unstable") " packages contained many useful functions and APIs, and we" (br) "\nmerged many of them into established Racket libraries. Others were spun" (br) "\noff as their own packages. The remaining APIs, which we judged too" (br) "\nnarrow or too immature, we left in " (code "unstable") " packages, where they are" (br) "\nstill available in their original form. In all cases, the original" (br) "\n" (code "unstable") " libraries continue to export the same bindings they always" (br) "\ndid, to ensure backwards compatibility.") (p "For completeness, here is a list of the fate of each unstable library" (br) "\nthat used to be part of the main distribution.") (ul (li (p (code "unstable/2d")) (ul (li "Moved to the " (code "2d") " package.") "\n")) "\n" (li (p (code "unstable/arrow")) (ul (li "Left in " (code "unstable-lib") ".") "\n")) "\n" (li (p (code "unstable/automata")) (ul (li "Moved to the " (code "automata") " package.") "\n")) "\n" (li (p "unstable/bytes") (ul (li "Left in " (code "unstable-lib") ".") "\n")) "\n" (li (p (code "unstable/class-iop")) (ul (li "Moved to the " (code "class-iop") " package.") "\n")) "\n" (li (p (code "unstable/contract")) (ul (li "Moved " (code "non-empty-string?") " to " (code "racket/string") ".") "\n" (li "Moved " (code "port-number?") " and " (code "tcp-listen-port?") " to " (code "racket/tcp") ", the" (br) "\nlatter renamed to " (code "listen-port-number?") ".") "\n" (li "Moved " (code "if/c") ", " (code "failure-result/c") ", " (code "predicate/c") " and" (br) "\n" (code "rename-contract") " to " (code "racket/contract") ".") "\n" (li "Moved " (code "treeof") " to " (code "plot/utils") ".") "\n" (li "Moved " (code "sequence/c") " to " (code "racket/sequence") ".") "\n" (li "Left " (code "path-piece?") ", " (code "maybe/c") ", " (code "truth/c") " in " (code "unstable-contract-lib") ".") "\n")) "\n" (li (p (code "unstable/custom-write")) (ul (li "Moved " (code "make-constructor-style-printer") " to " (code "racket/struct") ".") "\n" (li "Left " (code "prop:auto-custom-write") " in " (code "unstable-lib") ".") "\n")) "\n" (li (p (code "unstable/debug")) (ul (li "Left in " (code "unstable-debug-lib") ".") "\n")) "\n" (li (p (code "unstable/define")) (ul (li "Left in " (code "unstable-lib") ".") "\n")) "\n" (li (p (code "unstable/error")) (ul (li "Left in " (code "unstable-lib") ".") "\n")) "\n" (li (p (code "unstable/find")) (ul (li "Left in " (code "unstable-lib") ".") "\n")) "\n" (li (p (code "unstable/flonum")) (ul (li "Superceded by " (code "math/flonum") ". Left in " (code "unstable-flonum-lib") ".") "\n")) "\n" (li (p (code "unstable/function")) (ul (li "Merged with " (code "racket/function") ".") "\n")) "\n" (li (p (code "unstable/future")) (ul (li "Merged with " (code "racket/future") ".") "\n")) "\n" (li (p (code "unstable/gui/notify")) (ul (li "Moved to " (code "framework/notify") ", with naming changes.") "\n")) "\n" (li (p (code "unstable/gui/pict")) (ul (li "Moved " (code "color/c") ", " (code "light") ", " (code "dark") ", " (code "red") ", " (code "orange") ", " (code "yellow") ", " (code "green") "," (br) "\n" (code "blue") ", " (code "purple") ", " (code "black") ", " (code "brown") ", " (code "gray") ", " (code "white") ", " (code "cyan") ", and" (br) "\n" (code "magenta") " to " (code "pict/color") ".") "\n" (li "Moved " (code "show") ", " (code "hide") ", " (code "pict-if") ", " (code "pict-cond") ", and " (code "pict-case") " to" (br) "\n" (code "pict/conditional") ".") "\n" (li "Merged " (code "scale-to") " with " (code "pict") "'s " (code "scale-to-fit") ".") "\n" (li "Merged " (code "ellipse/border") ", " (code "circle/border") ", " (code "rectangle/border") "," (br) "\n" (code "rounded-rectangle/border") " with " (code "pict") "'s " (code "ellipse") ", " (code "circle") "," (br) "\n" (code "rectangle") ", and " (code "rounded-rectangle") ", respectively.") "\n" (li "Merged " (code "pin-label-line") ", " (code "pin-arrow-label-line") ", and" (br) "\n" (code "pin-arrows-label-line") " with " (code "pict") "'s " (code "pin-line") ", " (code "pin-arrow-line") "," (br) "\nand " (code "pin-arrows-line") ", respectively.") "\n" (li "Moved " (code "blur") ", " (code "shadow") ", and " (code "shadow-frame") " to " (code "pict/shadow") ".") "\n" (li "Moved " (code "unstable/gui/pict/align") " to " (code "ppict/align") ", in the " (code "ppict") (br) "\npackage.") "\n" (li "Left " (code "color") ", " (code "pict-match") ", " (code "pict-combine") ", " (code "with-pict-combine") "," (br) "\n" (code "fill") ", " (code "strike") ", " (code "shade") ", " (code "blur-bitmap!") ", " (code "arch") "," (br) "\n" (code "draw-pict-centered") ", " (code "backdrop") ", " (code "cross-out") ", and" (br) "\n" (code "make-plt-title-background") " in " (code "unstable-lib") ".") "\n")) "\n" (li (p (code "unstable/gui/ppict")) (ul (li "Moved to the " (code "ppict") " package.") "\n")) "\n" (li (p (code "unstable/gui/prefs")) (ul (li "Moved to " (code "framework/preferences") ", with naming changes.") "\n")) "\n" (li (p (code "unstable/gui/redex")) (ul (li "Left in " (code "unstable-redex") ".") "\n")) "\n" (li (p (code "unstable/gui/scribble")) (ul (li "Left in " (code "unstable-lib") ".") "\n")) "\n" (li (p (code "unstable/gui/slideshow")) (ul (li "Moved " (code "with-size") ", " (code "with-scale") ", " (code "big") ", " (code "small") ", " (code "with-font") "," (br) "\n" (code "with-style") ", " (code "bold") ", " (code "italic") ", " (code "subscript") ", " (code "superscript") ", " (code "caps") "," (br) "\nand " (code "blank-line") " to " (code "slideshow/text") ".") "\n" (li "Moved " (code "slide/staged") ", " (code "staged") ", " (code "stage") ", " (code "stage-name") ", " (code "at") "," (br) "\n" (code "before") ", " (code "after") ", " (code "before/at") ", " (code "after/at") " to the " (code "staged-slide") (br) "\npackage.") "\n" (li "Left " (code "column") ", " (code "columns") ", " (code "column-size") ", " (code "two-columns") "," (br) "\n" (code "mini-slide") ", " (code "tabular") ", " (code "reveal") ", " (code "revealing-slide") ", and" (br) "\n" (code "items-slide") " in " (code "unstable-lib") ".") "\n")) "\n" (li (p (code "unstable/gui/snip")) (ul (li "Left in " (code "unstable-lib") ".") "\n")) "\n" (li (p (code "unstable/hash")) (ul (li "Merged with " (code "racket/hash") ".") "\n")) "\n" (li (p (code "unstable/latent-contract")) (ul (li "Left in " (code "unstable-latent-contract-lib") ".") "\n")) "\n" (li (p (code "unstable/lazy-require")) (ul (li (code "lazy-require") " has been in " (code "racket/lazy-require") " for some time.") "\n" (li "Left " (code "begin-on-demand") " in " (code "unstable-lib") ".") "\n")) "\n" (li (p (code "unstable/list")) (ul (li "Moved " (code "check-duplicates") ", " (code "remf") ", " (code "remf*") ", " (code "group-by") "," (br) "\n" (code "cartesian-product") ", " (code "list-update") ", and " (code "list-set") " to " (code "racket/list") ".") "\n" (li "Moved " (code "list-prefix?") ", " (code "take-common-prefix") ", " (code "drop-common-prefix") "," (br) "\nand " (code "split-common-prefix") " to " (code "racket/list") ", with slight API changes" (br) "\nto harmonize with Racket's list API.") "\n" (li "Left " (code "filter-multiple") ", " (code "extend") ", " (code "map/values") ", and " (code "map2") " in" (br) "\n" (code "unstable-list-lib") ".") "\n")) "\n" (li (p (code "unstable/logging")) (ul (li "Moved " (code "with-intercepted-logging") " and " (code "with-logging-to-port") " to" (br) "\n" (code "racket/logging") ".") "\n" (li "Left " (code "start-recording") " and " (code "stop-recording") " in " (code "unstable-lib") ".") "\n")) "\n" (li (p (code "unstable/macro-testing")) (ul (li "Moved to " (code "syntax/macro-testing") ".") "\n")) "\n" (li (p (code "unstable/markparam")) (ul (li "Moved to the " (code "markparam") " package.") "\n")) "\n" (li (p (code "unstable/open-place")) (ul (li "Moved " (code "open-place") " to " (code "racket/place") ", and renamed it " (code "place/context") ".") "\n")) "\n" (li (p (code "unstable/options")) (ul (li "Moved to the " (code "option-contract") " package.") "\n")) "\n" (li (p (code "unstable/parameter-group")) (ul (li "Moved to the " (code "parameter-group") " package.") "\n")) "\n" (li (p (code "unstable/pretty")) (ul (li "Merged " (code "pretty-format/write") ", " (code "pretty-format/display") ", and" (br) "\n" (code "pretty-format/print") " with " (code "racket/pretty") "'s " (code "pretty-format") ".") "\n" (li "Left " (code "break-lines") " in " (code "unstable-pretty-lib") ".") "\n")) "\n" (li (p (code "unstable/recontract")) (ul (li "Merged with " (code "racket/contract") " some time ago.") "\n")) "\n" (li (p (code "unstable/sandbox")) (ul (li "Merged with " (code "scribble/eval") ".") "\n")) "\n" (li (p (code "unstable/sequence")) (ul (li "Moved " (code "in-syntax") " and " (code "in-slice") "  to " (code "racket/sequence") ".") "\n" (li "Left " (code "in-pairs") ", " (code "in-sequence-forever") ", and " (code "sequence-lift") " in" (br) "\n" (code "unstable-lib") ".") "\n")) "\n" (li (p (code "unstable/socket")) (ul (li "Moved to the " (code "unix-socket") " package.") "\n")) "\n" (li (p (code "unstable/string")) (ul (li "Left in " (code "unstable-lib") ".") "\n")) "\n" (li (p (code "unstable/struct")) (ul (li "Moved " (code "struct-" ">" "list") " to " (code "racket/struct") ".") "\n" (li "Left " (code "make") " in " (code "unstable-lib") ".") "\n")) "\n" (li (p (code "unstable/syntax")) (ul (li "Moved " (code "make-variable-like-transformer") " to " (code "syntax/transformer") ".") "\n" (li "Moved " (code "syntax-source-directory") " and " (code "syntax-source-file-name") " to" (br) "\n" (code "syntax/location") ".") "\n" (li "Left " (code "explode-module-path-index") ", " (code "phase-of-enclosing-module") "," (br) "\n" (code "format-unique-id") ", " (code "syntax-length") ", and " (code "syntax-within?") " in" (br) "\n" (code "unstable/syntax") ".") "\n")) "\n" (li (p (code "unstable/temp-c")) (ul (li "Moved to the " (code "temp-c") " package.") "\n")) "\n" (li (p (code "unstable/time")) (ul (li "Left in " (code "unstable-lib") ".") "\n")) "\n" (li (p (code "unstable/wrapc")) (ul (li "Moved to " (code "syntax/contract") ".") "\n")) "\n")) (link ((href "http://blog.racket-lang.org/feeds/3633011834223686647/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=3633011834223686647") (rel "replies") (title "2 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/3633011834223686647") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/3633011834223686647") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2015/10/retiring-unstable.html") (rel "alternate") (title "Retiring unstable") (type "text/html"))) (author (name "Vincent St-Amour") (uri "https://www.blogger.com/profile/03325477589666862838") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "2")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-312681636472781833") (published "2015-09-22T00:10:00.000-04:00") (updated "2015-09-22T00:10:21.861-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Racket Package Server Security Vulnerabilities") (post-content (div ((dir "ltr") (style "line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;")) "\n" (span ((style "background-color: transparent; color: black; font-family: Arial; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;")) "Recently, we discovered several security vulnerabilities with how both the Racket package catalog server and the Racket package client work. The vulnerabilities have now all been fixed, and we do not know of any exploitation of them. However, we encourage you to take the following steps:")) "\n" (ul ((style "margin-bottom: 0pt; margin-top: 0pt;")) "\n" (li ((dir "ltr") (style "background-color: transparent; color: black; font-family: Arial; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: disc; text-decoration: none; vertical-align: baseline;")) (div ((dir "ltr") (style "line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;")) "\n" (span ((style "background-color: transparent; color: black; font-family: Arial; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;")) "Change your password on the ") (a ((href "http://pkgs.racket-lang.org/") (style "text-decoration: none;")) (span ((style "background-color: transparent; color: #1155cc; font-family: Arial; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;")) "http://pkgs.racket-lang.org")) (span ((style "background-color: transparent; color: black; font-family: Arial; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;")) " site.")) "\n") "\n" (li ((dir "ltr") (style "background-color: transparent; color: black; font-family: Arial; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: disc; text-decoration: none; vertical-align: baseline;")) (div ((dir "ltr") (style "line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;")) "\n" (span ((style "background-color: transparent; color: black; font-family: Arial; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;")) "Check any packages you have uploaded to the site, to ensure that no unexpected changes have been made to them.")) "\n") "\n" (li ((dir "ltr") (style "background-color: transparent; color: black; font-size: 14.6667px; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: disc; text-decoration: none; vertical-align: baseline;")) (div ((dir "ltr") (style "line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;")) "\n" (span ((style "background-color: transparent; color: black; font-family: Arial; font-size: 14.6667px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;")) "Do not use the released versions of the ") (span ((style "background-color: transparent; color: black; font-family: Courier New, Courier, monospace; font-size: 14.6667px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;")) "raco pkg catalog-archive") (span ((style "background-color: transparent; color: black; font-family: Arial; font-size: 14.6667px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;")) " command, or the ") (span ((style "background-color: transparent; color: black; font-family: Courier New, Courier, monospace; font-size: 14.6667px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;")) "file/untar") (span ((style "background-color: transparent; color: black; font-family: Arial; font-size: 14.6667px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;")) " and ") (span ((style "background-color: transparent; color: black; font-family: Courier New, Courier, monospace; font-size: 14.6667px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;")) "file/unzip") (span ((style "background-color: transparent; color: black; font-family: Arial; font-size: 14.6667px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;")) " libraries, on untrusted inputs. If you use these tools or libraries, use a snapshot build available from ") (a ((href "http://pre.racket-lang.org/") (style "font-family: Arial; text-decoration: none;")) (span ((style "background-color: transparent; color: #1155cc; font-family: Arial; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;")) "http://pre.racket-lang.org/")) (span ((style "background-color: transparent; color: black; font-family: Arial; font-size: 14.6667px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;")) ". ")) "\n") "\n") "\n" (h3 "\n" (span ((style "color: #434343; font-family: Arial; font-size: 18.6667px; font-weight: normal; line-height: 25.76px; white-space: pre-wrap;")) "The errors, and how they were fixed")) "\n" (div ((dir "ltr") (style "line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;")) "\n" (span ((style "background-color: transparent; color: black; font-family: Arial; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;")) "A total of 5 errors related to package handling were reported to us by Tony Garnock-Jones and Asumu Takikawa. Two were XSS vulnerabilities relating to handling user input in the package administration dialog. One was an error where unsanitized email addresses with path name components in them could allow a malicious user to impersonate someone else, whom they shared an email suffix with (such addresses are illegal on most mail servers, like Outlook and GMail, but not illegal in SMTP itself.) Two were errors in handling MANIFEST files and tar/zip archives, which allowed decompression to write to arbitrary locations on the file system. These last errors affected not only the server, which decompresses packages to analyze them, but also clients using the commands described above.")) "\n" (br) "\n" (div ((dir "ltr") (style "line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;")) "\n" (span ((style "background-color: transparent; color: black; font-family: Arial; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;")) "The relevant server-side code was fixed to appropriately sanitize user input. The package handling libraries now reject any attempts to navigate up the filesystem hierarchy, meaning that these attacks are no longer possible.")) "\n" (br) "\n" (div ((dir "ltr") (style "line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;")) "\n" (span ((style "background-color: transparent; color: black; font-family: Arial; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;")) "Unfortunately, due to the nature of these attacks, we cannot be sure that they were not exploited, but we have no evidence that they were. Therefore, we encourage anyone with an account to change their password, and to treat the password as compromised. Please also check your existing packages to make sure they are as you left them.")) "\n" (br) "\n" (div ((dir "ltr") (style "line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;")) "\n" (span ((style "background-color: transparent; color: black; font-family: Arial; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;")) "Furthermore, using the ") (span ((style "background-color: transparent; color: black; font-family: Courier New, Courier, monospace; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;")) "file/untar") (span ((style "background-color: transparent; color: black; font-family: Arial; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;")) " and ") (span ((style "background-color: transparent; color: black; font-family: Courier New, Courier, monospace; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;")) "file/unzip") (span ((style "background-color: transparent; color: black; font-family: Arial; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;")) " libraries, the ") (span ((style "background-color: transparent; color: black; font-family: Courier New, Courier, monospace; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;")) "raco pkg catalog-archive") (span ((style "background-color: transparent; color: black; font-family: Arial; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;")) " command, and the internal functions that manipulate packages is not safe on untrusted inputs in released versions of Racket. Since ") (span ((style "background-color: transparent; color: black; font-family: Courier New, Courier, monospace; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;")) "raco pkg install") (span ((style "background-color: transparent; color: black; font-family: Arial; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;")) " executes code, it is already unsafe to use on untrusted packages, but simply extracting malicious packages is also unsafe.")) "\n" (br) "\n" (div ((dir "ltr") (style "line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;")) "\n" (span ((style "background-color: transparent; color: black; font-family: Arial; font-size: 14.666666666666666px; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;")) "We have not released a new version of Racket, but encourage anyone who needs to perform these commands to use a snapshot build. The next version of Racket will be released on-schedule in October. If, however, you would benefit from a patched version of Racket 6.2.1, please let us know.")) "\n" (br)) (link ((href "http://blog.racket-lang.org/feeds/312681636472781833/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=312681636472781833") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/312681636472781833") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/312681636472781833") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2015/09/racket-package-server-security.html") (rel "alternate") (title "Racket Package Server Security Vulnerabilities") (type "text/html"))) (author (name "Sam Tobin-Hochstadt") (uri "https://www.blogger.com/profile/12049111326816937908") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8688269311969682396") (published "2015-08-11T14:33:00.000-04:00") (updated "2015-08-11T14:33:10.895-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Modules, Packages and Collections") (post-content "Racket, the Racket docs and Racketeers use a number of terms to refer to various units of Racket code. Of those, " (i "module") ", " (i "package ") "and " (i "collection") " refer to related but distinct concepts. Their exact" nbsp " relations and distinctions can be confusing for new users. This is an attempt at explaining those concepts, what they are for, and how they relate to each other." (br) "\n" (br) "\nTo begin with the smallest of the three, a file that begins with " (span ((style "font-family: &quot;Courier New&quot;,Courier,monospace;")) "#lang") " and the name of a language is a " (i "module") ". There are also other ways to construct modules, but let's not worry about those." (br) "\n" (br) "\nA module is the basic unit of functionality for Racket code." (br) "\n" (br) "\nOnce your Racket programs get larger, though, you'll want to split them over multiple modules. This allows you to organize your source better, enables separate compilation, and makes it possible for you to mix and match modules written in different Racket languages (" (a ((href "http://docs.racket-lang.org/guide/index.html")) "Racket") ", " (a ((href "http://docs.racket-lang.org/ts-guide/index.html")) "Typed Racket") ", " (a ((href "http://docs.racket-lang.org/datalog/index.html")) "Datalog") ", " (a ((href "http://docs.racket-lang.org/scribble/index.html")) "Scribble") ", etc.)." (br) "\n" (br) "\nThat's where packages and collections come in. They help you organize your modules." (br) "\n" (br) "\nA " (i "package") " is an group of modules that you can install together, and that usually provide one piece of functionality. To pick a random example, take the " (a ((href "http://pkg-build.racket-lang.org/doc/pict3d/index.html")) (span ((style "font-family: &quot;Courier New&quot;,Courier,monospace;")) "pict3d")) " package from " (a ((href "http://pkgs.racket-lang.org/")) "pkgs.racket-lang.org") ". That package is a collection of modules which together implement a functional 3D engine. You can install it using " (span ((style "font-family: &quot;Courier New&quot;,Courier,monospace;")) "raco pkg install pict3d") ", or via the graphical package manager in DrRacket." (br) "\n" (br) "\nSo, to sum up, packages are units of code distribution." (br) "\n" (br) "\nA " (i "collection") " is a group of modules whose functionality is related to the same topic, for example data structures (the " (span ((style "font-family: &quot;Courier New&quot;,Courier,monospace;")) "data") " collection), or wrapper libraries for use with Typed Racket (the " (span ((style "font-family: &quot;Courier New&quot;,Courier,monospace;")) "typed") " collection). Modules are referred to and required using collection paths. For example, when you require " (span ((style "font-family: &quot;Courier New&quot;,Courier,monospace;")) "racket/class") ", you're requiring the " (span ((style "font-family: &quot;Courier New&quot;,Courier,monospace;")) "class") " module from the " (span ((style "font-family: &quot;Courier New&quot;,Courier,monospace;")) "racket") " collection." (br) "\n" (br) "\nModules within a collection do not necessarily come from the same package, and may not be developed together. For example, some data structures in the data collection are provided as part of the core of Racket, such as the integer sets in " (a ((href "http://docs.racket-lang.org/data/integer-set.html")) (span ((style "font-family: &quot;Courier New&quot;,Courier,monospace;")) "data/integer-set")) ". Other data structures are provided by additional packages which you may need to install separately, such as the hash-array-mapped tries in " (span ((style "font-family: &quot;Courier New&quot;,Courier,monospace;")) "data/hamt") ", which are provided by the " (a ((href "http://pkg-build.racket-lang.org/doc/hamt/index.html")) (span ((style "font-family: &quot;Courier New&quot;,Courier,monospace;")) "hamt")) " package. Having both of those in the " (span ((style "font-family: &quot;Courier New&quot;,Courier,monospace;")) "data") " collection signals that they both provide data structures. If you develop your own data structures, putting them in the " (span ((style "font-family: &quot;Courier New&quot;,Courier,monospace;")) "data") " collection is probably the right thing to do." (br) "\n" (br) "\nMany packages, however, provide functionality that does not fall under existing categories, and provide their own, new collection. For example, the " (span ((style "font-family: &quot;Courier New&quot;,Courier,monospace;")) "pict3d") " package we discussed above puts its modules in the " (span ((style "font-family: &quot;Courier New&quot;,Courier,monospace;")) "pict3d") " collection. For that reason, the distinction between package and collection is sometimes a bit blurred." (br) "\n" (br) "\nSo, to sum up, collections are units of code classification." (br) "\n" (br) "\nThe term " (i "library") " does not have a technical meaning in Racket. We usually use it to refer to a package, or to a set of packages that are developed together. For example, the " (a ((href "http://docs.racket-lang.org/rackunit/index.html")) "Rackunit") " library is split across multiple packages: " (span ((style "font-family: &quot;Courier New&quot;,Courier,monospace;")) "rackunit") ", " (span ((style "font-family: &quot;Courier New&quot;,Courier,monospace;")) "rackunit-lib") ", " (span ((style "font-family: &quot;Courier New&quot;,Courier,monospace;")) "rackunit-gui") ", " (span ((style "font-family: &quot;Courier New&quot;,Courier,monospace;")) "rackunit-plugin-lib") ", " (span ((style "font-family: &quot;Courier New&quot;,Courier,monospace;")) "rackunit-doc") " and " (span ((style "font-family: &quot;Courier New&quot;,Courier,monospace;")) "rackunit-test") ". This allows packages to only depend on part of Rackunit. For example, a package for a string-processing library probably should not depend on the " (a ((href "http://docs.racket-lang.org/gui/index.html")) "Racket GUI library") " (to be deployed on headless servers, for example), and so should depend on the " (span ((style "font-family: &quot;Courier New&quot;,Courier,monospace;")) "rackunit-lib") " package for its testing, instead of on the full " (span ((style "font-family: &quot;Courier New&quot;,Courier,monospace;")) "rackunit") " package, which brings in GUI support via the " (span ((style "font-family: &quot;Courier New&quot;,Courier,monospace;")) "rackunit-gui") " package, and would introduce a dependency to Racket's GUI library." (br) "\n" (br) "\nHopefully, this clarifies the Racket code organization terminology a bit.") (link ((href "http://blog.racket-lang.org/feeds/8688269311969682396/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=8688269311969682396") (rel "replies") (title "5 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/8688269311969682396") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/8688269311969682396") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2015/08/modules-packages-and-collections.html") (rel "alternate") (title "Modules, Packages and Collections") (type "text/html"))) (author (name "Vincent St-Amour") (uri "https://www.blogger.com/profile/03325477589666862838") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "5")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-226388589638038874") (published "2015-08-10T17:48:00.000-04:00") (updated "2015-08-10T17:52:57.409-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Racket v6.2.1") (post-content "Racket v6.2.1 is now available from " (a ((href "http://racket-lang.org/")) "http://racket-lang.org/") (br) "\n" (br) "\nVersion 6.2.1 patches the recent v6.2 release in three small ways:" (br) "\n" (ul "\n" (li "For the How to Design Programs teaching languages, DrRacket offers an option to use the old style for printing the constants " (tt "true") ", " (tt "false") ", and " (tt "empty") " instead of " (tt "#true") ", " (tt "#false") ", and " (tt "'()") ".") "\n" (li "The teaching languages come with some additional functions to match the August 2015 " (a ((href "http://www.ccs.neu.edu/home/matthias/HtDP2e/index.html")) "stable release of HtDP 2nd edition") ".") "\n" (li "A repair to the compiler avoids an infinite loop at compile time for certain expressions that should loop forever at run time.") "\n") "\nFeedback Welcome" (br) "\n" (br)) (link ((href "http://blog.racket-lang.org/feeds/226388589638038874/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=226388589638038874") (rel "replies") (title "3 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/226388589638038874") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/226388589638038874") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2015/08/racket-v621.html") (rel "alternate") (title "Racket v6.2.1") (type "text/html"))) (author (name "Ryan Culpepper") (uri "https://www.blogger.com/profile/04275692281825651783") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "3")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1305912042779051989") (published "2015-06-19T23:14:00.000-04:00") (updated "2015-06-19T23:14:51.823-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Racket v6.2") (post-content "Racket version 6.2 is now available from " (a ((href "http://racket-lang.org/")) "http://racket-lang.org/") (br) "\n" (br) "\nWith this release we are taking a major step forward to get our user community even more involved than in the past. Over the past six months, we have re-organized the Racket code base into a small core code repo and many other package repos, all found on GitHub. If you have time and if you wish to get involved, please take a look at the GitHub repos and find your favorite places to learn, fix, and enhance our world." (br) "\n" (br) "\nThe core repo is at " (a ((href "https://github.com/plt/racket")) "https://github.com/plt/racket") ", and the package repos are listed at " (a ((href "https://github.com/racket/")) "https://github.com/racket/") "." (br) "\n" (br) "\n" (a ((href "https://github.com/plt/racket")) "core repo") (br) "\n" (ul "\n" (li "The package manager supports a direct references to Git repositories via \"git://[...]\", \"http://[...].git\", and \"https://[...].git\" URLs. (Previously, only references to GitHub were supported.)") "\n" (li "A " (tt "--clone") " option for " (tt "raco pkg install") " or " (tt "raco pkg update") " facilitates Git-based package development. If a package X has a Git repository source, installing and updating the package pulls from the repository in a read-only mode. Using " (tt "raco pkg update --clone X") " switches the local installation to a repository checkout that is suitable for modifying the package implementation, issuing pull requests, pushing changes, and so on." (br) "\nUsing " (tt "raco pkg update --lookup X") " switches the package back to the default installation mode.") "\n") "\n" (a ((href "https://github.com/racket/drracket")) "drracket") " " (br) "\n" (ul "\n" (li "Its on-line check syntax works with graphical content.") "\n" (li "Increased availability of DrRacket's blueboxes, including method and constructor information.") "\n" (li "The \"Open Require Path\" menu item supports \"..\" in relative pathnames.") "\n") "\n" (a ((href "https://github.com/racket/data")) "data") " " (br) "\n" (ul "\n" (li "Added " (tt "data/enumerate") ", a library that supports efficient enumeration of data structures") "\n") "\n" (a ((href "https://github.com/racket/redex")) "redex") " " (br) "\n" (ul "\n" (li "Its " (tt "redex-check") " facility uses data (in addition to random) enumeration to try to find counter-examples.") "\n" (li "Its " (tt "generate-term") " function accepts additional arguments to return the \"i\"-th member of a pattern using " (tt "data/enumerate") " (meaning it efficiently supports very large values of \"i\").") "\n" (li "The examples collection includes Launchbury's 1993 big-step lazy semantics.") "\n") "\n" (a ((href "https://github.com/racket/htdp")) "htdp") " " (br) "\n" (ul "\n" (li (tt "2htdp/image") "'s polygon may be built out of bezier curves instead of just straight lines (see the docs for " (tt "pulled-point") ").") "\n" (li (tt "2htdp/abstraction") " is a teachpack for instructors and students who wish to use " (tt "for/*") " loops, " (tt "match") ", " (tt "define-type") " and " (tt "type-cases") " in ISL and ISL+.") "\n" (li (tt "2htdp/universe") " programs can be exported using DrRacket's executable creation mechanism and they behave properly when run independently.") "\n") "\n" (a ((href "https://github.com/racket/typed-racket")) "typed-racket  ") (br) "\n" (ul "\n" (li "Typed Racket in DrRacket displays tooltips that show the types of expressions. Tooltips are also displayed for type errors.") "\n" (li "Typed Racket loads generated contracts only when needed. This reduces memory use and startup time for Typed Racket programs.") "\n" (li "Typed Racket has improved support for prefab structures, future semaphores, and async channels.") "\n" (li "Typed Racket understands when two different variables refer to the same thing, and updates types accordingly. This particularly improves the type checking of macros such as " (tt "match") ".") "\n") "\n" (br) "\nFeedback Welcome") (link ((href "http://blog.racket-lang.org/feeds/1305912042779051989/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=1305912042779051989") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1305912042779051989") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1305912042779051989") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2015/06/racket-v62.html") (rel "alternate") (title "Racket v6.2") (type "text/html"))) (author (name "Ryan Culpepper") (uri "https://www.blogger.com/profile/04275692281825651783") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1210073682735379495") (published "2015-05-03T08:30:00.001-04:00") (updated "2015-05-04T08:25:37.939-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "rosetta"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "hacking"))) (title ((type "text")) "King of the Hill on Rosetta Code") (post-content (h1 ((id "racket-is-king-of-the-hill-on-rosetta-code")) "Racket is " (em ldquo "King of the Hill" rdquo) " on Rosetta Code") (p (strong "This announcement is a follow up to " (a ((href "http://blog.racket-lang.org/2014/11/800.html") (title "800! Racket blog post")) ldquo "800!" rdquo) ".") (br) "\nIn it I said we" rsquo "d " (em "\"[S]ee you at 1000!\"") "; but you" rsquo "ll understand why we stopped at this milestone." (br) "\n" (small "Please read that article if you need an introduction to Rosetta Code, and the efforts being made to implement Racket tasks there, and more detail on how you can help. It is more instructive and less braggart than this post.") (br) "\n") (p "On " (a ((href "http://www.rosettacode.org") (title "Rosetta Code")) "Rosetta Code (RC)") ", early in the morning on April 29" (sup "th") ", " (a ((href "http://www.rosettacode.org/wiki/Category:Tcl#mw-pages") (title "Tcl Page, including task count")) "Racket") " drew level with " (a ((href "http://www.rosettacode.org/wiki/Category:Racket#mw-pages") (title "Racket Page, including task count")) "Tcl") " in the number of tasks that had been implemented for it. Shortly after that we could announce that:" (br) "\n") (center (b "Racket has the Most Tasks Implemented in Any Language on Rosetta Code!")) (br) "\n" (p "Before I go into too much detail, it must be said that this is another amazing achievement. I, and I" rsquo "m sure the rest of the Racket community, want to thank and congratulate everyone who has contributed to this effort.") (h2 ((id "how-did-this-happen")) "How Did This Happen?") (p "On the front page of RC" rsquo "s site, it states its goal as:") (blockquote (q ".. to present solutions to the same task in as many different languages as possible, to demonstrate how languages are similar and different, and to aid a person with a grounding in one approach to a problem in learning another.")) (p "As well as achieving these comparative goals, implementing tasks also provides a useful library of tools, applications and examples for Racket users themselves. Therefore, doing so is a laudable activity in its own right. The persistent effort and progress have been made by Racketeers on RC, both before and since the " (a ((href "http://blog.racket-lang.org/2014/11/800.html") (title "800! Racket blog post")) ldquo "800!" rdquo) " tasks post has been (mostly) performed in that spirit. And that should be plenty enough incentive for " (em "you") " to do so, too.") (p "But I admit, there is a competitive element that creeps in (affecting some more than others). After having passed the 800 task mark" hellip " after spending so much time in second place" hellip " to get past the current leader, Tcl" hellip " to stay ahead of Python" (sup (a ((href "#g16398-footnote-1-definition") (name "g16398-footnote-1-return")) "1")) hellip " these, too, provide plenty of motivation to implement tasks. And if winning isn" rsquo "t important, why, then, do we keep score" (a ((href "http://www.rosettacode.org/wiki/Category:Racket#mw-pages") (title "Racket Page, including task count")) "?")) (p "And in " (em "that") " spirit, early in the morning on April 29" (sup "th") ", I was busily cherry-picking" (sup (a ((href "#g16398-footnote-2-definition") (name "g16398-footnote-2-return")) "2")) " tasks on Rosetta Code to help close the gap with Tcl; when I thought I would take a quick check on " (a ((href "http://www.rosettacode.org/wiki/Category:Tcl#mw-pages") (title "Tcl Page, including task count")) "Tcl" rsquo "s") " and " (a ((href "http://www.rosettacode.org/wiki/Category:Racket#mw-pages") (title "Racket Page, including task count")) "Racket" rsquo "s") " task counts" (sup (a ((href "#g16398-footnote-3-definition") (name "g16398-footnote-3-return")) "3")) ". From what I could see, both had a task count of 845! Racket had drawn level with, Tcl as the " (em (q (u "Joint") " Most Popular Programming Language")) " on RC.") (p "I got the independent verification of this from the " (a ((href "http://racket-lang.org/irc-chat.html") (title "#racket IRC channel")) "#racket IRC Channel") (sup (a ((href "#g16398-footnote-4-definition") (name "g16398-footnote-4-return")) "4")) ". It was true! But Racket was " (em "only joint first.") " This point was not lost on the denizens of IRC (" (tt "zedoary") " being one); who posted two more tasks in very quick succession, bringing Racket up to 847 " mdash " two clear of the previous leader!") (h2 ((id "how-does-this-help-racket")) "How does this Help Racket?") (h3 ((id "plenty-of-examples")) "Plenty of Examples") (p "Look back at the intentions of Rosetta Code itself. It is expected that users of other languages can come and compare what they know with what Racket provides. Strictly speaking, of course, in a lot of cases they won" rsquo "t be able to compare since the other language won" rsquo "t be represented whereas Racket will.") (p "There is also, now, a large collection of Racket examples, which Racketeers themselves can use to improve their understanding of Racket. Strangely, this is not actually one of the stated objectives of RC; it is a welcome side-effect of the work.") (h3 ((id "a-tool-for-advocacy")) "A Tool for Advocacy") (p "Advocates of Racket can use this position on Rosetta Code to show that Racket is as, if not more, capable than any language. Especially for general purpose computing.") (p ldquo "Racket is Number One on Rosetta Code" rdquo " isn" rsquo "t a bad place to start with, I guess.") (p "Additionally, I would like to point out that whatever any of the other languages (or tasks) seem to throw at it, there is something in Racket that allows it to take it in its stride. Sometimes the implementations have had high line counts" (sup (a ((href "#g16398-footnote-5-definition") (name "g16398-footnote-5-return")) "5")) "; but they rarely, if ever, seem contrived.") (p "If you need to provide reasons for tasks not being implemented in Racket, here are a few you can use:") (ul (li (em "Nobody has implemented them " ldquo "yet" rdquo ":") " let it be known that we" rsquo "ve done the best  part of 850 tasks, and there are only so many hours in the day.") "\n" (li (em "Someone has written an FFI for Tcl to an obscure library:") " The task for Tcl  has then simply been to load the FFI. The task for Racket is either to a) implement the library, which is much more effort than Tcl put in or b) to produce FFI bindings itself, which after the first time doesn" rsquo "t bring much to the party. The same holds true for tasks written " (em "for") " languages which are basically DSLs, showing off how they work in domain for which they are specific.") "\n" (li (em "The task is " (a ((href "http://rosettacode.org/wiki/Transportation_problem") (title "Transportation Problem")) "written and documented entirely in Russian") ":") " This makes  translating it an " ldquo "exercise." rdquo) "\n") (h2 ((id "is-it-time-to-rest-on-our-laurels")) "Is it Time to Rest on our Laurels?") (p "That was a rhetorical question." (br) "\nPlease ignore it.") (p "There are many reasons to continue to work on Rosetta Code.") (h3 ((id "we-havent-finished")) "We Haven" rsquo "t Finished") (h4 ((id "implement-some-outstanding-tasks")) "Implement Some Outstanding Tasks!") (p "There are 922 tasks on Rosetta Code. 849 are implemented in Racket (more have been added as we speak)! Even excluding the impossible and Russian tasks, that" rsquo "s still many more tasks to implement.") (h4 ((id "improve-existing-tasks")) "Improve Existing Tasks!") (p "Some tasks are old, and lack style. Some may even be re-branded Scheme tasks. Anyone can edit these tasks. Add style to them. Tasks can then not only be an example of how to use the syntax and features of Racket, but also exemplars of well-written code.") (h4 ((id "propose-new-tasks")) "Propose New Tasks!") (p "There are things that Racket and other Lisps do well that haven" rsquo "t been illustrated on RC. How about the fancier macro facilities that Racket provides?") (p "I" rsquo "m sure you can think of something. Might you suggest something involving " (em "anaphoric macros") "?") (p "Oh, and if you " (em "do") " suggest something, maybe you can implement it, too!") (h3 ((id "they-havent-finished")) "They Haven" rsquo "t Finished") (h4 ((id "new-tasks-are-being-invented")) "New Tasks are Being Invented!") (p "Tasks are being added to Rosetta Code constantly. Keep an eye out, some of these are really quite interesting.") (h4 ((id "tasks-are-being-implemented")) "Tasks are Being Implemented!") (p "Tcl and Python (and maybe others in the future) will want what we have earned here, and they are going to continue to propose and implement tasks. " (em ldquo "King of the Hill" rdquo) " is a precarious place. The more clear blue water between us and them" hellip " Just do it!" hellip " Buy glucose sports drinks" hellip) (p "Maybe I " (em "am") " getting too competitive.") (h2 ((id "finally")) "Finally") (p "Once again, many thanks to the people who have contributed to Racket on Rosetta Code. Including those who have answered questions on the mailing list or IRC. Your help has been invaluable even if the questions made you wonder " ldquo "why on earth does he or she want to do " (em "that?") rdquo) (p "Finally, but certainly not least: Thanks to the folk at Rosetta Code. They" rsquo "ve provided a site and experience which have been instructive, educational and fun; and without whom none of this would have been possible.") (hr) (div ((class "footnotes")) (ol (li ((class "footnote-definition") (id "g16398-footnote-1-definition")) (p "Python, is also doing magnificently well, to be sure. It even had the  audacity to draw level with Racket according to the FUPPLR a couple of times." nbsp (a ((href "#g16398-footnote-1-return")) "â©"))) "\n" (li ((class "footnote-definition") (id "g16398-footnote-2-definition")) (p "A good way to start on Rosetta Code is to find tasks that are  " (em "easy") " to implement. In order to find " (em "easy") " tasks you will need to browse the  unimplemented tasks (and maybe some implemented ones, too) and decide what  you could either implement and/or translate without breaking too much of a  sweat. In the process you will also develop a sense of what tasks are out  there ready to be implemented. A good example of an " (em "easy") " task would have been  " (a ((href "http://www.rosettacode.org/wiki/Pentagram")) "Pentagram") "." nbsp (a ((href "#g16398-footnote-2-return")) "â©"))) "\n" (li ((class "footnote-definition") (id "g16398-footnote-3-definition")) (p "There is a " (a ((href "http://timb.net/popular-languages.html")) "Frequently Updated Popular Programming Languages  Report") ", which I refer to but recently  it has been miscounting tasks, and needs a bit of a look at." nbsp (a ((href "#g16398-footnote-3-return")) "â©"))) "\n" (li ((class "footnote-definition") (id "g16398-footnote-4-definition")) (p "The " (tt "#racket") " IRC channel is a fantastic community if you need support  with your Racket issues" nbsp (a ((href "#g16398-footnote-4-return")) "â©"))) "\n" (li ((class "footnote-definition") (id "g16398-footnote-5-definition")) (p "Remember that Rosetta Code is not a " (em "Golf") " site. If it were, J" rsquo "s weird  20-character-strings-that-do-anything (if only you could remember what they do  30 seconds after you" rsquo "ve written them) would win hands down. Keep to the " (a ((href "http://www.ccs.neu.edu/home/matthias/Style/style/")) "Style  Guide") " as best you can. And  since RC is a wiki, if you" rsquo "re not perfect, others can improve the style of your  code." nbsp (a ((href "#g16398-footnote-5-return")) "â©"))) "\n"))) (link ((href "http://blog.racket-lang.org/feeds/1210073682735379495/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=1210073682735379495") (rel "replies") (title "2 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1210073682735379495") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1210073682735379495") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2015/05/king-of-hill-on-rosetta-code.html") (rel "alternate") (title "King of the Hill on Rosetta Code") (type "text/html"))) (author (name "Tim Brown") (uri "https://plus.google.com/104522910766067522260") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh4.googleusercontent.com/-rPRX_nbJ5Pk/AAAAAAAAAAI/AAAAAAAAAAA/EM29gjRWX9k/s32-c/photo.jpg") (width "32")))) (thr:total "2")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-9102221685784994530") (published "2015-04-20T13:44:00.000-04:00") (updated "2015-04-20T13:44:57.994-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Scheme Workshop 2015") (post-content "Call For Papers:" (br) "\n" (br) "\nScheme and Functional Programming Workshop 2015" (br) "\nVancouver, British Columbia, Canada" (br) "\n(Co-located with ICFP 2015)" (br) "\n" (a ((href "http://andykeep.com/SchemeWorkshop2015/")) "http://andykeep.com/SchemeWorkshop2015/") (br) "\n" (br) "\nSubmissions related to Scheme, Racket, Clojure, and functional programming are welcome and encouraged. Topics of interest include but are not limited to:" (br) "\n" (ul "\n" (li "Program-development environments, debugging, testing") "\n" (li "Implementation (interpreters, compilers, tools, benchmarks, etc.)") "\n" (li "Syntax, macros, hygiene") "\n" (li "Distributed computing, concurrency, parallelism") "\n" (li "Interoperability with other languages, FFIs") "\n" (li "Continuations, modules, object systems, types") "\n" (li "Theory, formal semantics, correctness") "\n" (li "History, evolution and standardization of Scheme") "\n" (li "Applications, experience and industrial uses of Scheme") "\n" (li "Education") "\n" (li "Scheme pearls (elegant, instructive uses of Scheme)") "\n") "\nWe also welcome submissions related to dynamic or multiparadigmatic languages and programming techniques." (br) "\n" (br) "\n" (br) "\n" (i "Important Dates:") (br) "\nMay 22nd, 2015 - Paper deadline" (br) "\nJune 26th, 2015 - Author notification" (br) "\nJuly 19th, 2015 - Camera-ready deadline" (br) "\nSeptember 4th, 2015 - Workshop" (br) "\n" (br) "\nSubmissions must be in ACM proceedings format, no smaller than 9-point type (10-point type preferred). Microsoft Word and LaTeX templates for this format are available at: " (a ((href "http://www.acm.org/sigs/sigplan/authorInformation.htm")) "http://www.acm.org/sigs/sigplan/authorInformation.htm") (br) "\n" (br) "\nSubmissions should be in PDF and printable on US Letter." (br) "\n" (br) "\nTo encourage authors to submit their best work, this year we are encouraging shorter papers (around 6 pages, excluding references). This is to allow authors to submit longer, revised versions of their papers to archival conferences or journals. Longer papers (10--12 pages) are also acceptable, if the extra space is needed. There is no maximum length limit on submissions, but good submissions will likely be in the range of 6 to 12 pages." (br) "\n" (br) "\nMore information available at: " (a ((href "http://andykeep.com/SchemeWorkshop2015/")) "http://andykeep.com/SchemeWorkshop2015/") (br) "\n" (br) "\n" (i "Organizers:") (br) "\nAndy Keep, Cisco Systems Inc. (General Chair)" (br) "\nRyan Culpepper, Northeastern University (Program Chair)" (br) "\n" (br) "\n(Apologies for duplications from cross-posting.)" (br) "\n") (link ((href "http://blog.racket-lang.org/feeds/9102221685784994530/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=9102221685784994530") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/9102221685784994530") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/9102221685784994530") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2015/04/scheme-workshop-2015.html") (rel "alternate") (title "Scheme Workshop 2015") (type "text/html"))) (author (name "Ryan Culpepper") (uri "https://www.blogger.com/profile/04275692281825651783") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4691382008530336512") (published "2014-12-10T12:58:00.000-05:00") (updated "2014-12-10T12:58:50.858-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "The Racket package system and Planet") (post-content (p "We have recently moved the majority of Racket's code base into packages and repositories separate from the main core repository. This has given the Racket package system another cycle of attention. Whenever this happens, there are often questions and confusion about how to solve various distribution problems with the package system. A natural point of comparison is the older Planet system provided by Racket that appears to solve similar problems. In this blog post, I attempt to explain the purpose of the package system and its relation to Planet.") (br) "\n" (p "The package system and Planet do not solve the same problem and don't exist for the same reason.") (br) "\n" (p "Planet is:") (ol "  " (li (p "A file distribution mechanism for source code.") "    " (br) "\n    " (p "Via " (code ".plt") " files that are installed into a particular place on your machine and then " (code "raco setup") "'d.") "  ") "\n  " (li (p "A mechanism for automatically downloading and installing source code just before it is needed by programs.") (br) "\n    " (p "Via the " (code "(planet ...)") " require form.") "  ") "\n  " (li (p "A centralized database of libraries") (br) "\n    " (p "Via the Planet website and its server " "&" " protocol which were undocumented and proprietary for the majority of Planet's life") "  ") "\n  " (li (p "A prescriptive model of how programs and libraries should be composed.") (br) "\n    " (p "Specifically the system of major/minor versions, tagging packages by author name, and embedding the names of packages in source code.") "  ") "\n") (br) "\n" (p "In contrast, the package system is:") (ol (li (p "A file distribution mechanism for source code, byte code, and documentation.") "  " (p "Via the " (code "raco pkg") " command.")) "\n") (br) "\n" (p "In this way, the package system is almost identical to an operating system package system like Debian's dpkg and apt systems. The problem is very finely tailored and becomes more flexible as a result (notice that we can now distribute byte code and documentation.) This design aspires to follow the admonition of " (a ((href "http://people.csail.mit.edu/jaffer/r3rs_2.html#SEC2")) "holy writ") ": \"Programming languages should be designed not by piling feature on top of feature, but by removing the weaknesses and restrictions that make additional features appear necessary.\"") (br) "\n" (p "Furthermore, it was intended to solve practical problems throughout the Racket ecosystem. In particular, one of the common complaints people had and have about Planet is the very long install times because of long builds. The package system allows this problem to be solved by distributing pre-built code.") (br) "\n" (p "Since the package system specifically does not address jobs 2, 3, or 4 of Planet, we have to ask, \"Do they need to be solved?\" and if so, \"How can we solve them on top of the package system, i.e. as a library in honor of the design principle?\".") (br) "\n" (p "In particular, 2 and 3 are very painful for people wanting to just use the file distribution mechanism of Planet. 2 causes unpredictability, because you don't know if running a program will start a long invocation of \"raco setup\", require Internet access, and start running un-vetted code. 3 requires you to share your code if you want to use the file distribution mechanism and is a single point of failure for doing installation.") (br) "\n" (p "By not mandating how to address 2 and 3 in the package system, we offer flexibility. Here is where the solutions to these jobs are now:") (br) "\n" (p "2. There is currently no way to get automatic installs of packages.  However, both DrRacket and xrepl offer advice about which packages you might want to install to compile and run the program. It would be natural to extend this advice to be automatic and patches are welcome.  Given the experiences of operating systems which merely make suggestions (" (code "nethack: command not found, provided by nethack-console") "), I personally feel like we are at the sweet spot.") (br) "\n" (p "3. The file distribution mechanism's flexible package sources combine with a very simple protocol for package catalogs (Take a URL, add" (code "/pkg/") ", add a string, get a " (code "read") "-able hash table) to look up packages you don't yet have. As a service, we run a few catalogs (one for each release, plus " (a ((href "http://pkgs.racket-lang.org")) "pkgs.r-l.o") "). But we expect that users with special needs (such as sensitive installations that need exactly certain tested and trusted versions, especially with proprietary software) will build their own catalogs on private Web sites.") (br) "\n" (p "Clearly, however, job 4 is where Planet and the package system differ the most.") (br) "\n" (p "With the package system, we follow the precedent of operating systems.  An OS package's job is to get files into the right spot. An OS package contains a binary and instructions to install it as " (code "/usr/bin/zsh") ". It is not typical in OSes to be able to install multiple packages (such as different \"versions\" of the \"same\" package) that both provide " (code "/usr/bin/zsh") ". When you're at a Unix prompt, you don't have to write " (code "zsh-5.0.5/usr/bin/zsh") ". It's possible that many consider this is a big problem with OSes and indeed we do observe that it is fairly common to provide packages that provide binaries and libraries with embedded names such as how on my machine I have " (code "python2.6") ", " (code "python2.7") ", and " (code "python3.2") " all in my " (code "$PATH") ". It is important to realize, however, that the " (code "deb") " format and the " (code "apt") " tool didn't need to change to support this change or future changes in perspective in how to compose code.") (br) "\n" (p "I hope this analogy helps understand the Racket package system. In the package system, a package doesn't install \"binaries\", \"man pages\", and \"init scripts\", but installs similar things, such as \"module paths\", \"documentation manuals\", and \"" (code "raco") " commands\". Each of these has a notion of conflict: can't have two " (code "zsh") "s or two " (code "racket/list") "s; can't have two " (code "zsh.1") " pages or two docs named " (code "doc") "; can't have two modules trying to provide " (code "raco neo-tokyo-is-about-to-explode") ". If you find a random " (code ".deb") " on the Internet, can you predict what binaries it will contain from its name?  No. The same goes for Racket packages. However, if you are egregiously weird, then people probably won't want to install your packages, just like for random " (code "deb") "s.") (br) "\n" (p "However, clearly rules are helpful. In the world of operating systems, you know that basically all packages distributed by Debian can be installed at the same time, except for \"virtual packages\" that do stuff like selecting whether " (code "postfix") " or " (code "sendmail") " should be responsible for the " (code "sendmail") " command. These rules are not enforced through technology, though. Instead, the Debian maintainers have a social process that enforces them, with information being provided by technology (such as regression systems that identify unintended conflicts.) The catalog server that the Racket team provides helps facilitate a similar process with the concentric rings (all ring " "<" "=1 packages can be installed at once and ring 1" "<" " packages can do anything.)") (br) "\n" (p "Non-conflicting sets of packages is the simplest rule to define and enforce. Other rules about backwards compatibility are much more complicated to define and enforce. I do not believe there is much precedent in the world of OSes, although we can see a little bit of what they do through things like " (code "libgtk") ", " (code "libgtk2") ", and " (code "libgtk3") ", where generally code written for one " (code "libgtk2") " package is compatible with all " (code "libgtk2") " packages made in the future, but " (code "libgtk3") " is effectively a totally different package and introduces totally separate binaries like " (code "gtk3-config") ".") (br) "\n" (p "The most that the Racket team attempts to do here is to say, \"Here are the rules we will follow and we think you should follow them too.\"  Specifically, that we will maintain backwards compatibility or make a new package.  We can't and won't enforce this, nor do we always live up to it with our own work (but we feel really bad about it when we do.)") (br) "\n" (p "Although my main goal of this section has been to explain my solution to (4), a great thing about the package system is that it is not binding at all. You can decide to follow the same rules as Planet. It is easy to do so:") (br) "\n" (ul "  " (li "Always name your packages " (code "$AUTHOR-$PACKAGE-$MAJOR")) "\n  " (li "Always provide modules from only the collection, " (code "$AUTHOR-$PACKAGE-$MAJOR")) "\n  " (li "Maintain backwards compatibility within releases of " (code "$AUTHOR-$PACKAGE-$MAJOR")) "\n  " (li "Update the " (code "'version") " metadata in the package " (code "info.rkt") " to reflect the " (code "$MINOR") " version.") "\n") (br) "\n" (p "And, boom!, you've recreated the rules of Planet to a T except for two things: (a) you'll still need to put a dependency on " (code "$AUTHOR-$PACKAGE-$MAJOR") " on the outside of code in a package " (code "info.rkt") " file rather than just inside files and (b) you can't use " (code "$AUTHOR-$PACKAGE") " to refer to \"whatever the current " (code "$MAJOR") "\" is.") (br) "\n" (p "The first compromise of adding something to the " (code "info.rkt") " is fairly modest, as it requires O(1) line modifications.") (br) "\n" (p "The second compromise is more severe, although actually you could just maintain such a package and deal with the breakage that occurs when you try to upgrade. Such breakage, however, was present in Planet too, as when a package was installed based on " (code "$AUTHOR-$PACKAGE") " only the local machine would cache the version used, so if you took the requiring module to another machine, it would download a new version and, potentially, have a backwards incompatibility problem. Using the package system in the most naive way (i.e. installing the " (code "$AUTHOR-$PACKAGE") " at some point and programming to that) would work exactly the same as Planet, except that the package system was designed to be able to port installations from one machine to another with " (code "raco pkg migrate") ".") (br) "\n" (p "I hope this blog post has helped explain the package system and shown that it does not prevent you from doing anything that Planet let you do, it only allows you to do more.")) (link ((href "http://blog.racket-lang.org/feeds/4691382008530336512/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=4691382008530336512") (rel "replies") (title "2 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/4691382008530336512") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/4691382008530336512") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2014/12/the-racket-package-system-and-planet.html") (rel "alternate") (title "The Racket package system and Planet") (type "text/html"))) (author (name "Jay McCarthy") (uri "https://plus.google.com/101670206687664104937") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh3.googleusercontent.com/-13KUDv8LhZw/AAAAAAAAAAI/AAAAAAAAAAA/7MdiB5POU5k/s32-c/photo.jpg") (width "32")))) (thr:total "2")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3825278690456396369") (published "2014-11-23T10:40:00.000-05:00") (updated "2014-11-23T10:40:42.211-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "800!") (post-content "  " (h1 ((id "800-racket-tasks-on-rosetta-code")) "800 " (br) "\n   " (small "(Racket Tasks On Rosetta Code)")) "  " (p "Since (and even before) Asumu Takikawa" rsquo "s post " (a ((href "http://blog.racket-lang.org/2013/03/200_25.html")) ldquo "200!" rdquo) " at the beginning of March 2013, folk have been beavering away, implementing tasks on " (a ((href "http://rosettacode.org")) "Rosetta Code") ". And on November 15" (sup "th") " 2014:" (br) "\n   " (br) " " (strong "800 tasks have now been Implemented" (sup (a ((href "#g76184-footnote-1-definition") (name "g76184-footnote-1-return")) "1")) " in Racket on the Rosetta Code website!")) "  " (p "Before I go any further it must be said that, without a doubtâ¦ this is awesome! This achievement represents a lot of work, and a lot of code. And everyone who has participated should be thanked and congratulated for getting this far.") "  " (p "So thank you. And " (em "well done!") (br) "\n" (a ((name "more"))) (br) "\n") "  " (h2 ((id "what-is-rosetta-code")) "What is Rosetta Code?") "  " (p "Rosetta Code (RC) describes itself as:") "  " (blockquote "   " (p ".. " ldquo "a " (a ((href "http://en.wikipedia.org/wiki/Chrestomathy")) "programming chrestomathy") " site. The idea is to  present solutions to the same task in as many different languages as possible, to demonstrate how  languages are similar and different, and to aid a person with a grounding in one approach to a  problem in learning another. Rosetta Code currently has 758 tasks, 134 draft tasks, and is aware of  560 languages, though we do not (and cannot) have solutions to every task in every language." rdquo (sup (a ((href "#g76184-footnote-2-definition") (name "g76184-footnote-2-return")) "2")))) "  " (p "Of these tasks, 800 have been implemented in Racketâ¦ some tasks, like " (a ((href "http://rosettacode.org/wiki/Hello_world/Text")) "Hello World/Text") ", have been implemented in hundreds of languages. Some, however, like " (a ((href "rosettacode.org/wiki/Time-based_One-time_Password_Algorithm")) "Time-based One-time Password Algorithm") ", have only been implemented in 3 (including Racket).") "  " (p "If you haven" rsquo "t already, I suggest you take a quick look about the site to get a feel of what that means in practice.") "  " (p (strong "WARNING:") " Rosetta Code is a wiki. Like any wiki it will steal your time from you as you browse tasks, algorithms, languages and the occasional link to Wikipedia. Don" rsquo "t say I didn" rsquo "t warn you.") "  " (h2 ((id "what-can-you-do-with-rosetta-code")) "What Can You Do With Rosetta Code?") "  " (h3 ((id "learn-from-it")) "Learn From It") "  " (p "Rosetta Code is a valuable resource with plenty of material to absorb and ideas to be had from. If you" rsquo "re new to Racket, there are tasks like " (a ((href "http://rosettacode.org/wiki/Loops/For")) "Loops/For") " which will get you on your way with fundamental programming tasks.") "  " (p "If you want something juicier there are other tasks (like " (a ((href "http://rosettacode.org/wiki/Nonogram_solver")) "Nonogram solver") " which runs to over 400 lines of Racket) for you to pick over.") "  " (p "And there" rsquo "s everything in between.") "  " (h3 ((id "write-code")) "Write Code!") "  " (p "Each task gives you a chance to think, " ldquo "Is this how I would do this?" rdquo) "  " (p "Even if I don" rsquo "t submit something, I find it" rsquo "s fun to write some code around the task. In fact, I don" rsquo "t even have to type code into a REPL, the thought exercise is often fun enough!") "  " (p "Some tasks, like (" (a ((href "http://rosettacode.org/wiki/Chess_player")) ldquo "Chess Player" rdquo) "), are shall we say, very challenging. But don" rsquo "t let even that put you off thinking of, tinkering around or coding a solution to them.") "  " (p (strong "If there isn" rsquo "t a Racket implementation for a task you like the looks of, have a go.") (br) "\n   " (br) " Someone might have a better idea of how to do it in Racket later. But if there isn" rsquo "t an implementation now " mdash " change that now!") "  " (p "Remember that others will be reading your code to understand Racket all the better. So please try to adhere to the " (a ((href "http://docs.racket-lang.org/style/index.html")) "Racket Style Guide") " as best you can" (sup (a ((href "#g76184-footnote-3-definition") (name "g76184-footnote-3-return")) "3")) ". Again, don" rsquo "t worry about getting that perfect. Like anything, learning Racket style takes practice, and nobody expects perfection. And the experienced contributors/documentors are always at hand to " (a ((href "http://permalink.gmane.org/gmane.comp.lang.racket.user/18248")) "help correct style") ".") "  " (p (em "Hints:")) "  " (ul "   " (li "I always have a " (a ((href "https://en.wikipedia.org/wiki/Help:Cheatsheet")) "Wikimedia Cheatsheet") " to hand.  I can never remember its markdown syntax (which unfortunately doesn" rsquo "t really support " (code "<" "code/" ">") ",  either)") "\n   " (li "Pick whatever task you wantâ¦ but it would be good to clear all the " ldquo "Complete Tasks" rdquo " (as opposed to  " ldquo "Draft Tasks" rdquo ") if you have a choice.") "\n   " (li "Don" rsquo "t add code until it" rsquo "s running and producing the output you expect. This isn" rsquo "t Project Euler,  you don" rsquo "t have to guess the answer in most cases " mdash " it" rsquo "s likely someone has some sample output  to compare to." (sup (a ((href "#g76184-footnote-4-definition") (name "g76184-footnote-4-return")) "4"))) "\n   " (li "If you can" rsquo "t get your head around the algorithm in the task description then try to translate  another language into Racket. You" rsquo "ll learn Racket, you" rsquo "ll learn the other language, and in working  it through for yourself you" rsquo "ll also see how the algorithm takes shape and works.") "\n   " (li "My workflow for posting a new solution is this: Once I have something to submit, I add a " ldquo "Stub" rdquo "  Racket implementation. I edit the whole Task page (because that is all that is available to edit at  that point), find whatever is after Racket alphabetically, and insert boilerplate code. I check this  template code as a " ldquo "minor edit" rdquo " described as " ldquo "Racket stub added " mdash " implementation later" rdquo ". This  then allows is for me to be able to edit the Racket section in isolation and keeps the rest of the  task (everyone else" rsquo "s hard work) safe from any, er, silliness.")) "  " (pre ((class "brush: racket")) (code "{{header|Racket}}\n" "<" "lang racket" ">" "\n" "<" "/lang racket" ">" "\n{{out}}\n" "<" "pre" ">" "\n" "<" "/pre" ">")) "  " (ul "   " (li "I have started to make it my habit (especially when showcasing one or two functions) to use  " (code "#lang racket/base") " and " (code "require") "ing the salient individual functions.") "\n   " (li "It is often not appropriate to fully document the functionality of Racket functions in the RC  task implementation. You can, however, point to the canonical documentation on the Racket website.  So I also include a link to " (code "http://docs.racket-lang.org/reference/...") " when I need to.") "\n   " (li "The RC administrators have switched off image uploading (or I, at least, cannot find out how).  Even though Racket can produce images as results, think hard about whether you want the hassle  of trying to present images to the reader. If you find out a method that works for you " (em "please  tell me") ", I" rsquo "d love to know.")) "  " (p "   " (small "I suppose you could also extend all of the above to coding in another language " mdash " if you really have to.")) "  " (h3 ((id "improve-whats-already-there")) "Improve What" rsquo "s Already There") "  " (p "Rosetta Code is a wiki." (br) "\n   " (br) " It is open to anyone to edit." (br) "\n   " (br) " Don" rsquo "t be afraid to.") "  " (p "If you see something that could be implemented, styled or documented better " mdash " work to improve it.") "  " (p "Once you have your improved entry together, show it to the author of the original post. Besides being courteous, he or she might have an opinion on what else you might do. Often, there is something bugging them, and you are scratching an itch of theirs!") "  " (p "I have never had anyone react badly to a change request. Everyone appreciates that you have made an effort to produce your change (and that you" rsquo "re not just standing in the aisles complaining that it doesn" rsquo "t look right).") "  " (h3 ((id "teach-through-it")) "Teach Through It") "  " (p "If there is an aspect of Racket, algorithm or other " ldquo "CS task" rdquo " (in the broadest sense) that you want to share: see to it that it is adequately illustrated on Rosetta Code. If it is not, then create a task to demonstrate it. Not only will you show how something is done properly (i.e. in Racket), but you will also be inviting others to implement the task in their own favourite languages.") "  " (h2 ((id "the-competitiong76184-footnote-5-definitiong76184-footnote-5-return5")) "The Competition" (sup (a ((href "#g76184-footnote-5-definition") (name "g76184-footnote-5-return")) "5"))) "  " (p "Back at " (em "200") ", Racket was the 54" (sup "th") " most popular language. But for some time now, it has been sitting at #2 in the popularity" (sup (a ((href "#g76184-footnote-1-definition") (name "g76184-footnote-1-return")) "1")) " ranking for quite some time now. For a while, it has been placed a long way behind TCL, and being hotly pursued by Python (never more than 10 tasks behind).") "  " (p "One of " (em "my") " motivators is that having seen Racket get to #2 " mdash " I don" rsquo "t want to see it any lower in the rankings. I" rsquo "m sure there" rsquo "s something in the Python lot that wants to overtake us! This healthy competition has kept both of the communities pushing ahead with implementing the tasks.") "  " (p "The " (a ((href "https://github.com/plt/racket/wiki/Intro-Projects")) (em "Intro Projects")) " page of the racket wiki  has " ldquo "Implement a Rosetta code task" rdquo " as a " ldquo "Small Project" rdquo ". I think of it as slightly more of a " ldquo "Recreational" rdquo " project (this at least justifies to myself the element of competition that has crept in.)") "  " (h3 ((id "the-rallying-call")) "The Rallying Call") "  " (p "or " (strong ldquo "What Specifically Would Help Racket on Rosetta Code?" rdquo)) "  " (p "RC is a good way to present Racket as a most general programming language. So as a tool for Racket advocacy, as well as for the purposes of RC, we need to:") "  " (ul "   " (li (strong "Implement more tasks in Racket to keep a high profile:") " 800 tasks, #2 in the popularity stakes.  This keeps Racket visible; and proves it capable of (almost) anything. I would " (em "so") " love to give TCL  a run for its money " mdash " so there" rsquo "s 41 tasks to go before we can even think of taking a breather!" (br) "\n    " (ul "     " (li "We have implemented 800 tasks in Racket. The quote above says there are 892 (758+134) tasks in total. That means that there are 92 more tasks to get to grips with."))) "\n   " (li (br) "\n    " (p (strong "Suggest new tasks:") " Especially tasks that will demonstrate the latest shiny feature of the latest  shiny versions of Racket!") "    " (p "Personally I can" rsquo "t believe that there are less than 900 things that you would want to do with a programming language. If you think of a task, add it. Even impossible tasks provoke thought and imagination " mdash " and interesting solutions!")) "\n   " (li (strong "Improve those tasks that have been implemented in Racket:") " We want to maintain a body of good,  useful code, to allow us to teach and demonstrate Racket. There are a number of reasons why existent  tasks need revisiting:" (br) "\n    " (ul "     " (li "Racket technology has moved on (and moves on) apace. What was unavailable and experimental even 18 months ago is now available and reliable. This new technology needs to be demonstrated.") "\n     " (li "Code that is even older is very " ldquo "schemey" rdquo " (I have in some cases simply copied the Scheme implementation and stuck a " (code "#lang racket") " tag on the front). Although compatible, Racket has moved quite a way on from Scheme.") "\n     " (li "Some implementors (not a million miles from where I" rsquo "m standing, for example), were not as " (em "au fait") " with the language and/or style guide as they might be now. It" rsquo "s a housekeeping job, I know, but giving the examples as consistent a style as possible will help satisfy this aspiration from the Racket Style Guide:")) "    " (blockquote "     " (p ldquo "Doing so will help us â¦ and our users, who use the open source code â¦ as an implicit guide to Racket programming." rdquo))) "\n   " (li (strong "Document tasks:") " see my hint about documentation and links above for what I now think is good  practice. If some code seems utterly heiroglyphic, see if it can be made clearer. Remember this is  Racket, not APL.") "\n   " (li "General tidying up never goes amiss.") "\n   " (li "RC is run by someone outside the Racket community. At the bottom of the " ldquo "Small Projects" rdquo " section  of the Racket wiki is a suggestion to collect the RC examples into something " ldquo "owned" rdquo " by the Racket  community. I" rsquo "ve been thinking about thisâ¦ if anyone has suggestions, let me know. There are  limits to what we can put on RC (defined by the purpose of RC itself). It would be good to remove  those limits by implementing something along RC" rsquo "s lines oursleves.") "\n   " (li "Very specificallyâ¦ anyone with a joystick, drivers and some spare time - please could you do  " (a ((href "http://rosettacode.org/wiki/Joystick_position")) ldquo "Joystick Position" rdquo) ". The possession of a joystick  puts you in a position of " (em "great power") " with respect to that task. Exercise your responsibility.")) "  " (h2 ((id "and-finally")) "And Finallyâ¦") "  " (p "Well done everyone again! Keep up the good work. And see you at 1000!") "  " (hr) "  " (div ((class "footnotes")) "   " (ol "    " (li ((class "footnote-definition") (id "g76184-footnote-1-definition")) (br) "\n     " (p "You can track Racket (and everyone else" rsquo "s) progress on the  " (a ((href "http://timb.net/popular-languages.html")) "Popular Programming Languages") " report, which is updated  hourly or so." nbsp (a ((href "#g76184-footnote-1-return")) "â©"))) "\n    " (li ((class "footnote-definition") (id "g76184-footnote-2-definition")) (br) "\n     " (p (a ((href "http://rosettacode.org/wiki/Rosetta_Code")) "Rosetta Code" rsquo "s Front Page") nbsp (a ((href "#g76184-footnote-2-return")) "â©"))) "\n    " (li ((class "footnote-definition") (id "g76184-footnote-3-definition")) (br) "\n     " (p "The style guide is actually the chapter called " ldquo "How to Program Racket" rdquo " in the main Racket  documentation. One of the RC " ldquo "style" rdquo " rules is that code should be 80 characters wide. Personally,  I ignore that in favour of Racket" rsquo "s more generous 102. Sometimes someone on RC objects. Sometimes I  then care enough to put the required newlines in." nbsp (a ((href "#g76184-footnote-3-return")) "â©"))) "\n    " (li ((class "footnote-definition") (id "g76184-footnote-4-definition")) (br) "\n     " (p "Even if there are example results don" rsquo "t necessarily trust them. e.g. in  " (a ((href "http://rosettacode.org/wiki/The_ISAAC_Cipher")) "The ISAAC Cipher") ", the cypher engine isn" rsquo "t reset  between test runs in the Pascal implementation. That error is propagated through all other  implementations. Mine (Racket) conforms to show that I" rsquo "m doing the same thing as everyone else; but I  also do what I think to be a more correct test later." nbsp (a ((href "#g76184-footnote-4-return")) "â©"))) "\n    " (li ((class "footnote-definition") (id "g76184-footnote-5-definition")) (br) "\n     " (p "Hold on a moâ¦ this is meant to be a pedagogical exercise, not a competition" nbsp (a ((href "#g76184-footnote-5-return")) "â©")))))) (link ((href "http://blog.racket-lang.org/feeds/3825278690456396369/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=3825278690456396369") (rel "replies") (title "3 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/3825278690456396369") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/3825278690456396369") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2014/11/800.html") (rel "alternate") (title "800!") (type "text/html"))) (author (name "Tim Brown") (uri "https://plus.google.com/104522910766067522260") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh4.googleusercontent.com/-rPRX_nbJ5Pk/AAAAAAAAAAI/AAAAAAAAAAA/EM29gjRWX9k/s32-c/photo.jpg") (width "32")))) (thr:total "3")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7755228056466137213") (published "2014-11-04T10:43:00.000-05:00") (updated "2014-11-04T10:43:46.696-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Racket v6.1.1") (post-content "Racket version 6.1.1 is now available from " (a ((href "http://racket-lang.org/")) "http://racket-lang.org/") (br) "\n" (ul "\n" (li "The " (b "Mac OS X Yosemite") " compatibility problems are fixed. We bundled a patched Pango text-drawing library with Racket.") "\n" (li "The " (b "Windows") " [32-bit] releases fixes the window-update crashes. We bundled a patched Cairo drawing library with Racket.") "\n" (li (b "Typed Racket") " closes two safety holes in the exception system. The revised type system restricts " (tt "raise") " to send only instances of the " (tt "exn") " structure type and flat data to handlers. It also checks exception handlers properly. Note: Previously well-typed programs may fail to typecheck.") "\n" (li (b "Typed Racket's") " typed regions support casts and predicates.") "\n" (li (b "2htdp/image's") " notion of equality ignores an image's baseline.") "\n" (li "The " (b "package manager") " supports a binary library installation mode, which allows users to install packages without source or documentation. Use the " (tt "--binary-lib") " option with " (tt "raco pkg install") ".") "\n" (li "The new " (b "drracket-tool-lib") " package factors out parts of DrRacket's IDE so that they can be reused with other editors, such as Emacs.") "\n" (li "The " (b "compiler's") " use-before-defined analysis has been repaired for certain forms of nested " (tt "letrec") ", some " (tt "let") " forms, and some uses of " (tt "set!") " or " (tt "with-continuation-mark") ".") "\n" (li "The " (b "compiler") " performs additional bytecode optimizations. Thanks to Gustavo Massaccesi.") "\n" (li "The " (b "CML") " library comes with a new " (tt "replace-evt") " event constructor. Thanks to Jan DvoÅÃ¡k.") "\n" (li (b "Redex's") " benchmark suite comes with a description of the benchmark programs.") "\n" (li (b "Redex's") " metafunctions can be typeset using the \"large left brace\" notation for conditionals.") "\n" (li "The " (b "contract") " library comes with an improved " (tt "contract-stronger?") ". Its error messages note that the contract itself might be wrong.") "\n" (li "The " (b "GUI") " library is DPI-aware on Windows.") "\n" (li "The " (b "openssl") " library supports Server Name Indication for servers. Thanks to Jay Kominek.") "\n" (li "The " (b "syntax/parse") " library allows the definition of new pattern forms via pattern expanders, similar to match expanders. Thanks to Alex Knauth.") "\n" (li (b "OpenGL") " on Linux no longer depends on libgtkgl, and core profiles are supported (see " (tt "set-legacy?") ").") "\n" (li "The " (b "teaching languages'") " unit test framework supports " (tt "check-satisfied") ", a construct for checking whether a result satisfies a predicate, e.g.:" (br) "\n" (tt "(check-satisfied (sort l) sorted?)")) "\n") "\nFeedback Welcome") (link ((href "http://blog.racket-lang.org/feeds/7755228056466137213/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=7755228056466137213") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/7755228056466137213") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/7755228056466137213") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2014/11/racket-v611.html") (rel "alternate") (title "Racket v6.1.1") (type "text/html"))) (author (name "Ryan Culpepper") (uri "https://www.blogger.com/profile/04275692281825651783") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3176345994791081236") (published "2014-10-07T11:30:00.000-04:00") (updated "2014-10-07T11:30:02.069-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "PLT Redex Summer School, Call for Participation") (post-content "LOCATION: University of Utah, Salt Lake City" (br) "\nDATES: July 27 - July 31, 2015" (br) "\n" (a ((href "http://www.cs.utah.edu/~mflatt/plt-redex/")) "http://www.cs.utah.edu/~mflatt/plt-redex/") (br) "\n" (br) "\n" (br) "\nPLT Redex is a lightweight, embedded DSL for modeling programming" (br) "\nlanguages, their reduction semantics, and their type systems. It comes with" (br) "\nan IDE and a toolbox for exploring, testing, debugging, and type-setting" (br) "\nlanguage models. The PLT research group has successfully used Redex to" (br) "\nmodel and analyze a wide spectrum of published models." (br) "\n" (br) "\nThe summer school will introduce students to the underlying theory of" (br) "\nreduction semantics, programming in the Redex language, and using its" (br) "\ntool suite effectively. " nbsp "The course is intended for PhD students and" (br) "\nresearchers in programming languages. Enrollment is limited to 25" (br) "\nattendees." (br) "\n" (br) "\nWhile the workshop itself is free, attendees must pay for travel, room, and" (br) "\nboard. We expect room and board to be around $500, assuming an arrival in" (br) "\nthe evening of Sunday July 26 and leaving Friday July 31 or August 1." (br) "\nPartial financial support for PhD students is available." (br) "\n" (br) "\nTo register, send email to Matthew Flatt (mflatt@cs.utah.edu). If you" (br) "\nare a PhD student and requesting financial support, CC your advisor" (br) "\nand ask for a one-line confirmation email." (br) "\n" (br) "\nLiterature" (br) "\n" (br) "\n" nbsp " Matthias Felleisen, Robert Bruce Findler, Matthew Flatt." (br) "\n" nbsp " Semantics Engineering with PLT Redex. MIT Press, 2012." (br) "\n" (br) "\n" nbsp " Casey Klein, John Clements, Christos Dimoulas, Carl Eastlund," (br) "\n" nbsp " Matthias Felleisen, Matthew Flatt, Jay McCarthy, Jon Rafkind, Sam" (br) "\n" nbsp " Tobin-Hochstadt, Robert Bruce Findler. Run Your Research: On the" (br) "\n" nbsp " Effectiveness of Lightweight Mechanization. POPL 2012." (br) "\n" (br)) (link ((href "http://blog.racket-lang.org/feeds/3176345994791081236/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=3176345994791081236") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/3176345994791081236") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/3176345994791081236") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2014/10/plt-redex-summer-school-call-for.html") (rel "alternate") (title "PLT Redex Summer School, Call for Participation") (type "text/html"))) (author (name "Robby Findler") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-9182643764549091140") (published "2014-08-02T14:31:00.000-04:00") (updated "2014-08-02T14:31:10.335-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Racket v6.1") (post-content "PLT Design Inc. announces the release of Racket version 6.1 at " (br) "\n" (br) "\n" (a ((href "http://racket-lang.org/")) "http://racket-lang.org/") (br) "\n" (br) "\nThe " (b "major innovation") " concerns local recursive variable definitions. Instead of initializing variables with an " (tt "undefined") " value, Racket raises an exception when such a variable is used before its definition. (Thanks to Claire Alvis for adapting Dybvig's \"Fixing Letrec\" work.)" (br) "\n" (br) "\nSince programs are rarely intended to produce " (tt "#" "<" "undefined" ">") ", raising an exception provides early and improved feedback. Module-level variables have always triggered such an exception when used too early, and this change finally gives local bindings â including class fields â the same meaning." (br) "\n" (br) "\nThis change is backwards-incompatible with prior releases of Racket. Aside from exposing a few bugs, the change will mainly affect programs that include" (br) "\n" (br) "\n" (tt "(define undefined (letrec ([x x]) x))") (br) "\n" (br) "\nto obtain the " (tt "#" "<" "undefined" ">") " value. In its stead, Racket provides the same value via the " (tt "racket/undefined") " library (which was introduced in the previous release). Programmers are encouraged to use it in place of the pattern above to obtain the \"undefined\" value." (br) "\n" (br) "\nThe release also includes the following " (b "small changes") ":" (br) "\n" (ul "\n" (li (b "Plumbers") " generalize the flush-on-exit capability of primitive output ports to enable arbitrary flushing actions and to give programmers control over the timing of flushes (i.e., a composable " (tt "atexit") "). New functions include " (tt "current-plumber") ", " (tt "plumber-add-flush!") ", and " (tt "plumber-flush-all") "." (br) "\n") "\n" (li (b "Contracts") ": the contract system's random testing facility has been  strengthened so that it can easily find simple mistakes in contracted data structure implementations (e.g. an accidental reverse of a conditional in a heap invariant check)." (br) "\n") "\n" (li (b "Redex") ": the semantics of mis-match patterns (variables followed by " (tt "_!_") ") inside ellipses has changed in a backwards-incompatible way. This change simplifies the patterns' semantics and increases the usefulness of these patterns." (br) "\n") "\n" (li (b "Teaching languages") ": " (tt "check-random") " is an addition to the preferred  unit testing framework in the teaching languages. It enables the testing of students' functions that use random-number generation. (Thanks to David Van Horn (UMaryland) for proposing this idea.)" (br) "\n") "\n" (li "Upgraded and normalized versions of " (b "graphics libraries") " and dependencies (Pango, Cairo, GLib, etc.) that are bundled with Racket on Windows and Mac OS X. For example, FreeType support is consistently enabled." (br) "\n") "\n" (li (b "Typed Racket") ": its standard library includes contracted exports from the Racket standard library, such as the formatting combinators of " (tt "racket/format") ". It also supports Racket's asynchronous channels; see the " (tt "typed/racket/async-channel") " library." (br) "\n") "\n" (li (b "SSL") ": The " (tt "openssl") " library supports forward secrecy via DHE and ECDHE cipher suites (thanks to Edward Lee) and Server Name Indication (thanks to Jay Kominek)." (br) "\n") "\n" (li "The " (tt "mzlib/class100") " library has been " (b "removed") ". Use " (tt "racket/class") " instead." (br) "\n") "\n") "\n") (link ((href "http://blog.racket-lang.org/feeds/9182643764549091140/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=9182643764549091140") (rel "replies") (title "4 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/9182643764549091140") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/9182643764549091140") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2014/08/racket-v61.html") (rel "alternate") (title "Racket v6.1") (type "text/html"))) (author (name "Ryan Culpepper") (uri "https://www.blogger.com/profile/04275692281825651783") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "4")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2617154372568135916") (published "2014-07-26T18:34:00.001-04:00") (updated "2014-07-26T18:34:23.667-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Scheme Workshop 2014") (post-content (p "DEADLINE: 5 September 2014, (23:59 UTC-12)" (br) "\nWEBSITE: " (a ((href "http://homes.soic.indiana.edu/jhemann/scheme-14/")) "http://homes.soic.indiana.edu/jhemann/scheme-14/") (br) "\nLOCATION: Washington, DC (co-located with Clojure/conj)" (br) "\nDATE: 19 November 2014") (br) "\n" (p "The 2014 Scheme and Functional Programming Workshop is calling for" (br) "\nsubmissions.") (br) "\n" (p "Submissions related to Scheme and functional programming are welcome" (br) "\nand encouraged. Topics of interest include but are not limited to:") (br) "\n" (ul (li "Program-development environments, debugging, testing") "\n" (li "Implementation (interpreters, compilers, tools, benchmarks, etc) ") "\n" (li "Syntax, macros, and hygiene ") "\n" (li "Distributed computing, concurrency, parallelism ") "\n" (li "Interoperability with other languages, FFIs ") "\n" (li "Continuations, modules, object systems, types ") "\n" (li "Theory, formal semantics, correctness ") "\n" (li "History, evolution and standardization of Scheme ") "\n" (li "Applications, experience and industrial uses of Scheme ") "\n" (li "Education ") "\n" (li "Scheme pearls (elegant, instructive uses of Scheme) ") "\n") (br) "\nWe also welcome papers related to dynamic or multiparadigmatic" (br) "\nlanguages and programming techniques." (br) "\n" (br) "\n" (p "Full papers are due 5 September 2014." (br) "\nAuthors will be notified by 10 October 2014." (br) "\nCamera-ready versions are due 24 Oct 2014." (br) "\nAll deadlines are (23:59 UTC-12), \"Anywhere on Earth\".") (br) "\n" (p "For more information, please see:") (br) "\n" (a ((href "http://homes.soic.indiana.edu/jhemann/scheme-14/")) "http://homes.soic.indiana.edu/jhemann/scheme-14/") (br) "\n" (br) "\n" (p "See you there!")) (link ((href "http://blog.racket-lang.org/feeds/2617154372568135916/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=2617154372568135916") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2617154372568135916") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2617154372568135916") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2014/07/scheme-workshop-2014.html") (rel "alternate") (title "Scheme Workshop 2014") (type "text/html"))) (author (name "John Clements") (uri "https://www.blogger.com/profile/15701081040575095781") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-24483917585479499") (published "2014-05-08T16:46:00.002-04:00") (updated "2014-05-08T16:46:45.685-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Racket v6.0.1") (post-content "Racket version 6.0.1 is now available from" (br) "\n" (br) "\n" (a ((href "http://racket-lang.org/")) "http://racket-lang.org/") (br) "\n" (br) "\n" (ul "\n" (li "A new " (tt "racket/undefined") " library exports " (tt "undefined") " as the value currently produced by" (br) "\n" (pre "(letrec ([x x]) x)") "\nThis library anticipates a future where that expression will raise an exception. The " (tt "racket/undefined") " library will continue to offer the " (tt "undefined") " value as a bridge between versions and as a last resort.") "\n" (li "The drawing and GUI libraries provide improved support for high-resolution bitmaps and their use on Retina displays. For example, " (tt "read-bitmap") " includes a " (tt "#:try-@2x?") " option to trigger substitutions through the usual \"@2x\" naming convention.") "\n" (li "Check Syntax cooperates with Typed Racket to show arrows and other Check Syntax highlighting even when there is a type error.") "\n" (li "Functions provided via " (tt "contract-out") " that have first-order contracts perform better.") "\n" (li "The contract boundary between typed/untyped modules is much less expensive. Typed Racket now avoids generating contracts for places where contracts failures cannot happen.") "\n" (li " Occurrence typing now works better with " (tt "when") "/" (tt "unless") ". Example:" (br) "\n" (pre "(let ((x (read)))\n  (unless (number? x) (error 'bad-input))\n  (add1 x))") "\n") "\n" (li "Types in Typed Racket are now pretty-printed.") "\n" (li "Function types can now be written in prefix style, which is now preferred and is used for printing. Infix function types are still accepted for backwards compatibility.") "\n" (li "A new " (tt "-" ">" "*") " type constructor is used for writing types for functions with optional and keyword arguments. The notation is similar to the matching contract combinator.") "\n" (li "Typed Racket forms do not have a " (tt ":") " suffix by default now. For example, the " (tt "struct") " form replaces " (tt "struct:") ". The suffixed versions are all provided for backwards compatibility.") "\n" (li "Typed Racket now has preliminary support for classes and objects. However, it is still experimental and the APIs are subject to change.") "\n" (li "Type aliases in Typed Racket now support recursion and mutual recursion. For example, " (tt "(define-type (MyList X) (U Null (Pair X (MyList X))))") " is now a valid type alias.") "\n" (li "Plot correctly renders intersecting 3D graphs and non-grid-aligned 3D rectangles.") "\n" (li "Elements in plots output in PDF/PS format have the same relative scale as in other formats. In particular, it is not necessary to adjust " (tt "plot-font-size") " to make PDF plots look the same as PNG.") "\n") "\n") (link ((href "http://blog.racket-lang.org/feeds/24483917585479499/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=24483917585479499") (rel "replies") (title "4 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/24483917585479499") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/24483917585479499") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2014/05/racket-v601.html") (rel "alternate") (title "Racket v6.0.1") (type "text/html"))) (author (name "Ryan Culpepper") (uri "https://www.blogger.com/profile/04275692281825651783") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "4")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2104998318337703614") (published "2014-04-24T14:50:00.001-04:00") (updated "2014-04-24T15:01:28.743-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Registration for (fourth RacketCon)") (post-content "Registration for (fourth RacketCon) is now open. Tickets are 30$." (br) "\n" (br) "\n" (a ((href "https://www.eventbrite.com/e/racketcon-2014-tickets-11408046775")) "https://www.eventbrite.com/e/racketcon-2014-tickets-11408046775") (br) "\n" (br) "\n(fourth RacketCon) will be held on September 20th, and will be\nco-located with " (a ((href "https://thestrangeloop.com/")) "Strange Loop") " in St. Louis." (br) "\n" (br) "\nRacketCon is a yearly event where members of the Racket community get\ntogether, featuring talks and demos about the things you do with Racket." (br) "\n" (br) "\nTo get you excited, here's a sneak peek at the roster of speakers so far:" (br) "\n" (br) "\n" (ul "\n" (li "Michael Fogus (keynote)") "\n" (li "Matthew Butterick") "\n" (li "Matthew Flatt") "\n" (li "Jay McCarthy") "\n" (li "Daniel Prager") "\n" (li "Neil Toronto") "\n") "\nWe still have room for more speakers. If you've built something cool\nwith Racket, we want to hear about it!\n \nHope to see you there!\n\nVincent, for the Racket team") (link ((href "http://blog.racket-lang.org/feeds/2104998318337703614/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=2104998318337703614") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2104998318337703614") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2104998318337703614") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2014/04/registration-for-fourth-racketcon.html") (rel "alternate") (title "Registration for (fourth RacketCon)") (type "text/html"))) (author (name "Asumu Takikawa") (uri "https://www.blogger.com/profile/03651024646695210136") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6296997336653841964") (published "2014-03-12T10:09:00.001-04:00") (updated "2014-03-12T10:43:53.454-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "The new Racket home page") (post-content "Racket now has a new look for its web presence. You can see it at" (a ((href "http://racket-lang.org/")) " http://racket-lang.org") " (modulo DNS propagation).                                                    " (br) "\n" (br) "\nThe new pages improve on the old in several ways:                                                                    " (br) "\n" (br) "\n" (ul "\n" (li "More information is now on the front page.                                                                    ") "\n" (li "The site works much better small devices, such as phones.") "\n" (li "It's easier to find important parts of the site, like the package directory.") "\n" (li "The download process is more streamlined -- now it's only 2 clicks.") "\n") "\n" (br) "\nWe also wanted to have a new look, and a description that talks about why Racket is exciting." (br) "\n" (br) "\nFinally, we've taken this opportunity to shift our web hosting entirely to Amazon S3, for which Greg Hendershott's " (a ((href "https://github.com/greghendershott/aws")) (span ((style "font-family: &quot;Courier New&quot;,Courier,monospace;")) "aws")) " package has been very helpful." (br) "\n" (br) "\nWhile the new pages have been under development for quite a while, we're still happy to take bug reports, suggestions and (especially) patches: all of the site can be found here:" (br) "\n" nbsp " " (a ((href "https://github.com/plt/racket/tree/master/pkgs/plt-services/meta/new-web")) "https://github.com/plt/racket/tree/master/pkgs/plt-services/meta/new-web") (br) "\nwith the framework for building the site here:" (br) "\n" nbsp " " (a ((href "https://github.com/plt/racket/tree/master/pkgs/plt-web-pkgs")) "https://github.com/plt/racket/tree/master/pkgs/plt-web-pkgs") (br) "\n" (br) "\nThe site is built using Eli's " (span ((style "font-family: &quot;Courier New&quot;,Courier,monospace;")) (a ((href "http://www.cs.utah.edu/plt/snapshots/current/doc/scribble-pp/html.html")) "scribble/html")) " library, which is very nice to use." (br) "\n" (br) "\nI'd especially like to thank Eli and Matthew for their help with this -- going from my hacked-up HTML prototype to the smooth-building and well-organized code we have now has taken lots of work." (br) "\n" (br) "\nSam") (link ((href "http://blog.racket-lang.org/feeds/6296997336653841964/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=6296997336653841964") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/6296997336653841964") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/6296997336653841964") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2014/03/racket-now-has-new-look-for-its-web.html") (rel "alternate") (title "The new Racket home page") (type "text/html"))) (author (name "Asumu Takikawa") (uri "https://www.blogger.com/profile/03651024646695210136") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3293119573994585529") (published "2014-02-26T17:51:00.000-05:00") (updated "2014-02-26T17:51:59.025-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Racket v6.0") (post-content "Racket version 6.0 is now available from" (br) "\n" (br) "\n" (a ((href "http://racket-lang.org/")) "http://racket-lang.org/") (br) "\n" (br) "\nRacket 6.0 has a new package system, including a catalog of hundreds of already-available packages. Please visit" (br) "\n" (br) "\n" (a ((href "http://pkgs.racket-lang.org/")) "http://pkgs.racket-lang.org/") (br) "\n" (br) "\nfor an overview of the packages." (br) "\n" (br) "\nRacket versions 5.3.4 through 5.3.6 included \"beta\" versions of the package system. Racket version 6.0 incorporates many improvements suggested by preliminary experiences in those versions:" (br) "\n" (ul "\n" (li "A package is treated as a single collection by default, so it is even easier to use a GitHub repository as a package. Get started quickly:" (a ((href "http://docs.racket-lang.org/pkg/getting-started.html")) " http://docs.racket-lang.org/pkg/getting-started.html")) "\n" (li "DrRacket includes a new package manager GUI, available via the" nbsp nbsp nbsp " File|Package Manager ... menu item. The GUI is also available as a stand-alone program via the \"gui-pkg-manager\" package.") "\n" (li "The main Racket distribution has been separated into about 200 packages. The Racket installer combines the core system with bundled versions of these packages." (br) "\nAlternatively, you may now install a Minimal Racket distribution â which is about 1/10 the size of the main distribution â and add only those packages that you need.") "\n" (li "Package installation supports pre-built packages that include compiled byte code and rendered documentation, meaning packages can be installed quickly when built versions are available. All packages in the main distribution are available in pre-built form. ") "\n") "\n" (br) "\nThe recent 5.92 and 5.93 releases served as release candidates for 6.0, and 6.0 includes a few additional repairs related to the package system." (br) "\n" (br) "\nFurther improvements to the package system are in the works, notably including package documentation on the package-catalog web site." (br) "\n" (br) "\nCOMPATIBILITY NOTE: PLaneT, the previous Racket package system, will remain in place for the foreseeable future, but we expect all package work to shift to the new system." (br) "\n" (br) "\nBeyond the package system, this release brings a number of other changes:" (br) "\n" (ul "\n" (li "Racket's HTML documentation has a new and improved look, thanks to Matthew Butterick.") "\n" (li "The documentation includes a style guide, " (a ((href "http://docs.racket-lang.org/style/")) "\"How to Program Racket\"") ".") "\n" (li "Racket's JIT compiler supports the ARM architecture.") "\n" (li "Racket supports the Mac's Retina display mode.") "\n" (li "The performance of the Typed Racket compiler improved by 50% on some typed programs; e.g., see " (a ((href "http://bit.ly/1d0Ye4z")) "http://bit.ly/1d0Ye4z")) "\n" (li "The profiler provides a new mode that uses the errortrace library to produce fine-grained profiles.") "\n" (li "A new contract profiler reports how much time programs spend checking contracts, and which contracts are most expensive.") "\n" (li "The math/flonum library exports fast 105-bit precision operations.") "\n" (li "Check Syntax handles generated identifiers, especially those introduced by struct (e.g. field selectors) and Redex (e.g., e_1, e_2)") "\n" (li "2htdp/batch-io includes functions for dealing with html/xml in files and web sites as X-expressions plus conveniences for web-based graph traversals.") "\n" (li "The `gen:set' generic interface extends set operations to work on user-defined types that implement set methods, as well as on other set-like built-in types, such as lists.") "\n" (li "Picts support conversion to SVG format.") "\n" (li "Under unix, Racket provides desktop entries (.desktop files) for its graphical executables.") "\n") "\n") (link ((href "http://blog.racket-lang.org/feeds/3293119573994585529/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=3293119573994585529") (rel "replies") (title "4 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/3293119573994585529") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/3293119573994585529") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2014/02/racket-v60.html") (rel "alternate") (title "<a href=\"http://racket-lang.org\">Racket v6.0</a>") (type "text/html"))) (author (name "Ryan Culpepper") (uri "https://www.blogger.com/profile/04275692281825651783") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "4")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7291823648437673671") (published "2013-12-17T16:44:00.000-05:00") (updated "2013-12-18T00:03:58.260-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Typed Racket and Classes") (post-content "Recently we had our inaugural " (a ((href "https://dekvek.com/racket-salon/")) "Racket Salon") " meetup here in Boston, graciously organized by Dan King. At the meetup I gave a short demo about the upcoming support for classes and object-oriented programming in Typed Racket. In this blog post, Iâll go over the concepts I presented in my demo." (br) "\n" (h3 "\n" (a ((href "http://www.blogger.com/null") (name "(part._.Background)"))) "Background") "\nAs many readers already know, " (a ((href "http://www.cs.utah.edu/plt/snapshots/current/doc/ts-guide/index.html")) "Typed Racket") " is a " (span ((style "font-style: italic;")) "gradually-typed") " sister language to Racket. That means itâs a " (a ((href "http://en.wikipedia.org/wiki/Static_typing#Static_type-checking")) "statically-typed") " language that accommodates the idioms of Racket. Programs written in Racket should seamlessly port to Typed Racket with the addition of type annotations here and there. You can even keep some parts of the program dynamically-typed and Typed Racket will make sure those parts wonât break the type invariants via " (a ((href "http://www.cs.utah.edu/plt/snapshots/current/doc/guide/contracts.html")) (span ((style "font-style: italic;")) "contracts")) "." (br) "\n" (br) "\nOf course, supporting " (span ((style "font-style: italic;")) "all") " Racket idioms is quite a lot of work, especially since itâs a constantly evolving language. One of the big pieces missing from Typed Racket right now is support for " (a ((href "http://www.cs.utah.edu/plt/snapshots/current/doc/guide/classes.html")) "classes and objects") ". Since the GUI library heavily uses the class system, itâs important to support the object-oriented subset of Racket." (br) "\n" (br) "\nSupporting classes isnât trivial though. There are a bunch of issues, but the main ones are: (1) the class system is built as a complex macro and so reconstructing the information needed to type-check is tricky, and (2) we need to make sure that interoperation between Racket and Typed Racket using classes/objects can be done safely." (br) "\n" (br) "\nI wonât go over the technical details about the implementation in this blog post, but contact me if youâre interested. In the rest of the blog post, Iâll show some examples to demonstrate what programming in Typed Racket with classes looks like. Just so you know, these examples wonât work in the current version of Typed Racket but will be supported in a future release." (br) "\n" (blockquote ((class "refpara")) "\n" (blockquote ((class "refcolumn")) "\n" (blockquote ((class "refcontent")) "\n") "\n") "\n") "\n" (span ((style "font-size: small;")) "Side note: If you like to live dangerously, you can track the experimental branch with support for classes " (a ((href "https://github.com/takikawa/racket/tree/tr-classes")) "here") ".") (br) "\n" (h3 "\n" (a ((href "http://www.blogger.com/null") (name "(part._.Fishes_and_types)"))) "Fishes and types") "\nTo start out, letâs look at an untyped example from the Racket Guide on classes and objects. The following snippet defines a " (span ((class "RktSym")) "fish%") " class. The class has several features: an initialization argument named " (span ((class "RktSym")) "size") ", a private field named " (span ((class "RktSym")) "current-size") ", three methods " (span ((class "RktSym")) "get-size") ", " (span ((class "RktSym")) "grow") ", and " (span ((class "RktSym")) "eat") "." (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/special-forms.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fprims..rkt%29._define%29%29")) "define")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "fish%"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/Typed_Classes.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fprims..rkt%29._class%29%29")) "class")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktValLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/createclass.html#%28def._%28%28lib._racket%2Fprivate%2Fclass-internal..rkt%29._object~25%29%29")) "object%")))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/createclass.html#%28form._%28%28lib._racket%2Fprivate%2Fclass-internal..rkt%29._init%29%29")) "init")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "size") (span ((class "RktPn")) ")"))) "\n" (tr (td)) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/special-forms.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fprims..rkt%29._define%29%29")) "define")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "current-size") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "size") (span ((class "RktPn")) ")"))) "\n" (tr (td)) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/objcreation.html#%28form._%28%28lib._racket%2Fprivate%2Fclass-internal..rkt%29._super-new%29%29")) "super-new")) (span ((class "RktPn")) ")"))) "\n" (tr (td)) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/createclass.html#%28form._%28%28lib._racket%2Fprivate%2Fclass-internal..rkt%29._define%2Fpublic%29%29")) "define/public")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "get-size") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktSym")) "current-size") (span ((class "RktPn")) ")"))) "\n" (tr (td)) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/createclass.html#%28form._%28%28lib._racket%2Fprivate%2Fclass-internal..rkt%29._define%2Fpublic%29%29")) "define/public")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "grow") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "amt") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29")) "set!")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "current-size") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29")) "+")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "amt") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "current-size") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td)) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/createclass.html#%28form._%28%28lib._racket%2Fprivate%2Fclass-internal..rkt%29._define%2Fpublic%29%29")) "define/public")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "eat") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "other-fish") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "grow") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/ivaraccess.html#%28form._%28%28lib._racket%2Fprivate%2Fclass-internal..rkt%29._send%29%29")) "send")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "other-fish") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "get-size") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")) "\n") "\nThe notation should seem mostly familiar if youâve programmed in Java or other object-oriented languages. The " (span ((class "RktSym")) "%") " suffix is a convention for identifiers that are bound to class values. The " (span ((class "RktSym")) (a ((class "RktValLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/createclass.html#%28def._%28%28lib._racket%2Fprivate%2Fclass-internal..rkt%29._object~25%29%29")) "object%")) " value is the superclass of " (span ((class "RktSym")) "fish%") " and is the root class of all class hierarchies. The initialization argument " (span ((class "RktSym")) "size") " is used when constructing an instance of a class:" (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/objcreation.html#%28form._%28%28lib._racket%2Fprivate%2Fclass-internal..rkt%29._new%29%29")) "new")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "fish%") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "size") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "3") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktRes")) "(object:fish% ...)"))) "\n")) "\n") "\nNote that in Racket, classes are just values that can be passed around like anything else. For example, you can even do silly things like define nested inheriting classes:" (br) "\n" (blockquote ((class "refpara")) "\n" (blockquote ((class "refcolumn")) "\n" (blockquote ((class "refcontent")) "\n") "\n") "\n") "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/objcreation.html#%28form._%28%28lib._racket%2Fprivate%2Fclass-internal..rkt%29._new%29%29")) "new")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/Typed_Classes.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fprims..rkt%29._class%29%29")) "class")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/Typed_Classes.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fprims..rkt%29._class%29%29")) "class")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktValLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/createclass.html#%28def._%28%28lib._racket%2Fprivate%2Fclass-internal..rkt%29._object~25%29%29")) "object%")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/objcreation.html#%28form._%28%28lib._racket%2Fprivate%2Fclass-internal..rkt%29._super-new%29%29")) "super-new")) (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29")) "displayln")) (span ((class "hspace")) nbsp) (span ((class "RktVal")) "\"superclass\"") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/objcreation.html#%28form._%28%28lib._racket%2Fprivate%2Fclass-internal..rkt%29._super-new%29%29")) "super-new")) (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/Writing.html#%28def._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._displayln%29%29")) "displayln")) (span ((class "hspace")) nbsp) (span ((class "RktVal")) "\"subclass\"") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td (span ((class "RktOut")) "superclass"))) "\n" (tr (td (span ((class "RktOut")) "subclass"))) "\n")) "\n")) "\n" (tr (td (span ((class "RktRes")) "(object:eval:4:0 ...)"))) "\n")) "\n") "\nIn practice, this feature is quite useful since it lets you define " (a ((href "http://www.cs.utah.edu/plt/snapshots/current/doc/guide/classes.html#%28part._.Mixins%29")) (span ((style "font-style: italic;")) "mixins")) " easily. Thatâs a topic for another blog post." (br) "\n" (br) "\n" (span ((style "font-size: small;")) "Side note: In other words, Racket has " (span ((style "font-style: italic;")) "first-class classes") ". This is a term you might see used in the programming language literature.") (br) "\n" (br) "\nAdding types to the fish program is easy. First, we can introduce a type definition for the fish class." (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/special-forms.html#%28form._%28%28lib._typed%2Fracket%2Fbase..rkt%29._define-type%29%29")) "define-type")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "Fish%"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/Typed_Classes.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fbase-types-extra..rkt%29._.Class%29%29")) "Class")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/createclass.html#%28form._%28%28lib._racket%2Fprivate%2Fclass-internal..rkt%29._init%29%29")) "init")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "size") (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/type-ref.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fbase-types..rkt%29._.Real%29%29")) "Real")) (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "get-size") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/type-ref.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fbase-types-extra..rkt%29._-~3e%29%29")) (span ((class "nobreak")) "-" ">"))) (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/type-ref.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fbase-types..rkt%29._.Real%29%29")) "Real")) (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "grow") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/type-ref.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fbase-types..rkt%29._.Real%29%29")) "Real")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/type-ref.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fbase-types-extra..rkt%29._-~3e%29%29")) (span ((class "nobreak")) "-" ">"))) (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/type-ref.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fbase-types..rkt%29._.Void%29%29")) "Void")) (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "draw") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/type-ref.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fbase-types-extra..rkt%29._-~3e%29%29")) (span ((class "nobreak")) "-" ">"))) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "Pict") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "eat") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/Typed_Classes.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fbase-types-extra..rkt%29._.Instance%29%29")) "Instance")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "Fish%") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/type-ref.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fbase-types-extra..rkt%29._-~3e%29%29")) (span ((class "nobreak")) "-" ">"))) (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/type-ref.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fbase-types..rkt%29._.Void%29%29")) "Void")) (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")) "\n") "\n" (blockquote ((class "refpara")) "\n" (blockquote ((class "refcolumn")) "\n" (blockquote ((class "refcontent")) "\n") "\n") "\n") "\n" (br) "\nThis type definition says that " (span ((class "RktSym")) "Fish%") " is a class type with the given initialization argument and methods types. Note that the type of the fish class " (span ((class "RktSym")) "Fish%") " is " (span ((style "font-style: italic;")) "not") " the same as the type of its instances " (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/Typed_Classes.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fbase-types-extra..rkt%29._.Instance%29%29")) "Instance")) (span ((class "stt")) " ") (span ((class "RktSym")) "Fish%") (span ((class "RktPn")) ")") ". This is an important distinction to make, since both the fish class value and fish object values may appear in the same program." (br) "\n" (br) "\n" (div ((style "text-align: left;")) "\n" (span ((style "font-size: small;")) "Side note: If youâre familiar with Typed Racket, you may be surprised that the recursive reference to " (span ((class "RktSym")) "Fish%") " in the type definition works. Future versions of Typed Racket will support implicit recursive type definitions.")) "\n" (br) "\nWith the type definition in hand, we can just annotate the class value with the type:" (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/special-forms.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fprims..rkt%29._~3a%29%29")) ":")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "fish%") (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/special-forms.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fprims..rkt%29._~3a%29%29")) ":")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "Fish%") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/special-forms.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fprims..rkt%29._define%29%29")) "define")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "fish%"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/Typed_Classes.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fprims..rkt%29._class%29%29")) "class")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktValLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/createclass.html#%28def._%28%28lib._racket%2Fprivate%2Fclass-internal..rkt%29._object~25%29%29")) "object%")))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/createclass.html#%28form._%28%28lib._racket%2Fprivate%2Fclass-internal..rkt%29._init%29%29")) "init")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "size") (span ((class "RktPn")) ")"))) "\n" (tr (td)) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/special-forms.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fprims..rkt%29._~3a%29%29")) ":")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "current-size") (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/type-ref.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fbase-types..rkt%29._.Real%29%29")) "Real")) (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/special-forms.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fprims..rkt%29._define%29%29")) "define")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "current-size") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "size") (span ((class "RktPn")) ")"))) "\n" (tr (td)) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/objcreation.html#%28form._%28%28lib._racket%2Fprivate%2Fclass-internal..rkt%29._super-new%29%29")) "super-new")) (span ((class "RktPn")) ")"))) "\n" (tr (td)) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/createclass.html#%28form._%28%28lib._racket%2Fprivate%2Fclass-internal..rkt%29._define%2Fpublic%29%29")) "define/public")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "get-size") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktSym")) "current-size") (span ((class "RktPn")) ")"))) "\n" (tr (td)) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/createclass.html#%28form._%28%28lib._racket%2Fprivate%2Fclass-internal..rkt%29._define%2Fpublic%29%29")) "define/public")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "grow") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "amt") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29")) "set!")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "current-size") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29")) "+")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "amt") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "current-size") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td)) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/createclass.html#%28form._%28%28lib._racket%2Fprivate%2Fclass-internal..rkt%29._define%2Fpublic%29%29")) "define/public")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "eat") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "other-fish") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "grow") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/ivaraccess.html#%28form._%28%28lib._racket%2Fprivate%2Fclass-internal..rkt%29._send%29%29")) "send")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "other-fish") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "get-size") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")) "\n") "\nWe do need an extra type annotation on the private field because its type isnât included in the type definition above. This fish definition is a bit boring, so letâs spice it up a bit by making fishes drawable:" (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/special-forms.html#%28form._%28%28lib._typed%2Fracket%2Fbase..rkt%29._define-type%29%29")) "define-type")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "Fish%"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/Typed_Classes.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fbase-types-extra..rkt%29._.Class%29%29")) "Class")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/createclass.html#%28form._%28%28lib._racket%2Fprivate%2Fclass-internal..rkt%29._init%29%29")) "init")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "size") (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/type-ref.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fbase-types..rkt%29._.Real%29%29")) "Real")) (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "get-size") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/type-ref.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fbase-types-extra..rkt%29._-~3e%29%29")) (span ((class "nobreak")) "-" ">"))) (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/type-ref.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fbase-types..rkt%29._.Real%29%29")) "Real")) (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "grow") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/type-ref.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fbase-types..rkt%29._.Real%29%29")) "Real")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/type-ref.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fbase-types-extra..rkt%29._-~3e%29%29")) (span ((class "nobreak")) "-" ">"))) (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/type-ref.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fbase-types..rkt%29._.Void%29%29")) "Void")) (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "a type for the new method"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "draw") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/type-ref.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fbase-types-extra..rkt%29._-~3e%29%29")) (span ((class "nobreak")) "-" ">"))) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "Pict") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "eat") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/Typed_Classes.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fbase-types-extra..rkt%29._.Instance%29%29")) "Instance")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "Fish%") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/type-ref.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fbase-types-extra..rkt%29._-~3e%29%29")) (span ((class "nobreak")) "-" ">"))) (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/type-ref.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fbase-types..rkt%29._.Void%29%29")) "Void")) (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td)) "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/special-forms.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fprims..rkt%29._~3a%29%29")) ":")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "fish%") (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/special-forms.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fprims..rkt%29._~3a%29%29")) ":")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "Fish%") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/special-forms.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fprims..rkt%29._define%29%29")) "define")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "fish%"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/Typed_Classes.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fprims..rkt%29._class%29%29")) "class")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktValLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/createclass.html#%28def._%28%28lib._racket%2Fprivate%2Fclass-internal..rkt%29._object~25%29%29")) "object%")))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/createclass.html#%28form._%28%28lib._racket%2Fprivate%2Fclass-internal..rkt%29._init%29%29")) "init")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "size") (span ((class "RktPn")) ")"))) "\n" (tr (td)) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/special-forms.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fprims..rkt%29._~3a%29%29")) ":")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "current-size") (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/type-ref.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fbase-types..rkt%29._.Real%29%29")) "Real")) (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/special-forms.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fprims..rkt%29._define%29%29")) "define")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "current-size") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "size") (span ((class "RktPn")) ")"))) "\n" (tr (td)) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/objcreation.html#%28form._%28%28lib._racket%2Fprivate%2Fclass-internal..rkt%29._super-new%29%29")) "super-new")) (span ((class "RktPn")) ")"))) "\n" (tr (td)) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/createclass.html#%28form._%28%28lib._racket%2Fprivate%2Fclass-internal..rkt%29._define%2Fpublic%29%29")) "define/public")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "get-size") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktSym")) "current-size") (span ((class "RktPn")) ")"))) "\n" (tr (td)) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "new draw method"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/createclass.html#%28form._%28%28lib._racket%2Fprivate%2Fclass-internal..rkt%29._define%2Fpublic%29%29")) "define/public")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "draw") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/pict/More_Pict_Constructors.html#%28def._%28%28lib._pict%2Fmain..rkt%29._standard-fish%29%29")) "standard-fish")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29")) "*")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "current-size") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "10") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2A%29%29")) "*")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "current-size") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "5") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td)) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/createclass.html#%28form._%28%28lib._racket%2Fprivate%2Fclass-internal..rkt%29._define%2Fpublic%29%29")) "define/public")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "grow") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "amt") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/set_.html#%28form._%28%28quote._~23~25kernel%29._set%21%29%29")) "set!")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "current-size") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._~23~25kernel%29._%2B%29%29")) "+")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "amt") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "current-size") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td)) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/createclass.html#%28form._%28%28lib._racket%2Fprivate%2Fclass-internal..rkt%29._define%2Fpublic%29%29")) "define/public")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "eat") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "other-fish") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "grow") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/ivaraccess.html#%28form._%28%28lib._racket%2Fprivate%2Fclass-internal..rkt%29._send%29%29")) "send")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "other-fish") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "get-size") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")) "\n") "\nThe new draw method thatâs been added to the fish relies on some functions from the " (a ((class "RktModLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/pict/index.html")) (span ((class "RktSym")) "pict")) " library. Since thatâs not currently included in Typed Racketâs standard libraries, we need to give its exports some types:" (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "this would go at the top of the file before fish%"))) "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/special-forms.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fprims..rkt%29._require%2Ftyped%29%29")) "require/typed")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktValLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/pict/Pict_Datatype.html#%28def._%28%28lib._pict%2Fmain..rkt%29._pict%29%29")) "pict")))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "#:opaque") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "Pict") (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktValLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/pict/Pict_Datatype.html#%28def._%28%28lib._pict%2Fmain..rkt%29._pict~3f%29%29")) "pict?")) (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) (a ((class "RktValLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/pict/More_Pict_Constructors.html#%28def._%28%28lib._pict%2Fmain..rkt%29._standard-fish%29%29")) "standard-fish")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/type-ref.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fbase-types..rkt%29._.Real%29%29")) "Real")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/type-ref.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fbase-types..rkt%29._.Real%29%29")) "Real")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "#:color") (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/type-ref.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fbase-types..rkt%29._.String%29%29")) "String")) (span ((class "RktPn")) "]") (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/type-ref.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fbase-types-extra..rkt%29._-~3e%29%29")) (span ((class "nobreak")) "-" ">"))) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "Pict") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n")) "\n") "\nThe " (span ((class "RktPn")) "#:opaque") " import form in Typed Racket lets you create a new type that corresponds to some predicate, in this case " (span ((class "RktSym")) (a ((class "RktValLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/pict/Pict_Datatype.html#%28def._%28%28lib._pict%2Fmain..rkt%29._pict~3f%29%29")) "pict?")) ". Itâs useful for bringing in datatypes from dynamically-typed Racket libraries. With that new type, we can give a type for the " (span ((class "RktSym")) (a ((class "RktValLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/pict/More_Pict_Constructors.html#%28def._%28%28lib._pict%2Fmain..rkt%29._standard-fish%29%29")) "standard-fish")) " function." (br) "\n" (br) "\nIn the end, you can interact with some fish and draw them:" (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/ts-reference/special-forms.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fprims..rkt%29._define%29%29")) "define")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "dory") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/objcreation.html#%28form._%28%28lib._racket%2Fprivate%2Fclass-internal..rkt%29._new%29%29")) "new")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "fish%") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "size") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "5") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktSym")) "dory"))) "\n" (tr (td (span ((class "RktOut")) "- : (Instance Fish%)"))) "\n" (tr (td (span ((class "RktRes")) "(object:fish% ...)"))) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/ivaraccess.html#%28form._%28%28lib._racket%2Fprivate%2Fclass-internal..rkt%29._send%29%29")) "send")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "dory") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "draw") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktOut")) "- : Pict"))) "\n" (tr (td (img ((alt "image") (height "25") (src "http://lh6.googleusercontent.com/-0bxij1bWnRA/UrDCfuvXEaI/AAAAAAAAAJE/c2y6u1ZSz_I/802879dabfe9e456dc50.png") (width "50"))))) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/ivaraccess.html#%28form._%28%28lib._racket%2Fprivate%2Fclass-internal..rkt%29._send%29%29")) "send")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "dory") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "eat") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "dory") (span ((class "RktPn")) ")"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/ivaraccess.html#%28form._%28%28lib._racket%2Fprivate%2Fclass-internal..rkt%29._send%29%29")) "send")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "dory") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "draw") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktOut")) "- : Pict"))) "\n" (tr (td (img ((alt "image") (height "50") (src "http://lh5.googleusercontent.com/-AyIZu9t05EI/UrDCgLwE8_I/AAAAAAAAAJI/V3nwWBNvQes/5196ffca3a6b0c25a5f4.png") (width "100"))))) "\n")) "\n") "\n" (h3 "\n" (a ((href "http://www.blogger.com/null") (name "(part._.Conclusion)"))) "Conclusion") "\nAt Racket Salon, I talked about a few other things including mixins and converting a slightly larger program that uses the GUI library. They didnât translate well to a blog setting so I didnât include them here. Racket Salon was a fun event, so I encourage anyone in the Boston area to attend!" (br) "\n" (br) "\nTyped Racketâs support for classes will land in a future version of Racket, possibly the release after v6.0.") (link ((href "http://blog.racket-lang.org/feeds/7291823648437673671/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=7291823648437673671") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/7291823648437673671") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/7291823648437673671") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2013/12/typed-racket-and-classes_17.html") (rel "alternate") (title "Typed Racket and Classes") (type "text/html"))) (author (name "Asumu Takikawa") (uri "https://www.blogger.com/profile/03651024646695210136") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (media:thumbnail ((height "72") (url "http://lh6.googleusercontent.com/-0bxij1bWnRA/UrDCfuvXEaI/AAAAAAAAAJE/c2y6u1ZSz_I/s72-c/802879dabfe9e456dc50.png") (width "72") (xmlns:media "http://search.yahoo.com/mrss/"))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7223229183606948324") (published "2013-08-10T08:57:00.001-04:00") (updated "2013-08-10T08:57:50.917-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Racket v5.3.6") (post-content "Racket version 5.3.6 is now available from\n" (pre (a ((href "http://racket-lang.org/")) "http://racket-lang.org/")) "\n" (p "Racket v5.3.6 is a bug-fix release.  It eliminates errors from v5.3.5 that people have found over the summer.") "\n") (link ((href "http://blog.racket-lang.org/feeds/7223229183606948324/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=7223229183606948324") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/7223229183606948324") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/7223229183606948324") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2013/08/racket-v536.html") (rel "alternate") (title "<a href=\"http://racket-lang.org/\">Racket v5.3.6</a>") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://plus.google.com/115730576737402335315") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh5.googleusercontent.com/-eR9w2qhxsD0/AAAAAAAAAAI/AAAAAAAACa4/EbnrYldgv28/s32-c/photo.jpg") (width "32")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1243015694950616429") (published "2013-07-31T15:43:00.002-04:00") (updated "2013-07-31T15:43:49.793-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "RacketCon 2013 Signup") (post-content "RacketCon sign up is now open! " (a ((href "http://bit.ly/racketconsignup2013")) "http://bit.ly/racketconsignup2013") (br) "\n" (br) "\nRacketCon will be held at Northeastern University in Boston on September 29. The details of the event can be found on the website: " (a ((href "http://con.racket-lang.org/")) "http://con.racket-lang.org") (br) "\n" (br) "\nWe also have a page on Lanyrd for the event: " (a ((href "http://lanyrd.com/2013/racketcon/")) "http://lanyrd.com/2013/racketcon/") (br) "\n" (br) "\nMore information about the schedule will be posted in the upcoming weeks.") (link ((href "http://blog.racket-lang.org/feeds/1243015694950616429/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=1243015694950616429") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1243015694950616429") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1243015694950616429") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2013/07/racketcon-2013-signup.html") (rel "alternate") (title "RacketCon 2013 Signup") (type "text/html"))) (author (name "Asumu Takikawa") (uri "https://www.blogger.com/profile/03651024646695210136") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2809300670705347888") (published "2013-06-18T07:19:00.003-04:00") (updated "2013-06-18T07:19:40.365-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Racket v5.3.5") (post-content "Racket version 5.3.5 is now available from\n" (pre (a ((href "http://racket-lang.org/")) "http://racket-lang.org/")) "\n" (p "This is a special-purpose release to match the arrival of âRealm of Racketâ in bookstores.  Racket v5.3.5 adds a single " (tt "realm") " collection to the v5.3.4 release.  The new collection contains the source code that readers of Realm may wish to use for experiments.") "\n") (link ((href "http://blog.racket-lang.org/feeds/2809300670705347888/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=2809300670705347888") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2809300670705347888") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2809300670705347888") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2013/06/racket-v535.html") (rel "alternate") (title "<a href=\"http://racket-lang.org/\">Racket v5.3.5</a>") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://plus.google.com/115730576737402335315") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh5.googleusercontent.com/-eR9w2qhxsD0/AAAAAAAAAAI/AAAAAAAACa4/EbnrYldgv28/s32-c/photo.jpg") (width "32")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4646560227884734416") (published "2013-05-29T17:43:00.000-04:00") (updated "2013-05-29T17:43:12.057-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Marketplace: A language for network-aware programming") (post-content (p "We are happy to announce the release of Marketplace, a new programming language for building functional network programs.  Marketplace combines two fundamental ideas in a new way: nested virtual machines and publish/subscribe messaging.  Nesting allows programs to isolate processes and to delimit conversations. While publish/subscribe generalizes point-to-point and broadcast messaging, it smoothly turns the appearance and disappearance of participants and resources into " (span ((style "font-style: italic")) "presence") " and " (span ((style "font-style: italic")) "absence") " messages. Such messages make it particularly easy to start and stop services and to manage resources based on demand.") (p "Here is a simple TCP echo server written in Marketplace:") (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody (tr (td (span ((class "RktMeta")) 160))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "RktMeta")) "#lang") (span ((class "hspace")) nbsp) (span ((class "RktMeta")) "marketplace") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta")) 160))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "endpoint") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "#:subscriber") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "tcp-channel") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "?") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "tcp-listener") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "5999") (span ((class "RktPn")) ")") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "?") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "#:conversation") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "tcp-channel") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "from") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "to") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29")) "_")) (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "#:on-presence") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "spawn") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "#:child") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "echoer") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "from") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "to") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta")) 160))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "RktCmt")) ";;") (span ((class "hspace")) nbsp) (span ((class "RktCmt")) "echoer:") (span ((class "hspace")) nbsp) (span ((class "RktCmt")) "TcpAddress") (span ((class "hspace")) nbsp) (span ((class "RktCmt")) "TcpAddress") (span ((class "hspace")) nbsp) (span ((class "RktCmt")) "-" ">") (span ((class "hspace")) nbsp) (span ((class "RktCmt")) "Transition") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29")) "define")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "echoer") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "from") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "to") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "transition") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "stateless") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "endpoint") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "#:subscriber") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "tcp-channel") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "from") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "to") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "?") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "#:on-absence") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "quit") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) "tcp-channel") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29")) "_")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) (a ((class "RktStxLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29")) "_")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "data") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "send-message") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "tcp-channel") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "to") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "from") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "data") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n"))) (p "The initial " (span ((class "RktSym")) "endpoint") " subscribes to TCP messages on port 5999. When a conversational partner appears, the endpoint spawns a new process that runs an " (span ((class "RktSym")) "echoer") " process.  The latter is stateless and subscribes to TCP messages.  When it gets messages with payload " (span ((class "RktSym")) "data") ", it sends them back out with the opposite addressing; when the TCP conversation disappears, it quits.") (p "Thus far, we have built several real systems using Marketplace: a DNS server, a DNS proxy, and an SSH server.  The DNS proxy has handled DNS traffic for ourselves and other members of our lab for the last several months.") (p "You can read an overview along with detailed documentation for Marketplace at " (a ((href "http://tonyg.github.io/marketplace/")) (span ((class "stt")) "http://tonyg.github.io/marketplace/")) ".") (p "To get the sources for Marketplace as well as the applications point your browser to " (a ((href "https://github.com/tonyg/marketplace")) (span ((class "stt")) "https://github.com/tonyg/marketplace")) ".") (p "Enjoy!") (p "Tony Garnock-Jones" (br) (br) "\nSam Tobin-Hochstadt" (br) (br) "\nMatthias Felleisen")) (link ((href "http://blog.racket-lang.org/feeds/4646560227884734416/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=4646560227884734416") (rel "replies") (title "4 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/4646560227884734416") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/4646560227884734416") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2013/05/marketplace-language-for-network-aware.html") (rel "alternate") (title "Marketplace: A language for network-aware programming") (type "text/html"))) (author (name "Sam Tobin-Hochstadt") (uri "https://www.blogger.com/profile/12049111326816937908") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "4")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7167816348718621286") (published "2013-05-08T12:44:00.001-04:00") (updated "2013-05-08T12:44:41.272-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Racket v5.3.4") (post-content "Racket version 5.3.4 is now available from\n" (pre (a ((href "http://racket-lang.org/")) "http://racket-lang.org/")) "\n" (ul "\n" (li "Extflonums (80-bit floating-point numbers) are supported on some x86/x86_64 platforms â including Windows, and including platforms where Racket is compiled to use SSE instructions for flonum arithmetic.  Thanks to Michael Filonenko.") "\n" (li "OS X: DrRacket and all of the other apps are now signed with an official key.") "\n" (li "Tally Maze: a new game based an enumeration of 2d mazes.") "\n" (li "The Optimization Coach, a DrRacket plugin, has been moved from the Racket distribution to the Racket package repository.  Install it with: " (tt "raco pkg install optimization-coach") ".") "\n" (li "Redex: " (tt "define-union-language") " now merges productions when languages define the same nonterminals.  Thanks to William Bowman.") "\n" (li "The " (tt "srfi/19") " library is now compatible with the date structure type exported by " (tt "racket/base") ".") "\n") "\n") (link ((href "http://blog.racket-lang.org/feeds/7167816348718621286/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=7167816348718621286") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/7167816348718621286") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/7167816348718621286") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2013/05/racket-v534.html") (rel "alternate") (title "<a href=\"http://racket-lang.org/\">Racket v5.3.4</a>") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://plus.google.com/115730576737402335315") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh5.googleusercontent.com/-eR9w2qhxsD0/AAAAAAAAAAI/AAAAAAAACa4/EbnrYldgv28/s32-c/photo.jpg") (width "32")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1317541501753090960") (published "2013-05-08T11:50:00.000-04:00") (updated "2013-05-08T11:53:39.733-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "RacketCon 2013") (post-content "We are pleased to announce that " (span ((class "RktPn")) "(") (span ((class "RktSym")) "third") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "RacketCon") (span ((class "RktPn")) ")") " will take place on September 29, 2013 at Northeastern University in Boston." nbsp " This year, we plan to bring in several speakers from industry, as well as host talks from Racket developers and users." (br) "\n" (br) "\nLunch will be provided." (br) "\n" (br) "\nOn the Saturday (28th) before RacketCon, we plan to hold a hackathon to work on various Racket projects." (br) "\n" (br) "\nRegistration will open during the summer, and we will post a detailed schedule of events around the same time. The conference website is at" (br) "\n" (br) "\n" (a ((href "http://con.racket-lang.org/")) "http://con.racket-lang.org/") (br) "\n" (br)) (link ((href "http://blog.racket-lang.org/feeds/1317541501753090960/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=1317541501753090960") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1317541501753090960") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1317541501753090960") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2013/05/racketcon-2013.html") (rel "alternate") (title "RacketCon 2013") (type "text/html"))) (author (name "Asumu Takikawa") (uri "https://www.blogger.com/profile/03651024646695210136") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5066620541424773352") (published "2013-03-25T14:00:00.000-04:00") (updated "2013-03-25T14:00:48.871-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "200!") (post-content (p "About a month ago, inspired by a mailing list post by Tim Brown, Racketeers started to write more solutions to " (a ((href "http://rosettacode.org/wiki/Rosetta_Code")) "Rosetta Code") " tasks for Racket. Just today, we" rsquo "ve reached 200 entries in the " (a ((href "http://rosettacode.org/wiki/Category:Racket")) "Racket category") "!") (p "This is a nice milestone, but we still have a ways to go. At 200 entries, Racket comes in at around 54th in the " (a ((href "http://rosettacode.org/wiki/RC_POP.OUT")) "popularity") " rankings. So if you" rsquo "re looking to practice your Racketeering skills, don" rsquo "t hesitate to work on some of the " (a ((href "http://rosettacode.org/wiki/Reports:Tasks_not_implemented_in_Racket")) "remaining tasks") ".") (p "To give you a taste of the kinds of solutions we have so far, here are some examples.") (p "Mandelbrot:") (blockquote ((class "SCodeFlow")) (table ((cellspacing "0")) (tbody (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "iterations") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "z") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "i") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "z" 8242) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "+") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "*") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "z") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "z") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "if") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "or") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "=") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "i") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "255") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) ">") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "magnitude") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "z" 8242) (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktSym")) "i"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "iterations") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "z" 8242) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "add1") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "i") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp))) "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "iter-" ">" "color") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "i") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "if") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "=") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "i") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "255") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "make-object") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "color%") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "\"black\"") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "make-object") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "color%") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "*") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "5") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "modulo") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "i") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "15") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "*") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "32") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "modulo") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "i") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "7") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "*") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "8") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "modulo") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "i") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "31") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp))) "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "mandelbrot") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "width") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "height") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "target") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "make-screen-bitmap") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "width") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "height") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "dc") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "new") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "bitmap-dc%") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "bitmap") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "target") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "for*") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktSym")) "x") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "width") (span ((class "RktPn")) "]") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "y") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "height") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "real-x") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (span ((class "nobreak")) "-")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "*") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "3.0") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "/") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "x") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "width") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2.25") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "real-y") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (span ((class "nobreak")) "-")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "*") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2.5") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "/") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "y") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "height") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1.25") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "send") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "dc") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "set-pen") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "iter-" ">" "color") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "iterations") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "make-rectangular") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "real-x") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "real-y") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "0") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "0") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "'") (span ((class "RktVal")) "solid") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "send") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "dc") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "draw-point") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "x") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "y") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktSym")) "target") (span ((class "RktPn")) ")"))) "\n")))) "\n" (tr (td (p nbsp))) "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "mandelbrot") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "300") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "200") (span ((class "RktPn")) ")"))) "\n" (tr (td (p (img ((alt "image") (height "200") (src "http://lh5.googleusercontent.com/-wzQ9KP28_PA/UVB3M5oR4XI/AAAAAAAAAHc/cS6_p0S_P8Q/7890006789e3741ef5c9.png") (width "300")))))) "\n")))) "\n"))) (p "Yin and Yang:") (blockquote ((class "SCodeFlow")) (table ((cellspacing "0")) (tbody (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "yin-yang") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "d") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "base"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "hc-append") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "inset/clip") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "circle") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "d") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "0") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "0") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (span ((class "nobreak")) "-")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "/") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "d") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "0") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "inset/clip") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "disk") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "d") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (span ((class "nobreak")) "-")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "/") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "d") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "0") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "0") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "0") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "with-top"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "ct-superimpose"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktSym")) "base"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cc-superimpose") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "colorize") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "disk") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "/") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "d") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "\"white\"") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "disk") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "/") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "d") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "8") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "with-bottom"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cb-superimpose"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktSym")) "with-top"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cc-superimpose") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "disk") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "/") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "d") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "colorize") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "disk") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "/") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "d") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "8") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "\"white\"") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cc-superimpose") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "with-bottom") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "circle") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "d") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")))) "\n" (tr (td (p nbsp))) "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "yin-yang") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "200") (span ((class "RktPn")) ")"))) "\n" (tr (td (p (img ((alt "image") (height "200") (src "http://lh6.googleusercontent.com/-a0Qnz8A8_K8/UVBxiTm0xmI/AAAAAAAAAHI/ANumH0xXXqk/70970378873b1d2f9ab6.png") (width "200")))))) "\n")))) "\n"))) (p "Animate a pendulum:") (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody (tr (td (span ((class "RktMeta")) "#lang") (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (a ((class "RktModLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/index.html")) (span ((class "RktSym")) "racket")) (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta")) 160))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "require") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "2htdp/image") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "2htdp/universe") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta")) 160))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "pendulum") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "accel") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) 952) (span ((class "RktPn")) ")") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (span ((class "nobreak")) "-")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "sin") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) 952) (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) 952) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "/") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "pi") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "2.5") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) 952 8242) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "0") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) 952 8242 8242) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "accel") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "/") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "pi") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "2.5") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "x") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) 952) (span ((class "RktPn")) ")") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "+") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "200") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "*") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "150") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "sin") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) 952) (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "y") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) 952) (span ((class "RktPn")) ")") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "*") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "150") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cos") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) 952) (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) 955) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "n") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "p-image") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "underlay/xy") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "add-line") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "empty-scene") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "400") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "200") (span ((class "RktPn")) ")") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "200") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "0") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "x") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) 952) (span ((class "RktPn")) ")") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "y") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) 952) (span ((class "RktPn")) ")") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "\"black\"") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (span ((class "nobreak")) "-")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "x") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) 952) (span ((class "RktPn")) ")") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "5") (span ((class "RktPn")) ")") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (span ((class "nobreak")) "-")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "y") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) 952) (span ((class "RktPn")) ")") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "5") (span ((class "RktPn")) ")") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "circle") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "5") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "\"solid\"") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "\"blue\"") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "set!") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) 952) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "+") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) 952) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "*") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) 952 8242) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "0.04") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "set!") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) 952 8242) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "+") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) 952 8242) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "*") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "accel") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) 952) (span ((class "RktPn")) ")") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "0.04") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "p-image") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta")) 160))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "animate") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "pendulum") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n"))) (p "Jensen" rsquo "s Device:") (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody (tr (td (span ((class "RktMeta")) "#lang") (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (font ((class "badlink")) (span ((class "RktModLink")) (span ((class "RktSym")) "algol60"))) (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "RktMeta")) "begin") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "integer") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "i") (span ((class "RktMeta")) ";"))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "real") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "procedure") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "sum") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "(") (span ((class "RktSym")) "i") (span ((class "RktMeta")) ",") (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "lo") (span ((class "RktMeta")) ",") (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "hi") (span ((class "RktMeta")) ",") (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "term") (span ((class "RktMeta")) ")") (span ((class "RktMeta")) ";") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "value") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "lo") (span ((class "RktMeta")) ",") (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "hi") (span ((class "RktMeta")) ";"))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "integer") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "i,") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "lo,") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "hi;") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "real") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "term;") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "comment") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "term") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "is") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "passed") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "by-name,") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "and") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "so") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "is") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "i;") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "begin") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "real") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "temp") (span ((class "RktMeta")) ";"))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "temp") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) ":=") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "0;") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "for") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "i") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) ":=") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "lo") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "step") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "1") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "until") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "hi") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "do") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "temp") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) ":=") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "temp") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "+") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "term") (span ((class "RktMeta")) ";"))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "sum") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) ":=") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "temp") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "end;") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "comment") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "note") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "the") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "correspondence") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "between") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "the") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "mathematical") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "notation") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "and") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "the") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "call") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "to") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "sum;") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "printnln") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "(") (span ((class "RktSym")) "sum") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "(") (span ((class "RktSym")) "i") (span ((class "RktMeta")) ",") (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "1,") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "100,") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) "1/i") (span ((class "RktMeta")) ")") (span ((class "RktMeta")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "RktMeta")) "end") (span ((class "RktMeta"))))) "\n"))) (p "Thanks to all of the people who have contributed solutions so far!")) (link ((href "http://blog.racket-lang.org/feeds/5066620541424773352/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=5066620541424773352") (rel "replies") (title "1 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/5066620541424773352") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/5066620541424773352") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2013/03/200_25.html") (rel "alternate") (title "200!") (type "text/html"))) (author (name "Asumu Takikawa") (uri "https://www.blogger.com/profile/03651024646695210136") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (media:thumbnail ((height "72") (url "http://lh5.googleusercontent.com/-wzQ9KP28_PA/UVB3M5oR4XI/AAAAAAAAAHc/cS6_p0S_P8Q/s72-c/7890006789e3741ef5c9.png") (width "72") (xmlns:media "http://search.yahoo.com/mrss/"))) (thr:total "1")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4397120307418153629") (published "2013-02-15T15:51:00.003-05:00") (updated "2013-02-15T15:51:56.525-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Racket v5.3.3") (post-content "Racket version 5.3.3 is now available from\n" (pre (a ((href "http://racket-lang.org/")) "http://racket-lang.org/")) "\n" (p "\n    This is a bug-fix release to address a flaw in DrRacket v5.3.2\n    concerning interactions between the contour window and the syntax\n    coloring.\n") "\n") (link ((href "http://blog.racket-lang.org/feeds/4397120307418153629/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=4397120307418153629") (rel "replies") (title "1 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/4397120307418153629") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/4397120307418153629") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2013/02/racket-v533.html") (rel "alternate") (title "<a href=\"http://racket-lang.org\">Racket v5.3.3</a>") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://plus.google.com/115730576737402335315") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh5.googleusercontent.com/-eR9w2qhxsD0/AAAAAAAAAAI/AAAAAAAACa4/EbnrYldgv28/s32-c/photo.jpg") (width "32")))) (thr:total "1")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4538859147764330325") (published "2013-01-31T23:19:00.000-05:00") (updated "2013-01-31T23:19:20.087-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Racket v5.3.2") (post-content "Racket version 5.3.2 is now available from\n" (pre (a ((href "http://racket-lang.org/")) "http://racket-lang.org/")) "\n" (h2 "Core Libraries:") "\n" (ul "\n" (li "The new " (tt "math") " library provides functions and data structures for working with numbers and collections of numbers.  Functions include non-elementary (such as gamma, zeta, Lambert's W), number-theoretic (factorization, modular arithmetic), linear algebra (arithmetic, decompositions), and statistical (expected values, order statistics, binning).  Data structures include arbitrary-precision bigfloats, probability distributions, and multidimensional arrays.") "\n" (li "The new " (tt "file/untar") ", " (tt "file/untgz") ", and " (tt "file/unzip") " libraries support unpacking widely used archive formats.") "\n" (li "The new " (tt "lazy-require") " form allows programs to delay the loading and instantiation of helper modules until they are needed.") "\n" (li "The new " (tt "data/bit-vector") " library provides an implementation of bit vectors (a mutable sequence of booleans) supporting popcount.") "\n" (li "The " (tt "racket/generic") " library allows the specification of default method implementations for core datatypes.") "\n" (li "The " (tt "openssl") " library can verify hostnames and use the operating system's certificate store to verify certificates.") "\n") "\n" (h2 "Package System:") "\n" (ul "\n" (li "A new package system is in beta release.  This system will become Planet's successor.  It differs significantly from the latter.  For details, please read the documentation at " (tt (a ((href "http://docs.racket-lang.org/planet2/")) "http://docs.racket-lang.org/planet2/")) " and list your packages on the new index at " (tt (a ((href "https://pkg.racket-lang.org/")) "https://pkg.racket-lang.org/")) ".") "\n" (li "The " (tt "raco test") " command supports testing by collection and package, in addition to by directory and file, with the " (tt "-c") " and " (tt "-p") " options.") "\n") "\n" (h2 "Teaching Libraries:") "\n" (ul "\n" (li "batch-io: the read and write functions work on Unix-style standard input and output.") "\n") "\n" (h2 "DrRacket:") "\n" (ul "\n" (li "DrRacket's GUI is more responsive.") "\n" (li "The automatic parenthesis insertion mode is improved.") "\n") "\n" (h2 "Scribble:") "\n" (ul "\n" (li "Scribble renders Markdown format files via the " (tt "--markdown") " command-line flag.  Example use case: Generate documentation hosted on GitHub or BitBucket.") "\n" (li "Documentation cross-reference information is stored in an SQLite3 database, which means that SQLite3 is required for building Racket documentation on Unix/Linux machines (but SQLite3 is included in Racket distributions for Windows and Mac OS X).\n  " (br "\n  Using a database for cross-reference information significantly reduces the initial footprint of DrRacket, since DrRacket no longer needs to load all cross-reference information.")) "\n") "\n" (h2 "Typed Racket:") "\n" (ul "\n" (li "Typed Racket programs can require " (tt "plot/typed") " to draw plots. List- and vector-accepting functions accept general sequences.") "\n" (li "Typed Racket supports Racket's delimited continuation and continuation mark operators.") "\n") "\n" (h2 "Redex:") "\n" (ul "\n" (li "Added more support for " (tt "define-judgment-form") ", including random generation for well-formed judgments and visualization of judgments.") "\n") "\n" (h2 "Deprecation:") "\n" (p "The following have been removed in this release:\n" (ul "\n" (li "the " (tt "planet") " command-line tool; use " (tt "raco planet") " instead.") "\n") "\n") "\n" (p "\nThe following has been deprecated and will be removed in the August 2013 release:\n" (ul "\n" (li "the " (tt "mzlib/class100") " library; use " (tt "racket/class") " instead.") "\n") "\n") "\n") (link ((href "http://blog.racket-lang.org/feeds/4538859147764330325/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=4538859147764330325") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/4538859147764330325") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/4538859147764330325") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2013/01/racket-v532.html") (rel "alternate") (title "<a href=\"http://racket-lang.org/\">Racket v5.3.2</a>") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://plus.google.com/115730576737402335315") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh5.googleusercontent.com/-eR9w2qhxsD0/AAAAAAAAAAI/AAAAAAAACa4/EbnrYldgv28/s32-c/photo.jpg") (width "32")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-568671490592170332") (published "2012-12-22T11:03:00.001-05:00") (updated "2012-12-22T11:05:13.948-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Simple Test Coverage: A Macro with Line Numbers and Lifting") (post-content (p "Racket" rsquo "s macro system makes it easy to roll your own low-tech\nline coverage tool. In this post, I" rsquo "ll show how, in\n15 lines of code, you can implement a simple test-coverage\ntool. Using this code is simple: put " (span ((class "RktPn")) "(") (span ((class "RktSym")) "line-of-interest") (span ((class "RktPn")) ")") "\non each line that should be covered.") (p "To start the implementation, we put the code in a module and define two sets:") (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody (tr (td (a ((class "RktModLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/guide/Module_Syntax.html#%28part._hash-lang%29")) (span ((class "RktMod")) "#lang")) (span ((class "hspace")) nbsp) (a ((class "RktModLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/reference/index.html")) (span ((class "RktSym")) "racket")))) (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "candidate-lines") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "set") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "touched-lines") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "set") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")")))))) (p "The first set holds the line numbers where " (span ((class "RktPn")) "(") (span ((class "RktSym")) "line-of-interest") (span ((class "RktPn")) ")") "\nis written in the source and the second holds the set of line numbers\nwhere " (span ((class "RktPn")) "(") (span ((class "RktSym")) "line-of-interest") (span ((class "RktPn")) ")") " has been executed.") (p "Each use of " (span ((class "RktPn")) "(") (span ((class "RktSym")) "line-of-interest") (span ((class "RktPn")) ")") " is going to expand into a call\nto " (span ((class "RktSym")) "visited") " with the line number for the source location of that use\nof " (span ((class "RktPn")) "(") (span ((class "RktSym")) "line-of-interest") (span ((class "RktPn")) ")") ".") (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "visited") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "line") (span ((class "RktPn")) ")"))) (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "unless") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "set-member?") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "touched-lines") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "line") (span ((class "RktPn")) ")"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "set!") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "touched-lines") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "set-add") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "touched-lines") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "line") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "displayln"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "sort") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "set-" ">" "list"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "set-subtract") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "candidate-lines") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "touched-lines") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktSym")) "<") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")")))))) (p "This function simply checks to see if this line has been executed before and,\nif not, removes that line number from " (span ((class "RktSym")) "touched-lines") " and prints out\nthe current status.") (p "The interesting part of this code is in the definition of " (span ((class "RktSym")) "line-of-interest") "\nitself:") (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) "define-syntax") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "line-of-interest") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "stx") (span ((class "RktPn")) ")"))) (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "with-syntax") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktSym")) "line") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "syntax-line") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "stx") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "syntax-local-lift-expression"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktRdr")) "#'") (span ((class "RktPn")) "(") (span ((class "RktSym")) "set!") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "candidate-lines") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "set-add") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "candidate-lines") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "line") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktRdr")) "#'") (span ((class "RktPn")) "(") (span ((class "RktSym")) "visited") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "line") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")")))))) (p "The macro first extracts the line number from " (span ((class "RktSym")) "stx") ", which gives the\nsource location for the use of " (span ((class "RktPn")) "(") (span ((class "RktSym")) "line-of-interest") (span ((class "RktPn")) ")") ". This number is\nthen bound to " (span ((class "RktSym")) "line") " for use in building later syntax objects.\nThen the macro calls " (span ((class "RktSym")) "syntax-local-lift-expression") " with a syntax object\nthat updates " (span ((class "RktSym")) "candidate-lines") ". Expressions passed to\n" (span ((class "RktSym")) "syntax-local-lift-expression") "\nare lifted to the top-level of the enclosing module making sure that,\nin this case, each line number is added exactly once without having to execute the code\nwhere " (span ((class "RktPn")) "(") (span ((class "RktSym")) "line-of-interest") (span ((class "RktPn")) ")") " appears. The macro then discards the result of\n" (span ((class "RktSym")) "syntax-local-lift-expression") " and returns a call to the " (span ((class "RktSym")) "visited") " function.\nThat" rsquo "s all there is to it!") (p "I originally used this macro to test some changes to DrRacket. I was working on a\nset of complex GUI interactions and kept losing track of which ones had been tested\nand which ones hadn" rsquo "t. Here" rsquo "s a simpler program in the same spirit so you can try it out.") (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody (tr (td (a ((class "RktModLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/guide/Module_Syntax.html#%28part._hash-lang%29")) (span ((class "RktMod")) "#lang")) (span ((class "hspace")) nbsp) (a ((class "RktModLink") (data-pltdoc "x") (href "http://doc.racket-lang.org/gui/index.html")) (span ((class "RktSym")) "racket/gui")))) (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "candidate-lines") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "set") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "touched-lines") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "set") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "visited") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "line") (span ((class "RktPn")) ")"))) (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "unless") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "set-member?") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "touched-lines") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "line") (span ((class "RktPn")) ")"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "set!") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "touched-lines") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "set-add") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "touched-lines") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "line") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "displayln"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "sort") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "set-" ">" "list"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "set-subtract") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "candidate-lines") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "touched-lines") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktSym")) "<") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) "define-syntax") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "line-of-interest") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "stx") (span ((class "RktPn")) ")"))) (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "with-syntax") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktSym")) "line") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "syntax-line") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "stx") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "syntax-local-lift-expression"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktRdr")) "#'") (span ((class "RktPn")) "(") (span ((class "RktSym")) "set!") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "candidate-lines") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "set-add") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "candidate-lines") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "line") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktRdr")) "#'") (span ((class "RktPn")) "(") (span ((class "RktSym")) "visited") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "line") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) (tr (td (span ((class "hspace")) nbsp))) (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "f") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "new") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "frame%") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "label") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "\"\"") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) (tr (td (span ((class "hspace")) nbsp))) (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b1") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "new") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "button%"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "label") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "\"1\"") (span ((class "RktPn")) "]"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "parent") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "f") (span ((class "RktPn")) "]"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "callback"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) 955) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b") (span ((class "RktPn")) ")"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "case") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "random") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "3") (span ((class "RktPn")) ")"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktVal")) "0") (span ((class "RktPn")) ")"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "line-of-interest") (span ((class "RktPn")) ")"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "send") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b1") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "set-label") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "\"one\"") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktVal")) "1") (span ((class "RktPn")) ")"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "line-of-interest") (span ((class "RktPn")) ")"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "send") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b1") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "set-label") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "\"uno\"") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktVal")) "2") (span ((class "RktPn")) ")"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "line-of-interest") (span ((class "RktPn")) ")"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "send") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b1") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "set-label") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "\"" 19968 "\"") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) (tr (td (span ((class "hspace")) nbsp))) (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b2") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "new") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "button%"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "label") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "\"2\"") (span ((class "RktPn")) "]"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "parent") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "f") (span ((class "RktPn")) "]"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "callback"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) 955) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b") (span ((class "RktPn")) ")"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "case") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "random") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "3") (span ((class "RktPn")) ")"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktVal")) "0") (span ((class "RktPn")) ")"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "line-of-interest") (span ((class "RktPn")) ")"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "send") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b2") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "set-label") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "\"two\"") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktVal")) "1") (span ((class "RktPn")) ")"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "line-of-interest") (span ((class "RktPn")) ")"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "send") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b2") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "set-label") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "\"dos\"") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktVal")) "2") (span ((class "RktPn")) ")"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "line-of-interest") (span ((class "RktPn")) ")"))) (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "send") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b2") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "set-label") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "\"" 20108 "\"") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) "send") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "f") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "show") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "#t") (span ((class "RktPn")) ")"))))))) (link ((href "http://blog.racket-lang.org/feeds/568671490592170332/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=568671490592170332") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/568671490592170332") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/568671490592170332") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/12/simple-test-coverage-macro-with-line.html") (rel "alternate") (title "Simple Test Coverage: A Macro with Line Numbers and Lifting") (type "text/html"))) (author (name "Robby Findler") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6691486104646166484") (published "2012-11-25T17:02:00.001-05:00") (updated "2012-12-13T20:13:13.917-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Tutorial: Contributing to Racket") (post-content (em "Originally posted on " (a ((href "http://jpolitz.github.com/blog/2012/11/21/racket-contributing-tutorial.html")) "jpolitz.github.com") ".") (br) "\n" (br) "\nI've been a longtime user and sometimes fanboy of " (a ((href "http://racket-lang.org/")) "Racket") ", but aside from a few bug reports, before this week I hadn't contributed anything back to the language.  This week, I started using a little helper macro, which wasn't in the core utils, to make some of my testing easier.  I" nbsp "mentioned it to the super-friendly Racket community, they told me they liked it, and my pull request was merged within about 12 hours." (br) "\n" (br) "\nI've been using Racket for a while, so I knew roughly where to look" nbsp "to put my code, tests, and documentation.  A newer user might not know," nbsp "so this post outlines, in some detail, the steps I went through to put" nbsp "together a tiny feature extension for Racket.  " (br) "\n" (br) "\n" (br) "\n" (h3 "A Tiny Feature") (br) "\nI'm dabbling in the implementation of a " (a ((href "http://github.com/brownplt/pyret-lang")) "small scripting language called Pyret") " to study features of scripting objects.  The language has a parser, which generates AST nodes.  The nodes keep track of their location in the original program for error reporting, unbound identifier reporting, and the like.  I wanted to write some test cases for our" (br) "\nparser, which generates things like:" (br) "\n" (br) "\n" (br) "\n" (pre ">" " (parse \"o.x\")\n(s-block (srcloc \"parse-tests.rkt\" 1 0 #f #f)\n         (list (s-dot\n                (srcloc \"parse-tests.rkt\" 1 0 #f #f)\n                (s-id (srcloc \"parse-tests.rkt\" 1 0 #f #f) 'o)\n                'x)))\n") (br) "\nA ton of detail is in the output keeping track of line number information.  But I don't want to have to type out the line numbers and get them right for each test.  I'd like to write:" (br) "\n" (br) "\n" (br) "\n" (pre "(check-match (parse \"o.x\")\n(s-block _ (list (s-dot _ (s-id _ 'o) 'x))))\n") (br) "\nWhich checks that all the things I care about for the parse are true: the program parses to a block of code, with a single statement, which is a dot expression of the identifier " (code "o") " and the symbol " (code "x") ".  With a little help from " (a ((href "http://www.jonahkagan.me/")) "Jonah Kagan") ", I produced a macro that does exactly that, and works nicely with " (a ((href "http://docs.racket-lang.org/rackunit/api.html")) "RackUnit") ", Racket's unit-testing framework (" (a ((href "https://github.com/brownplt/pyret-lang/blob/master/src/tests/parse-tests.rkt#L36")) "see it in action") ", with a slightly different name)." (br) "\n" (br) "\nI thought " (code "check-match") " was pretty useful, and figured I'd see if the Racket folks at large would agree.  I " (a ((href "http://www.mail-archive.com/dev@racket-lang.org/msg07427.html")) "wrote a message") " to the Racket mailing list, figuring someone might think it was neat.  There was some " (a ((href "http://www.mail-archive.com/dev@racket-lang.org/msg07429.html")) "immediate") " " (a ((href "http://www.mail-archive.com/dev@racket-lang.org/msg07430.html")) "positive") " " (a ((href "http://www.mail-archive.com/dev@racket-lang.org/msg07428.html")) "feedback") ", so I decided to go ahead and try to add it." (br) "\n" (br) "\n" (br) "\n" (h3 "Getting and Extending Racket") (br) "\n" (a ((href "http://github.com/plt/racket")) "Racket's repo") " is hosted on Github.  The easiest way to contribute is to " (a ((href "https://help.github.com/articles/fork-a-repo")) "fork it") ", and then check out your own copy.  The check-out and build process is fairly standard; you should, however, make a directory called " (code "build/") " to hold the binaries that will be created:" (br) "\n" (br) "\n" (pre "$ git clone git://github.com/" "<" "your-username" ">" "/racket.git\n$ cd racket/src\n$ mkdir build\n$ cd build\n$ ../configure\n$ make\n$ make install\n") (br) "\nThis takes about 20-30 minutes, and installs all the necessary Racket binaries locally in place (no " (code "sudo") " or anything needed)." (br) "\n" (br) "\nNext up was to find RackUnit and the code I'd need to extend." (br) "\n" (br) "\nMost of what goes on in Racket's core utilities happens in " (em "collections") ", found in the " (code "collects/") " directory of the base directory of the checkout.  For my implementation, I'd be looking at " (code "collects/rackunit") "." (br) "\n" (br) "\nI want to implement a new kind of " (code "check") ", so let's find that in RackUnit.  Here's what the RackUnit directory looks like:" (br) "\n" (br) "\n" (pre "$ ls collects/rackunit/\ncompiled           gui.rkt   main.rkt  scribblings  tool.rkt\ndocs-complete.rkt  info.rkt  private   text-ui.rkt\n") (br) "\nThe " (code "private/") " directory contains most of the internals of the built-in collections' behavior, so let's look at that:" (br) "\n" (br) "\n" (pre "$ ls collects/rackunit/private/\nbase.rkt        counter.rkt     location.rkt        test-case.rkt\ncheck-info.rkt  format.rkt      monad.rkt           test.rkt\ncheck.rkt       gui             name-collector.rkt  test-suite.rkt\ncompiled        hash-monad.rkt  result.rkt          text-ui-util.rkt\n") (br) "\nWell, " (code "check.rkt") " seems awfully promising.  It defines all of the checks that you can see in the RackUnit docs:" (br) "\n" (br) "\n" (pre "(provide ...\n         check-eq?\n         check-eqv?\n         check-equal?\n         check-=\n         ...)\n\n(define-binary-check (check-eq? eq? expr1 expr2))\n\n(define-binary-check (check-eqv? eqv? expr1 expr2))\n\n(define-binary-check (check-equal? expr1 expr2)\n  (equal? expr1 expr2))\n\n(define-simple-check (check-= expr1 expr2 epsilon)\n  (" (|| " (magnitude (- expr1 expr2)) epsilon))\n\n...\n")) "\nBut before I go sticking my code in there willy-nilly, it's important to realize there are three things that need to go with a commit like this:\n\n" (ul (li "Tests") "\n" (li "Implementation") "\n" (li "Documentation") "\n") (p "We'll build up our commit in those stages.") "\n" (h3 "Adding Tests") "\nFirst, I need to know how I'm going to test this to make sure I don't screw anything up with my edits.  There's actually a whole collection for tests in " (code "collects/tests/") ", which includes a rackunit subdirectory.  Conveniently, this has been further divided into files that correspond to the files from the RackUnit collection itself:\n\n\n" (pre "$ ls collects/tests/rackunit/\nall-rackunit-tests.rkt  monad-test.rkt                \nbase-test.rkt           pr10950.rkt                   \ncheck-info-test.rkt     result-test.rkt               \ncheck-test.rkt          run-tests.rkt                 \ncounter-test.rkt        standalone-check-test.rkt     \nformat-test.rkt         standalone.rkt                \nhash-monad-test.rkt     standalone-test-case-test.rkt\nlocation-test.rkt       test-case-test.rkt\n") "So, we can add a few expected uses to " (code "check-test.rkt") ", which will be tested against the implementation.  I found the end of the check-tests, and inserted some simple test cases there, using the existing style of the file:\n\n" (pre "...\n   ;; existing tests\n   (test-case \"Use of check as expression\"\n              (for-each check-false '(#f #f #f)))\n   (test-case \"Use of local check as expression\"\n              (let ()\n                (define-simple-check (check-symbol? x)\n                  (symbol? x))\n                (for-each check-symbol? '(a b c))))\n   ;; my added tests\n   (test-case \"Trivial check-match test\"\n              (check-match \"dirigible\" _))\n\n   (test-case \"Simple check-match test\"\n              (check-match (list 1 2 3) (list _ _ 3)))\n\n   (test-case \"check-match with a nested struct\"\n              (let ()\n                (struct data (f1 f2 f3))\n                (check-match (data 1 2 (data 1 2 3))\n                             (data _ 2 (data _ _ _)))))\n\n") (h3 "Implementation and Running Tests") "\nWith the tests written, it's safe to go back and add my implementation to " (code "check.rkt") ", since I'll know if I've succeeded or not via these tests.  I added my implementation there, with some comment caveats about how " (code "check-match") " differs from other checks:\n\n" (pre ";; NOTE(jpolitz): This match form isn't eager like the others, hence\n;; the define-syntax and the need to carry around location information\n(define-syntax (check-match stx)\n  (syntax-case stx ()\n   ((_ actual expected pred)\n     ;;... implementation here ...\n   )))\n") "The actual implementation of " (code "check-match") " is turns the pieces into an instance of " (code "match") " that yields true or false depending on if the value was matched.  Here's the essence:\n\n" (pre "(define-syntax check-match\n  (syntax-rules ()\n    [(_ actual expected pred)\n     (let ([actual-val actual])\n      (check-true (match actual-val\n                   [expected pred]\n                   [_ #f])))))]\n    [(_ actual expected)\n     (check-match actual expected #t)]))\n") "In reality, this gives lousy error reporting, so the " (a ((href "https://github.com/plt/racket/blob/e264e4148884f0675bd21e889525ccb7239eb4b4/collects/rackunit/private/check.rkt#L286")) "actual implementation") " leverages the helpful " (a ((href "http://docs.racket-lang.org/rackunit/api.html#(form._((lib._rackunit/main..rkt)._with-check-info))")) "with-check-info") " form to populate the test with reporting information for failures.\n\nWith the implementation in place, it's time to run the tests, and figure out if what I did broke anything.  To run a particular test suite, Racket provides a tool called " (code "raco") " that was built by the " (code "make install") " above. To run our tests, we do (from the base " (code "racket/") " directory):\n\n" (pre "$ ./bin/raco test collects/tests/rackunit\n") "I iterated through this a few times to suss out all the minor bugs in what I'd written.  I also wanted to check that my tests were actually adding to the count, so I compared to the version without my changes by doing:\n\n" (pre "$ git stash\n# stores my edits temporarily in git's stash\n$ ./bin/raco test collects/tests/rackunit\n# Output including \"120 tests passed, 0 tests failed\"\n$ git stash apply\n# re-applies my edits\n$ ./bin/raco test collects/tests/rackunit\n# Output including \"127 tests passed, 0 tests failed\", which seems good,\n# since I wrote 7 new tests\n") (p "So, I'm happy with my implementation.  All that's left is to write something down about this feature that others will be able to find it and use it in the future.") "\n" (h3 "Adding Documentation") "\nRacket uses a tool called " (a ((href "http://docs.racket-lang.org/scribble/index.html")) "Scribble") " for documentation, and by convention, a collection's documentation is stored in the " (code "scribblings/") " subdirectory of the collection:\n\n" (pre "$ ls collects/rackunit/scribblings/\nacknowledgements.scrbl  control-flow.scrbl  philosophy.scrbl\napi.scrbl               file.rkt            quick-start.scrbl\nbase.rkt                file-test.rkt       rackunit.scrbl\ncheck.scrbl             internals.scrbl     release-notes.scrbl\ncompiled                misc.scrbl          ui.scrbl\ncompound-testing.scrbl  overview.scrbl      utils.scrbl\n") "Keeping with the theme, we'll be editing " (code "check.scrbl") " which is the file that's used to generate " (a ((href "http://docs.racket-lang.org/rackunit/api.html#(part._.Checks)")) "this section") " of the RackUnit documentation.\n\nReading over the existing docs, I notice that our new feature is violating one of the principles of the existing documentation:\n\n\n" (blockquote "Although checks are implemented as macros, which is necessary to grab source location, they are conceptually functions.  This means, for instance, checks always evaluate their arguments.\n") "Based on " (a ((href "http://www.mail-archive.com/dev@racket-lang.org/msg07435.html")) "Robby's recommendation") " (the mailing list is helpful and responsive again!) I simply added a caveat \"(with the exception of @racket[check-match] below)\", and moved on to adding actual documentation for " (code "check-match") ".\n\nScribble does two very cool things when documenting definitions. First, it has explicit syntax for telling the documentation system that you're introducing a new identifier that should be indexed and linkable. Second, it lets you write Racket code examples directly into the documentation, and even runs them and renders their results inline into the documenation.  Here's a snippet of what I add:\n\n" (pre "@defform*[((check-match v pattern)\n           (check-match v pattern pred))]{\n\nA check that pattern matches on the test value.  Matches the test value\n@racket[v] against @racket[pattern] as a @racket[match] clause.  If no\n@racket[pred] is provided, then if the match succeeds, the entire check\nsucceeds.  For example, this use succeeds:\n\n@interaction[#:eval rackunit-eval\n  (check-match (list 1 2 3) (list _ _ 3))\n]\n\nThis check fails to match:\n\n@interaction[#:eval rackunit-eval\n  (check-match (list 1 2 3) (list _ _ 4))\n]\n") "There are a few things going on here:\n\n" (ul (li (code "@defform") " tells Scribble that this is a new syntactic form that should be indexed. Scribble figures out the the name is " (code "check-match") ", and adds links for it to the table of contents and enters it in the search index." (br) "\n") "\n" (li (code "@racket[v]") " tells Scribble to render " (code "v") " as Racket code, and Scribble is also smart enough to know that " (code "v") " is the same " (code "v") " in the definition, and creates a back link for it." (br) "\n") "\n" (li (code "@interaction[#:eval rackunit-eval ... ]") " blocks indicate expressions that should be run, with their output rendered after them.  This makes for beautiful docs with examples inline to show users exactly what their getting.") "\n") "To build the docs, we run:\n\n\n" (pre "$ ./bin/raco setup collects/rackunit\n") (p "Then, the docs will appear in the local documentation directory.  I can then open them up in a web browser and see the results (note the local url ending api.html; that's the local path to the documentation that's been installed):") "\n" (div ((class "separator") (style "clear: both; text-align: center;")) (a ((href "http://2.bp.blogspot.com/-BJnmqFzLB0k/ULKKZHaJqDI/AAAAAAAAAhI/I52K07Zg-nI/s1600/check-match-docs.png") (imageanchor "1") (style "margin-left:1em; margin-right:1em")) (img ((border "0") (height "359") (src "http://2.bp.blogspot.com/-BJnmqFzLB0k/ULKKZHaJqDI/AAAAAAAAAhI/I52K07Zg-nI/s400/check-match-docs.png") (width "400"))))) "\n\n" (p "Looks good!") "\n" (h3 "Letting Racketeers Know") "\nI packaged everything up in a " (a ((href "https://github.com/jpolitz/racket/commit/023d2278c1bb9819451790d774ae8e67a5d46f22")) "single commit") ", and sent the whole thing off to the Racket folks with a " (a ((href "https://github.com/plt/racket/pull/171")) "pull request") ".  They then reviewed it and incorporated it into " (a ((href "https://github.com/plt/racket/commit/e264e4148884f0675bd21e889525ccb7239eb4b4")) "their HEAD") " the next day.\n\n\nThe Racket folks maintain a list of " (a ((href "https://github.com/plt/racket/wiki/Intro-Projects")) "Intro Projects") ", so there's easy places to start if you want to follow this tutorial and get involved!") (link ((href "http://blog.racket-lang.org/feeds/6691486104646166484/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=6691486104646166484") (rel "replies") (title "1 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/6691486104646166484") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/6691486104646166484") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/11/tutorial-contributing-to-racket.html") (rel "alternate") (title "Tutorial: Contributing to Racket") (type "text/html"))) (author (name "Joe Gibbs Politz") (uri "https://www.blogger.com/profile/03244595189168165815") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (media:thumbnail ((height "72") (url "http://2.bp.blogspot.com/-BJnmqFzLB0k/ULKKZHaJqDI/AAAAAAAAAhI/I52K07Zg-nI/s72-c/check-match-docs.png") (width "72") (xmlns:media "http://search.yahoo.com/mrss/"))) (thr:total "1")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6990759196656319841") (published "2012-11-23T11:40:00.001-05:00") (updated "2012-11-23T11:40:28.117-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Roman Numerals in Racket Sources") (post-content "The other day, while discussing Church numerals in class, I pointed out that Racket could support Roman numeral in source programs. The essence of the idea is that, whenever an unbound identifier matches the syntax of a Roman numeral, it is automatically converted into the corresponding number." (br) "\n" (br) "\nThe implementation of this is " (a ((href "https://github.com/shriram/roman-numerals")) "here") ". The " (a ((href "https://github.com/shriram/roman-numerals/blob/master/test-client.rkt")) "test client") " best illustrates this in action.  For instance, here is a valid test case:" (br) "\n" (pre "(define (square x) (* x x))\n(check-equal? (square X) C)\n") "The essence of the implementation is just this macro:" (br) "\n" (pre "(define-syntax (handle-id stx)\n  (syntax-case stx ()\n    [(_ . any)\n     (let ([str (symbol->string (syntax->datum #'any))])\n       (if (roman-string? str)\n           (with-syntax [(n (datum->syntax stx (roman->number str)))]\n             #'(#%datum . n))\n           #'(#%top . any)))]))\n")) (link ((href "http://blog.racket-lang.org/feeds/6990759196656319841/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=6990759196656319841") (rel "replies") (title "2 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/6990759196656319841") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/6990759196656319841") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/11/roman-numerals-in-racket-sources.html") (rel "alternate") (title "Roman Numerals in Racket Sources") (type "text/html"))) (author (name "Shriram Krishnamurthi") (uri "https://www.blogger.com/profile/02956763366608000839") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "2")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6058216596377504471") (published "2012-11-15T00:26:00.000-05:00") (updated "2012-11-16T08:29:22.116-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "DrRacket, now more responsive") (post-content "DrRacket is now more responsive when editing\nthan the 5.3.1 release. How much more?\nWell, I ran a script that starts up DrRacket,\nopens " (span ((class "stt")) "class-internal.rkt") " from the distribution\nand puts the insertion point right before the first\n" (span ((class "RktInBG")) (span ((class "hspace"))) (span ((class "RktIn")) "\"") (span ((class "hspace")))) " character. It then repeats these three steps 10 times:\nfirst it types " (span ((class "RktInBG")) (span ((class "hspace"))) (span ((class "RktIn")) "fdjafjdklafjkdalsfjdaklfjdkaslfdjafjdklafjkdalsfjdaklfjdkasl") (span ((class "hspace")))) "\nas fast as it can, then it types the same number of backspaces. Next it type " (span ((class "RktInBG")) (span ((class "hspace"))) (span ((class "RktIn")) "\"a") (span ((class "hspace")))) " and\nwaits for the syntax colorer to finish adjusting the colors. Then it deletes\nthose two (again with two backspaces) finally waits for background check syntax to complete." (br) "\nThe script also measures the number of wall-clock milliseconds that the handling\nof each event took and here are the results:" (br) "\n" (br) "\n" (img ((alt "image") (src "http://lh5.googleusercontent.com/-ACBgBC-jpe8/UKR7AvnWmWI/AAAAAAAAARc/ap0Un_7gNQ0/5609aa04f51ef6d9a706.png"))) (br) "\n" (br) "\nEach vertical barâs hight is proportional to the percentage of the events\nthat took at least the corresponding number of milliseconds. The red bars\nshow how well version 5.3.1âs DrRacket does, and the blue shows how the\ncurrent git head fares (as of " (a ((href "http://git.racket-lang.org/plt/commit/a4d440a5")) (span ((class "url")) "http://git.racket-lang.org/plt/commit/a4d440a5")) ")." (br) "\n" (br) "\nAs you can see, about 80% of the events took less than 26 milliseconds to complete\nin the current version, but more like 60 milliseconds in 5.3.1. As some sense\nof scale, a television refreshes its screen every 16 2/3s millseconds, so if\nall of the events took less than that then DrRacket would feel very\nresponsive indeed." (br) "\n" (h3 "\n" (a ((href "http://www.blogger.com/blogger.g?blogID=2080885971644496896") (name "(part._.How_)"))) "How?") "\nThe key to finding all of the performance improvements was\nfinding something to measure. It sounds simple (and indeed,\nit didnât take long to do), but\nonce I had that, it because relatively easy to find suspiciously\nslow events, to sort out what they were doing and to speed\nthem up. (Thanks to\n" (a ((href "http://www.cs.utah.edu/~mflatt/")) "Matthew") "\nfor this excellent advice!)" (br) "\n" (br) "\nSpecifically, I added a bunch of logging to various\nparts of " (a ((class "RktModLink") (href "http://doc.racket-lang.org/gui/index.html") (pltdoc "x")) (span ((class "RktSym")) "racket/gui")) ", " (a ((class "RktModLink") (href "http://doc.racket-lang.org/framework/index.html") (pltdoc "x")) (span ((class "RktSym")) "framework")) ",\nand DrRacket itself. For example, the graphs above are generated from logging\ninformation about how long events take to be handled." (br) "\n" (br) "\nSome of the problems were stupid things, e.g.,\n" (a ((href "http://git.racket-lang.org/plt/commit/4421e227ffa")) "there was one place") "\nwhere DrRacket was overriding a callback that happened on each keystroke\nthat would invalidate the entire visible region of the editor. This\nforced the entire buffer to be redrawn on each keystroke, making\nDrRacketâs sluggishness proportional to the size of the definitions\nwindow(!)." (br) "\n" (br) "\nThe performance graph above was recorded a smallish window, namely maximzed\non my laptop: 1365x740. A bigger window doesnât change the blue bars, but hereâs\nhow a 1102x1174 changes the red ones:" (br) "\n" (br) "\n" nbsp "\n" (img ((alt "image") (src "http://lh6.googleusercontent.com/-0FXltpFq_Xk/UKR7BXNYlFI/AAAAAAAAARk/Ku9MAoGuHZU/f7703cae54d646e1b2de.png"))) (br) "\n" (br) "\nThere were two more complex fixes. First: background check syntax.\nIt runs mostly in a separate, parallel place and thus\n(on a multi-core machine) doesnât interfere with DrRacketâs editing all. The last phase,\nhowever, is to communicate the results of check syntax back and that has\nto update state on the GUI and thus competes with the handling of callbacks.\nThis communication breaks up the check syntax information into chunks\nand installs that information one chunk at a time, so as to avoid\ntying up the event handling thread for too long.\nThanks to some logging, I found that some of the chunks were too large\nand was able to split them up into smaller chunks." (br) "\n" (br) "\nThe most complex change was in the syntax colorer. It used to use a co-routine\nthat would parse part of the buffer, suspend the co-routine, color the part it parsed,\nand then yield control back to handle other events.\nUnfortunately, the coroutine would\ncommonly run for 10 or 15 milliseconds, but then build up 30 or 40 milliseconds worth\nof work to do to color the buffer. The fix to the colorer was to eliminate the co-routine\nand interleave the coloring and the parsing, meaning the whole process now has\nfiner granularity, and thus is able to be interrupted more frequently and\nmore accurately." (br) "\n" (h3 "\n" (a ((href "http://www.blogger.com/blogger.g?blogID=2080885971644496896") (name "(part._.Not_done_yet)"))) "Not done yet") "\nThere is still a lot more to do. Editing scribble files\nis less responsive and the contour window definitely still makes\nDrRacket sluggish. Yesterday I was able to get DrRacket\nin a state that brought back some sluggishness and I donât know how\nI did that (restarting DrRacket got rid of the problem, unfortunately).\nI also think I need to look more closely and what happens when\npurple search bubbles are visible. An interactive GC would probably\nalso help." (br) "\n" (br) "\nIf you spot some way to make DrRacket feel more sluggish than it should be,\nplease let me know!") (link ((href "http://blog.racket-lang.org/feeds/6058216596377504471/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=6058216596377504471") (rel "replies") (title "3 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/6058216596377504471") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/6058216596377504471") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/11/drracket-now-more-responsive_15.html") (rel "alternate") (title "DrRacket, now more responsive") (type "text/html"))) (author (name "Robby Findler") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (media:thumbnail ((height "72") (url "http://lh5.googleusercontent.com/-ACBgBC-jpe8/UKR7AvnWmWI/AAAAAAAAARc/ap0Un_7gNQ0/s72-c/5609aa04f51ef6d9a706.png") (width "72") (xmlns:media "http://search.yahoo.com/mrss/"))) (thr:total "3")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5330446382626738029") (published "2012-11-13T11:52:00.000-05:00") (updated "2012-11-13T17:01:48.274-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Contracts for object-oriented programming") (post-content "Contracts are a key tool for writing robust Racket programs. They make it possible to write expressive dynamic checks using the full power of the language. Even better, they provide " (span ((style "font-style: italic;")) "blame") " information that helps pinpoint where faults occur in the program." (br) "\n" (br) "\nRacket provides the " (span ((class "RktSym")) "racket/class") " library, which allows you to program in an object-oriented style with classes, mixins, and traits. Naturally, we would like to have the full power of contracts available for object-oriented programming as well. To that end, " (span ((class "RktSym")) "racket/class") " provides " (span ((style "font-style: italic;")) "class contract") " combinators that work well for protecting classes and mixins." (br) "\n" (br) "\nThe " (span ((class "RktSym")) "racket/class") " library also comes with Java-style interfaces. Sometimes, you want to build in contract checking for all classes that implement some particular " (span ((style "font-style: italic;")) "interface") " instead of designing your contracts class-by-class. In Racket 5.3 and on, you can do this with our new " (span ((style "font-style: italic;")) "interface contracts") "." (br) "\n" (br) "\nThe rest of the article provides a short introduction to class and interface contracts. " (br) "\n" (a ((name "more"))) (h3 (a ((href "http://www.blogger.com/blogger.g?blogID=2080885971644496896") (name "(part._.Class_contracts)"))) "Class contracts") "First, weâll look at simple uses of class contracts. Our running example will be designing classes for use in an aquatic game involving fish. If you are following along in a REPL, you will need to " (span ((class "RktPn")) "(") (span ((class "RktSym")) "require") (span ((class "stt")) " ") (span ((class "RktSym")) "slideshow/pict") (span ((class "RktPn")) ")") ". We can define a simple fish class:" (br) "\n" (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "fish%"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "class") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "object%"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "super-new") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "init-field") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "weight") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1") (span ((class "RktPn")) "]") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "color") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "\"sky blue\"") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "eat the given food object"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define/public") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "eat") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "edible") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "nutrition") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "send") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "edible") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "eaten") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "grow") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "nutrition") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "gain weight according to nutrition"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define/private") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "grow") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "nutrition") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "set!") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "weight") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "+") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "nutrition") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "weight") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "produce a pict of this fish"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define/public") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "draw") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "standard-fish") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "80") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "*") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "weight") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "40") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "#:color") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "color") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")))) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "send") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "new") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "fish%") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "draw") (span ((class "RktPn")) ")"))) "\n" (tr (td (img ((alt "image") (height "40") (src "http://lh5.googleusercontent.com/-URhs1lVSPmw/UKJ1qAyu1qI/AAAAAAAAAF4/u249AeJD_v8/e75df8961af22ce50393.png") (width "80"))))) "\n"))) "Our " (span ((class "RktSym")) "fish%") " objects will be able to eat some edible things and grow in size. Of course, we need some edible things:" (br) "\n" (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "edible" "<" "%" ">"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "interface") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "eaten") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")))) "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "plankton%"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "class*") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "object%") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "edible" "<" "%" ">") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "super-new") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "not very nutritious..."))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "nutrition") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "0.2") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define/public") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "eaten") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "nutrition") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")))) "\n"))) "Now a " (span ((class "RktSym")) "fish%") " can eat " (span ((class "RktSym")) "plankton%") " objects:" (br) "\n" (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "dory") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "new") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "fish%") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")))) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "send") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "dory") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "eat") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "new") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "plankton%") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")))) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "send") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "dory") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "draw") (span ((class "RktPn")) ")"))) "\n" (tr (td (img ((alt "image") (height "48") (src "http://lh4.googleusercontent.com/-GBiaGCvCYPI/UKJ2ZIO1e3I/AAAAAAAAAGg/W-fmOlUxq40/6d82974d409f3ad02350.png") (width "80"))))) "\n"))) "After eating, Dory weighs more. Unfortunately, as weâve written our classes so far we could deny our fish its dinner by providing an object that canât be eaten:" (br) "\n" (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "tire%"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "don't eat this"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "class") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "object%") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "super-new") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")))) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "send") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "dory") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "eat") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "new") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "tire%") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktErr")) "send: no such method"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "method name: eaten"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "class name: tire%"))) "\n"))) "This is where contracts can help out. Racketâs class contracts let you specify contracts on classes outside of the class hierarchy, so that you can have checked fish and unchecked fish, or fish that have different kinds of contracts." (br) "\n" (br) "\nFor example, we can ensure that " (span ((class "RktSym")) "checked-fish%") " only eat edible things:" (br) "\n" (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "fish/c"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "class/c"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "init-field") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "weight") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "real?") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "eat") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (span ((class "nobreak")) "-" ">") "m") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "is-a?/c") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "edible" "<" "%" ">") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "void?") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "draw") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (span ((class "nobreak")) "-" ">") "m") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "pict?") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")))) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "define/contract") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "checked-fish%") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "fish/c") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "fish%") (span ((class "RktPn")) ")"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")))) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "send") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "new") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "checked-fish%") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "eat") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "new") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "tire%") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktErr")) "eat method in fish%: contract violation"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr")) "expected: (is-a?/c interface:edible" "<" "%" ">" ")"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr")) "given: (object:tire% ...)"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr")) "in: the 1st argument of"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "the eat method in"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "fish/c"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr")) "contract from: (definition checked-fish%)"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr")) "blaming: top-level"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr")) "at: eval:12.0"))) "\n"))) "Now we get a contract error for providing something thatâs not food.  The contract error comes with blame, which allows us to pinpoint the code that caused the violation, in this case the application of the " (span ((class "RktSym")) "eat") " method. Of course, we can also contract Dory so that she doesnât have to fast again:" (br) "\n" (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "define/contract") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "better-dory") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "instanceof/c") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "fish/c") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "dory") (span ((class "RktPn")) ")"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")))) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "send") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "better-dory") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "eat") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "new") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "tire%") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktErr")) "eat method in fish%: contract violation"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr")) "expected: (is-a?/c interface:edible" "<" "%" ">" ")"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr")) "given: (object:tire% ...)"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr")) "in: the 1st argument of"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "the eat method in"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "..."))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "(instanceof/c fish/c)"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr")) "contract from: (definition better-dory)"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr")) "blaming: top-level"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr")) "at: eval:14.0"))) "\n"))) "There are more combinators like " (span ((class "RktSym")) "object/c") " and so on that provide more fine-grained contract checking for classes. See the " (a ((href "http://docs.racket-lang.org/guide/classes.html#%28part._.Class_.Contracts%29")) "Guide section") " on class contracts for more details." (br) "\n" (h3 (a ((href "http://www.blogger.com/blogger.g?blogID=2080885971644496896") (name "(part._.Interface_contracts)"))) "Interface contracts") "Up until now, weâve only seen contracts for classes, not interfaces like " (span ((class "RktSym")) "edible" "<" "%" ">") ". Weâd like to ensure that food has some basic level of nutrition, so that our fish donât get food poisoning and lose weight:" (br) "\n" (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "mold%"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "class*") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "object%") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "edible" "<" "%" ">") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "super-new") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define/public") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "eaten") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) (span ((class "nobreak")) "-0") ".4") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")))) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "ernest") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "new") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "checked-fish%") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "color") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "\"honeydew\"") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")))) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "send") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "ernest") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "eat") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "new") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "mold%") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")))) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "send") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "ernest") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "draw") (span ((class "RktPn")) ")"))) "\n" (tr (td (img ((alt "image") (height "24") (src "http://lh3.googleusercontent.com/-lTEC5653WTY/UKJ1rDvQjVI/AAAAAAAAAGI/DQnegk90mfw/8b592c48602a9c9d5a06.png") (width "80"))))) "\n"))) "Given class contracts, contracts on interfaces may seen unnecessary. After all, you can always write a class contract and use it on the food:" (br) "\n" (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "nutrition/c") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "flat-named-contract") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "'") (span ((class "RktVal")) "nutrition") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) ">" "=/c") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "0") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")))) "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "edible" "<" "%" ">" "/c"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "class/c") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "eaten") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (span ((class "nobreak")) "-" ">") "m") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "nutrition/c") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")))) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "define/contract") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "checked-plankton%") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "edible" "<" "%" ">" "/c") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "plankton%") (span ((class "RktPn")) ")"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")))) "\n"))) "This successfully protects the new " (span ((class "RktSym")) "checked-plankton%") " class, but it doesnât give us any guarantees about the original " (span ((class "RktSym")) "plankton%") ". Worse, a third party could give us a class implementing " (span ((class "RktSym")) "edible" "<" "%" ">") " that doesnât come with a contract attached. In other words, we have to secure every channel through which we could potentially get an " (span ((class "RktSym")) "edible" "<" "%" ">") " object." (br) "\n" (br) "\nOf course, with higher-order contracts this isnât as bad as it sounds. For example, we could revise " (span ((class "RktSym")) "fish/c") " in the following way to get closer to what we want:" (br) "\n" (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "fish/c"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "class/c"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "init-field") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "weight") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "real?") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "eat") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (span ((class "nobreak")) "-" ">") "m") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "instanceof/c") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "edible" "<" "%" ">" "/c") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "void?") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "draw") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (span ((class "nobreak")) "-" ">") "m") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "pict?") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")))) "\n"))) "Notice how the domain of " (span ((class "RktSym")) "eat") " is now " (span ((class "RktPn")) "(") (span ((class "RktSym")) "instanceof/c") (span ((class "stt")) " ") (span ((class "RktSym")) "edible" "<" "%" ">" "/c") (span ((class "RktPn")) ")") ", which uses the class contract we wrote above to check the edible object coming into the method." (br) "\n" (br) "\nThis works pretty well, but itâs not perfect. If we write another fish method that interacts with edible things, we have to remember to use the right contract. Not only that, " (span ((class "RktSym")) "instanceof/c") " will wrap the object with a contract every time it is passed to the method, which could cause an object to be wrapped with an arbitrary number of instance contracts. The redundant contract wrappings can impose a performance cost." (br) "\n" (br) "\nInstead, since weâre the ones providing the " (span ((class "RktSym")) "edible" "<" "%" ">") " interface, it would be far better to just demand once and for all that anything that implements this interface has to uphold certain obligations. We can do that by adding contracts to the methods directly in the interface:" (br) "\n" (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "checked-edible" "<" "%" ">"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "interface") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "eaten") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (span ((class "nobreak")) "-" ">") "m") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "nutrition/c") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")))) "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "hemlock%"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "class*") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "object%") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "checked-edible" "<" "%" ">") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "super-new") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "nutrition") (span ((class "hspace")) nbsp) (span ((class "RktVal")) (span ((class "nobreak")) "-0") ".5") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define/public") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "eaten") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "nutrition") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")))) "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "fish/c"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "class/c"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "init-field") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "weight") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "real?") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "eat") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (span ((class "nobreak")) "-" ">") "m") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "is-a?/c") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "checked-edible" "<" "%" ">") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "void?") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "draw") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (span ((class "nobreak")) "-" ">") "m") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "pict?") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")))) "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "define/contract") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "francesco") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "instanceof/c") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "fish/c") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "new") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "fish%") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "color") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "\"plum\"") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")))) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "send") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "francesco") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "draw") (span ((class "RktPn")) ")"))) "\n" (tr (td (img ((alt "image") (height "40") (src "http://lh5.googleusercontent.com/-SwEVDZdluKc/UKJ1rlJ0kmI/AAAAAAAAAGQ/4U2NMWokqpQ/39b5f0f4c81f963c50d0.png") (width "80"))))) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "send") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "francesco") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "eat") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "new") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "hemlock%") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktErr")) "eaten: broke its contract"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr")) "promised: nutrition"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr")) "produced: -0.5"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr")) "in: the range of"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "(-" ">" "m nutrition)"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr")) "contract from: (class hemlock%)"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr")) "blaming: (class hemlock%)"))) "\n"))) "Now even though our " (span ((class "RktSym")) "fish/c") " contract does not use an instance contract, our fish is protected from eating badly implemented foods. The check is established for " (span ((style "font-style: italic;")) "every") " class that implements the " (span ((class "RktSym")) "checked-edible" "<" "%" ">") " interface.  The actual contract wrapping occurs when an object of a class implementing the interface is instantiated." (br) "\n" (br) "\nEven better, interface contracts work together with interface inheritance to make sure that sub-interfaces uphold the invariants that their super-interfaces guarantee. More concretely, suppose we define a new sub-interface of " (span ((class "RktSym")) "checked-edible" "<" "%" ">") ":" (br) "\n" (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "healthy" "<" "%" ">"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "interface") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "checked-edible" "<" "%" ">") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "eaten") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (span ((class "nobreak")) "-" ">") "m") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) ">" "=/c") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "0.5") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")))) "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "kale%"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "class*") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "object%") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "healthy" "<" "%" ">") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "super-new") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define/public") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "eaten") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")))) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "send") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "francesco") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "eat") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "new") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "kale%") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")))) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "send") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "francesco") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "draw") (span ((class "RktPn")) ")"))) "\n" (tr (td (img ((alt "image") (height "80") (src "http://lh3.googleusercontent.com/-v__tsXDRYBQ/UKJ1sRBTUaI/AAAAAAAAAGY/eP-NIRrC_3A/caa401073c6f82349337.png") (width "80"))))) "\n"))) "Francesco gets quite fat. This is fine, of course, since the healthy variant of food correctly upholds the " (span ((class "RktSym")) "edible" "<" "%" ">") " invariants. Any " (span ((class "RktSym")) "healthy" "<" "%" ">") " food is guaranteed to have non-negative nutrition. In contrast, suppose we define a " (span ((class "RktSym")) "poison" "<" "%" ">") " interface as follows:" (br) "\n" (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "poison" "<" "%" ">"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "interface") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "checked-edible" "<" "%" ">") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "eaten") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (span ((class "nobreak")) "-" ">") "m") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "<" "=/c") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "0") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")))) "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "toxic-sludge%"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "class*") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "object%") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "poison" "<" "%" ">") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "super-new") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define/public") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "eaten") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) (span ((class "nobreak")) "-1")) (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")))) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "send") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "francesco") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "eat") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "new") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "toxic-sludge%") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktErr")) "eaten: broke its contract"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr")) "promised: nutrition"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr")) "produced: -1"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr")) "in: the range of"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "(-" ">" "m nutrition)"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr")) "contract from: (interface poison" "<" "%" ">" ")"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr")) "blaming: (interface poison" "<" "%" ">" ")"))) "\n"))) "then we get a contract violation. Not only that, it appropriately blames the " (span ((class "RktSym")) "poison" "<" "%" ">") " interface for incorrectly implementing the " (span ((class "RktSym")) "checked-edible" "<" "%" ">") " interface. In other words, interface contracts allow us to ensure that sub-interfaces are " (span ((style "font-style: italic;")) "behavioral subtypes") " of super-interfaces." (br) "\n" (h3 (a ((href "http://www.blogger.com/blogger.g?blogID=2080885971644496896") (name "(part._.Conclusion)"))) "Conclusion") "Interface contracts and class contracts are both useful in their separate ways: class contracts when you want fine-grained control over which classes or instances are protected and interface contracts when you want all implementors to uphold certain invariants. Racket now provides both for the discerning programmer.") (link ((href "http://blog.racket-lang.org/feeds/5330446382626738029/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=5330446382626738029") (rel "replies") (title "1 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/5330446382626738029") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/5330446382626738029") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/11/contracts-for-object-oriented_4671.html") (rel "alternate") (title "Contracts for object-oriented programming") (type "text/html"))) (author (name "Asumu Takikawa") (uri "https://www.blogger.com/profile/03651024646695210136") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (media:thumbnail ((height "72") (url "http://lh5.googleusercontent.com/-URhs1lVSPmw/UKJ1qAyu1qI/AAAAAAAAAF4/u249AeJD_v8/s72-c/e75df8961af22ce50393.png") (width "72") (xmlns:media "http://search.yahoo.com/mrss/"))) (thr:total "1")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-870195142710746035") (published "2012-11-07T17:17:00.001-05:00") (updated "2012-11-07T17:17:29.815-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Racket v5.3.1") (post-content "Racket version 5.3.1 is now available from\n" (pre (a ((href "http://racket-lang.org/")) "http://racket-lang.org/")) "\n" (h2 "Racket:") "\n" (ul "\n" (li "The " (tt "case") " form dispatches on characters, fixnums, symbols, and keywords in logarithmic time.  (Thanks to Jon Zeppieri.)") "\n" (li "The new " (tt "racket/format") " library provides new and improved string-formatting functions.") "\n" (li "Logging tools include improved filtering support based on the name of a logger.  A new " (tt "define-logger") " form simplifies the use of named loggers.  Forms such as " (tt "log-debug") " now support string formatting.") "\n" (li "The " (tt "for") " forms now support " (tt "#:break") " and " (tt "#:final") " clauses.") "\n" (li "The new " (tt "PLTCOMPILEDROOTS") " environment variable configures the search path for compiled bytecode.") "\n") "\n" (h2 "DrRacket:") "\n" (ul "\n" (li "Check Syntax now summarizes the documentation (i.e., the blue boxes) for the identifier at the insertion point in the top-right corner of the definitions window.") "\n" (li "Check Syntax now runs continuously for programs that declare their language within the source.  This mode has been available for several of the past releases, but now enabled by default.") "\n" (li "DrRacket can spell-check string constants (enable this in the Edit menu).") "\n") "\n" (h2 "Typed Racket:") "\n" (ul "\n" (li "Typed Racket interprets the " (tt "Any") " type as a different contract. This may signal dynamic errors in some existing mixed typed/untyped programs.  The normal fix is to replace a use of " (tt "Any") " with a more specific types.") "\n" (li "NaN is included in all of Typed Racket's floating-point types, which makes precise floating-point types easier to use.") "\n" (li "Typed Racket supports a " (tt "cast") " operation with support for higher-order types.") "\n" (li "Typed Racket provides the " (tt ":query-type/args") " and " (tt ":query-type/result") " utilities to explore types at the REPL.") "\n") "\n" (h2 "Miscellaneous:") "\n" (ul "\n" (li "The " (tt "compatibility") " collection provides features from Racket relatives, such as " (tt "defmacro") " and mutable lists.  These features are provided to ease porting code to Racket.  Avoid them in modern Racket code.") "\n" (li "Screenshots of the widgets provided by the Racket GUI library are included in the documentation.  (Thanks to Diogo F. S. Ramos.)") "\n" (li "FrTime was ported to racket " (tt "#lang") ".  (Thanks to Patrick Mahoney.)") "\n") "\n" (h2 "Deprecation:") "\n" (p "The following has been deprecated and will be removed in the January 2013 release:") "\n" (ul "\n" (li "the " (tt "planet") " command-line tool; use " (tt "raco planet") " instead.") "\n") "\n" (p "The following has been deprecated and will be removed in the August 2013 release:") "\n" (ul "\n" (li "the " (tt "mzlib/class100") " library; use " (tt "racket/class") " instead.") "\n") "\n") (link ((href "http://blog.racket-lang.org/feeds/870195142710746035/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=870195142710746035") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/870195142710746035") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/870195142710746035") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/11/racket-v531.html") (rel "alternate") (title "<a href=\"http://racket-lang.org\">Racket v5.3.1</a>") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://plus.google.com/115730576737402335315") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh5.googleusercontent.com/-eR9w2qhxsD0/AAAAAAAAAAI/AAAAAAAACa4/EbnrYldgv28/s32-c/photo.jpg") (width "32")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1317537382478082961") (published "2012-11-01T14:39:00.000-04:00") (updated "2012-11-02T12:17:29.099-04:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "new-feature"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "generics"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "racketcon"))) (title ((type "text")) "Generics") (post-content "Recently at " (a ((href "http://con.racket-lang.org/")) "RacketCon") ",\nI gave a talk about the new Generics library that ships\nwith Racket 5.3. In this blog post, Iâll offer a slightly expanded commentary\nabout the new library. For the ten-minute video explanation, see the\n" (a ((href "http://www.youtube.com/watch?v=MYtm9YG4tMM")) "Youtube") " video.  The\naccompanying slides are available\n" (a ((href "http://www.ccs.neu.edu/home/asumu/slides/racketcon-2012-generics.pdf")) "here") "." (br) "\n" (h3 "\nIntroduction") "\nProbably the first question that comes to your mind is: what are generics and\nwhat do we mean by generic programming? Let me illustrate with\nsome example code:" (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "vector-ref") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "#") (span ((class "RktVal")) "(") (span ((class "RktVal")) "1") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "3") (span ((class "RktVal")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktRes")) "3"))) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "list-ref") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "'") (span ((class "RktVal")) "(") (span ((class "RktVal")) "1") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "3") (span ((class "RktVal")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktRes")) "3"))) "\n")) "\n") "\nBoth of the lines above operate on sequence-like datatypes, but for each of the\ndatatypes we use different functions: " (span ((class "RktSym")) "vector-ref") " and\n" (span ((class "RktSym")) "list-ref") ".  This is also the case with other datatypes like\ndictionary-like datatypes: " (span ((class "RktSym")) "hash-ref") ", " (span ((class "RktSym")) "assoc") ", etc. Or all the\ndifferent kinds of equality: " (span ((class "RktSym")) "string=?") ", " (span ((class "RktSym")) "boolean=?") ", and\n" (span ((class "RktSym")) "=") ". These specialized operations may seem redundant. Ideally, weâd have\n" (span ((style "font-style: italic;")) "generic") " functions that donât care about the specific datatypes that we\noperate over." (br) "\n" (br) "\nThankfully, Racket does provide these. For dictionaries, we have functions like\n" (span ((class "RktSym")) "dict-ref") " and " (span ((class "RktSym")) "dict-set") " that operate over any kind of\ndictionary-like type. For sequences, " (span ((class "RktSym")) "sequence-ref") ",\n" (span ((class "RktSym")) "sequence-append") ", and so on. These generic interfaces are all built-in\nto the standard library.  You might wonder, however, if you can define your own\ngeneric functions." (br) "\n" (br) "\nAs of version 5.3, you just need to " (span ((class "RktPn")) "(") (span ((class "RktSym")) "require") (span ((class "stt")) " ") (span ((class "RktSym")) "racket/generic") (span ((class "RktPn")) ")") " to get all\nthe tools you need to define your own generic interface. In the rest of the\narticle Iâll show you how to define your own generic interface and how to use\nit. If youâve seen Rustâs\n" (a ((href "http://pcwalton.github.com/blog/2012/08/08/a-gentle-introduction-to-traits-in-rust")) "traits") " or\nClojureâs " (a ((href "http://clojure.org/protocols")) "protocols") ", our design\nwill feel familiar." (br) "\n" (h3 "\nExamples") "\nThe running example will be the implementation of a simple queue\ninterface.  Our queue will contain five operations: " (span ((class "RktSym")) "queue-enqueue") ",\n" (span ((class "RktSym")) "queue-dequeue") ", " (span ((class "RktSym")) "queue-head") ", " (span ((class "RktSym")) "queue-empty?") ", and\n" (span ((class "RktSym")) "queue-length") "." (br) "\n" (br) "\nThe first thing to do is to require the library:" (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "require") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "racket/generic") (span ((class "RktPn")) ")"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n")) "\n") "\nThen we use " (span ((class "RktSym")) "define-generics") " to define a generic interface:" (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "define-generics") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "queue-enqueue") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "elem") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "queue-dequeue") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "queue-head") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "queue-empty?") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "queue-length") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n")) "\n") "\nThe method headers above define the methods that concrete implementations of\nthe generic interface need to provide. Each header needs to contain at least\none argument that matches the name of the interface; this argument will be used\nfor dispatch.  The form defines several identifiers: " (span ((class "RktSym")) "queue?") ",\n" (span ((class "RktSym")) "gen:queue") ", " (span ((class "RktSym")) "queue/c") ", and each of the generic functions. The\nfirst is a predicate that checks whether a given value implements the\ninterface. The identifier prefixed with " (span ((class "RktSym")) "gen:") " is a binding thatâs used\nto supply methods for the interface. The " (span ((class "RktSym")) "queue/c") " specifies a contract\ncombinator for the interface, which Iâll describe later in the article." (br) "\n" (br) "\nWe now have the generic functions, but theyâre not very useful without concrete\nimplementations. To implement a generic interface, you first need to define a\nstructure type. Weâll define a simple functional\nqueue" nbsp "(" (a ((href "http://www.blogger.com/blogger.g?blogID=2080885971644496896#%28autobib._.Chris._.Okasaki.Purely._.Functional._.Data._.Structures.Cambridge._.University._.Press1998%29") (pltdoc "x")) "Okasaki") " " (a ((href "http://www.blogger.com/blogger.g?blogID=2080885971644496896#%28autobib._.Chris._.Okasaki.Purely._.Functional._.Data._.Structures.Cambridge._.University._.Press1998%29") (pltdoc "x")) "1998, p.42") ") that uses two lists:" (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "struct") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "simple-queue") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "front") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "back") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "#:methods") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "gen:queue"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "helper function to balance lists"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-front") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "match") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) "simple-queue") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "'") (span ((class "RktVal")) "(") (span ((class "RktVal")) ")") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "back") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "simple-queue") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "reverse") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "back") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "'") (span ((class "RktVal")) "(") (span ((class "RktVal")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "_") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "enqueue an element"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "queue-enqueue") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "elem") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "match") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) "simple-queue") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "front") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "back") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-front") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "simple-queue") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "front") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cons") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "elem") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "back") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "dequeue an element"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "queue-dequeue") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "match") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) "simple-queue") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cons") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "x") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "xs") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "back") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-front") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "simple-queue") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "xs") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "back") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "get the head of the queue"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "queue-head") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "match") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) "simple-queue") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cons") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "x") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "xs") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "back") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "x") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "check if the queue is empty"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "queue-empty?") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "empty?") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "simple-queue-front") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "get the queue's length"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "queue-length") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "+") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "length") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "simple-queue-front") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "length") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "simple-queue-back") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "empty-queue"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "simple-queue") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "'") (span ((class "RktVal")) "(") (span ((class "RktVal")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "'") (span ((class "RktVal")) "(") (span ((class "RktVal")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n")) "\n") "\nUsing the " (span ((class "RktPn")) "#:methods") " keyword and the " (span ((class "RktSym")) "gen:queue") " binding, we can\nspecify the methods that a " (span ((class "RktSym")) "simple-queue") " implements. Note that a\n" (span ((class "RktPn")) "#:methods") " block may also contain helper functions (like\n" (span ((class "RktSym")) "check-front") ") and definitions that are used to define the methods.\nEach method has the same method header as the corresponding headers in the\ninterface definition." (br) "\n" (br) "\nWe can check that our new queue actually works with the generic functions:" (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "queue-head") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "queue-enqueue") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "empty-queue") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "5") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktRes")) "5"))) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "queue-empty?") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "empty-queue") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktRes")) "#t"))) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "queue-length") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "queue-enqueue") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "queue-enqueue") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "empty-queue") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "7") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "5") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktRes")) "2"))) "\n")) "\n") "\nIt works! For any structure type, we can define methods in the same way. For\nexample, we can define an efficient persistent queue" nbsp "(" (a ((href "http://www.blogger.com/blogger.g?blogID=2080885971644496896#%28autobib._.Chris._.Okasaki.Purely._.Functional._.Data._.Structures.Cambridge._.University._.Press1998%29") (pltdoc "x")) "Okasaki") " " (a ((href "http://www.blogger.com/blogger.g?blogID=2080885971644496896#%28autobib._.Chris._.Okasaki.Purely._.Functional._.Data._.Structures.Cambridge._.University._.Press1998%29") (pltdoc "x")) "1998, p.64") ")\nthat implements the same methods. This time, the implementation will use\nlazy evaluation with streams:" (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "struct") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "persistent-queue") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "front-len") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "front") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "back-len") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "back") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "#:methods") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "gen:queue"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "helper function to balance lists"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "check") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "match") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) "persistent-queue") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "front-len") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "front") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "back-len") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "back") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "if") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "<" "=") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "back-len") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "front-len") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktSym")) "queue"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "persistent-queue"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "+") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "front-len") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "back-len") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "stream-append") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "front") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "stream-reverse") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "back") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktVal")) "0") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "stream-null") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "enqueue an element"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "queue-enqueue") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "elem") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "match") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) "persistent-queue") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "front-len") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "front") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "back-len") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "back") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "check") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "persistent-queue"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktSym")) "front-len") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "front"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "+") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "back-len") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "stream-cons") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "elem") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "back") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "dequeue an element"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "queue-dequeue") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "match") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) "persistent-queue") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "front-len") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "front") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "back-len") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "back") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "check") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "persistent-queue"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (span ((class "nobreak")) "-")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "front-len") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "stream-rest") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "front") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktSym")) "back-len") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "back") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "get the head of the queue"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "queue-head") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "match") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) "persistent-queue") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "front-len") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "front") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "back-len") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "back") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "stream-first") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "front") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "check if the queue is empty"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "queue-empty?") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "=") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "0") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "persistent-queue-front-len") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "get the queue's length"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "queue-length") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "+") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "persistent-queue-front-len") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "persistent-queue-back-len") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "empty-persistent-queue"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "persistent-queue") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "0") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "stream-null") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "0") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "stream-null") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n")) "\n") "\nOur operations from before work as expected:" (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "queue-head") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "queue-enqueue") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "empty-persistent-queue") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "5") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktRes")) "5"))) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "queue-empty?") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "empty-persistent-queue") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktRes")) "#t"))) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "queue-length") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "queue-enqueue") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "queue-enqueue") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "empty-persistent-queue") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "7") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "5") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktRes")) "2"))) "\n")) "\n") "\n" (h3 "\nContracts") "\nEarlier, I mentioned that the generic interface also comes with a contract\nform thatâs automatically defined. You can use these to attach dynamic checks\nto your implementations." (br) "\n" (br) "\nFor example, we can write a contract that restricts our queues to only accept\nintegers as data elements:" (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "int-queue/c"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "recursive-contract"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "queue/c") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "queue-enqueue") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (span ((class "nobreak")) "-" ">")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "int-queue/c") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "integer?") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "int-queue/c") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "queue-dequeue") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (span ((class "nobreak")) "-" ">")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "int-queue/c") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "int-queue/c") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "queue-head") (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (span ((class "nobreak")) "-" ">")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "int-queue/c") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "integer?") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "queue-empty?") (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (span ((class "nobreak")) "-" ">")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "int-queue/c") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "boolean?") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "queue-length") (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (span ((class "nobreak")) "-" ">")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "int-queue/c") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "integer?") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n")) "\n") "\nFor the queue interface, the automatically defined " (span ((class "RktSym")) "queue/c") " combinator\nallows us to specify contracts on each of the methods in the interface. We also\nuse a recursive contract here just so that we can reference the\n" (span ((class "RktSym")) "int-queue/c") " contract within itself." (br) "\n" (br) "\nWe can apply the contract to a particular queue:" (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "define/contract") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "checked-queue"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktSym")) "int-queue/c"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktSym")) "empty-queue") (span ((class "RktPn")) ")"))) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "queue-enqueue") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "checked-queue") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "42") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktRes")) "#" "<" "simple-queue" ">"))) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "queue-enqueue") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "checked-queue") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "\"not an integer\"") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktErr")) "checked-queue: contract violation"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr")) "expected: integer?"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr")) "given: \"not an integer\""))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr")) "in: the 2nd argument of"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "the queue-enqueue method of"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "(recursive-contract"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "(queue/c"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "(queue-enqueue"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "(-" ">" " int-queue/c integer? int-queue/c))"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "(queue-dequeue"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "(-" ">" " int-queue/c int-queue/c))"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "(queue-head (-" ">" " int-queue/c integer?))"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "(queue-empty? (-" ">" " int-queue/c boolean?))"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "(queue-length (-" ">" " int-queue/c integer?))))"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr")) "contract from: (definition checked-queue)"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr")) "blaming: top-level"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr")) "at: eval:15.0"))) "\n")) "\n") "\nThe second use of " (span ((class "RktSym")) "queue-enqueue") " causes a contract error as expected,\nsince we canât add a string to an integer queue. You can also provide a\nconstructor for your integer queue thatâs contracted to produce\n" (span ((class "RktSym")) "int-queue/c") "s. Any queues created with that constructor will be checked\nfor integers." (br) "\n" (br) "\nAlso, you might have noticed that the queues we wrote above donât protect\nagainst dequeueing or taking the head of empty queues. To prevent this, we can\nwrite contracts that ensure these operations raise contract errors on empty\nqueues. Since we want to enforce this for " (span ((style "font-style: italic;")) "all") " queues instead of just\nsome of them, we apply contracts to the generic functions:" (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "non-empty-queue/c"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "flat-named-contract"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktVal")) "'") (span ((class "RktVal")) "non-empty-queue"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "Î»") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "q") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "and") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "queue?") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "q") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "not") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "queue-empty?") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "q") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "define/contract") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "checked-dequeue") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (span ((class "nobreak")) "-" ">")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "non-empty-queue/c") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue?") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "queue-dequeue") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "define/contract") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "checked-head") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (span ((class "nobreak")) "-" ">")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "non-empty-queue/c") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "any/c") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "queue-head") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "queue") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "checked-head") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "empty-persistent-queue") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktErr")) "checked-head: contract violation"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr")) "expected: non-empty-queue"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr")) "given: #" "<" "persistent-queue" ">"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr")) "in: the 1st argument of"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "(-" ">" " non-empty-queue any/c)"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr")) "contract from: (function checked-head)"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr")) "blaming: top-level"))) "\n" (tr (td (span ((class "RktErr"))) (span ((class "hspace")) nbsp) (span ((class "RktErr")) "at: eval:20.0"))) "\n")) "\n") "\nThe " (span ((class "RktSym")) "checked-head") " function raises a contract error as expected instead\nof an exception from a stream function.  In a real implementation, you would\njust export the original generic functions with contracts attached using\n" (span ((class "RktSym")) "contract-out") " instead of defining checked versions like we did here." (br) "\n" (h3 "\nSummary") "\nRacket 5.3 has made the process of defining and using generic interfaces much\neasier. The new library is still under active development and we plan to\nexperiment with additional features and performance improvements. The full code\nfrom this article can be found in the following gist:\n" (a ((href "https://gist.github.com/3995200")) "https://gist.github.com/3995200") (br) "\n" (h3 "\n" (a ((href "http://www.blogger.com/blogger.g?blogID=2080885971644496896") (name "(part._doc-bibliography)"))) "Bibliography") "\n" (table ((cellspacing "0") (class "AutoBibliography")) (tbody "\n" (tr (td (a ((href "http://www.blogger.com/blogger.g?blogID=2080885971644496896") (name "(autobib._.Chris._.Okasaki.Purely._.Functional._.Data._.Structures.Cambridge._.University._.Press1998)"))) (span ((class "Autobibentry")) "Chris Okasaki. Purely Functional Data Structures. Cambridge University Press, 1998."))) "\n")) "\n") (link ((href "http://blog.racket-lang.org/feeds/1317537382478082961/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=1317537382478082961") (rel "replies") (title "1 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1317537382478082961") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1317537382478082961") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/11/generics.html") (rel "alternate") (title "Generics") (type "text/html"))) (author (name "Asumu Takikawa") (uri "https://www.blogger.com/profile/03651024646695210136") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "1")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1332705295037674198") (published "2012-10-24T17:46:00.002-04:00") (updated "2012-11-02T12:41:13.058-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "The 3n+1 problem") (post-content (h3 "\n1" (tt nbsp) (a ((href "http://www.blogger.com/blogger.g?blogID=2080885971644496896") (name "(part._.Introduction)"))) "Introduction") "\nIâm starting to go through\n" (a ((href "http://www.amazon.com/exec/obidos/ASIN/0387001638/thealgorithmrepo")) "Programming\nChallenges: The Programming Contest Training Manual") ", by Steven S. Skiena and\nMiguel Revilla.  I thought it would be fun to show how to approach the problems\nusing the " (a ((href "http://racket-lang.org/")) "Racket") " programming language.  Rather\nthan use a small, toy educational subset of the language, Iâll take off the kid\ngloves, and use whateverâs available in\n" (a ((href "http://docs.racket-lang.org/guide/index.html")) (span ((class "RktInBG")) (span ((class "hspace"))) (span ((class "RktIn")) "#lang racket") (span ((class "hspace"))))) "." (br) "\n" (h3 "\n2" (tt nbsp) (a ((href "http://www.blogger.com/blogger.g?blogID=2080885971644496896") (name "(part._.The_problem)"))) "The problem") "\n" (br) "\n" (div ((class "SIntrapara")) "\nThe " (a ((href "http://acm.uva.es/p/v1/100.html")) "3n+1") " problem is as follows:\nconsider a positive number n.  The " (span ((style "font-style: italic;")) "cycle length") " of n is the number of\ntimes we repeat the following, until we reach n=1:\n") "\n" (div ((class "SIntrapara")) "\n" (ul "\n" (li "If n is odd, then n â 3n+1") "\n" (li "If n is even, then n â n/2") "\n") "\n") "\n" (br) "\nFor example, given n=22, we see the following sequence: 22 11 34 17 52 26 13 40\n20 10 5 16 8 4 2 1.  The cycle length of 22 is, therefore, 16, since it took 16\nrepetitions to get to 1." (br) "\nGiven a definition of cycle length of a number, hereâs the rest of the problem:\ngiven any two numbers i and j, compute the maximum cycle length over all\nnumbers between i and j, inclusive." (br) "\n" (h4 "\n2.1" (tt nbsp) (a ((href "http://www.blogger.com/blogger.g?blogID=2080885971644496896") (name "(part._.The_plan)"))) "The plan") "\nBefore we do any real coding, letâs figure out a plan of attack and how to test\nthat plan." (br) "\n" (ul "\n" (li "We need a way of computing cycle-length.") "\n" (li "We need to run cycle-length over a range of values and pick out the biggest result.") "\n") "\nIt sounds like we may want a function called " (span ((class "RktSym")) "cycle-length") " that will\ncompute how long it takes for us to get n to 1.  If we have\n" (span ((class "RktSym")) "cycle-length") " as a helper function, then it becomes a fairly direct\nloop through the range between i and j to pick out which one produces the\nlargest cycle length." (br) "\nLetâs first write up a stub function that computes some nonsense.  Weâll\ncorrect it in a moment, of course!" (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "cycle-length: positive-integer -" ">" " positive-integer"))) "\n" (tr (td (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "Computes the cycle length of n, according to"))) "\n" (tr (td (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "the 3n+1 rules."))) "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29") (pltdoc "x")) "define")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktVal")) "42") (span ((class "RktPn")) ")"))) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n")) "\n") "\nThis is certainly not right, but itâs a start.  And itâs something we can test!" (br) "\n" (h3 "\n3" (tt nbsp) (a ((href "http://www.blogger.com/blogger.g?blogID=2080885971644496896") (name "(part._.Test_cases)"))) "Test cases") "\n" (br) "\n" (div ((class "SIntrapara")) "\nWe want ") "\n" (div ((class "SIntrapara")) "\n" (blockquote ((class "SCodeFlow")) "\n") "\n" (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "==" ">") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1")) "\n" (br) "\nLetâs express this more formally with the " (a ((class "RktModLink") (href "http://doc.racket-lang.org/rackunit/api.html") (pltdoc "x")) (span ((class "RktSym")) "rackunit")) " unit testing\nlibrary in Racket." (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "Load up rackunit:"))) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._require%29%29") (pltdoc "x")) "require")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "rackunit") (span ((class "RktPn")) ")"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n" (tr (td (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "Let's express that test:"))) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-equal?") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1") (span ((class "RktPn")) ")"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td (span ((class "RktErr")) "--------------------"))) "\n" (tr (td (span ((class "RktErr")) "FAILURE"))) "\n" (tr (td (span ((class "RktErr")) "name: ") (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "check-equal?"))) "\n" (tr (td (span ((class "RktErr")) "location: ") (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "(eval 4 0 4 1)"))) "\n" (tr (td (span ((class "RktErr")) "expression: (check-equal? (cycle-length 1) 1)"))) "\n" (tr (td (span ((class "RktErr")) "actual: ") (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "42"))) "\n" (tr (td (span ((class "RktErr")) "expected: ") (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "1"))) "\n" (tr (td (span ((class "RktErr"))))) "\n" (tr (td (span ((class "RktErr")) "Check failure"))) "\n" (tr (td (span ((class "RktErr")) "--------------------"))) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n" (tr (td (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "A few more tests, according to the problem statement above:"))) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-equal?") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2") (span ((class "RktPn")) ")"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td (span ((class "RktErr")) "--------------------"))) "\n" (tr (td (span ((class "RktErr")) "FAILURE"))) "\n" (tr (td (span ((class "RktErr")) "name: ") (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "check-equal?"))) "\n" (tr (td (span ((class "RktErr")) "location: ") (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "(eval 5 0 5 1)"))) "\n" (tr (td (span ((class "RktErr")) "expression: (check-equal? (cycle-length 2) 2)"))) "\n" (tr (td (span ((class "RktErr")) "actual: ") (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "42"))) "\n" (tr (td (span ((class "RktErr")) "expected: ") (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "2"))) "\n" (tr (td (span ((class "RktErr"))))) "\n" (tr (td (span ((class "RktErr")) "Check failure"))) "\n" (tr (td (span ((class "RktErr")) "--------------------"))) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-equal?") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "4") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "3") (span ((class "RktPn")) ")"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td (span ((class "RktErr")) "--------------------"))) "\n" (tr (td (span ((class "RktErr")) "FAILURE"))) "\n" (tr (td (span ((class "RktErr")) "name: ") (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "check-equal?"))) "\n" (tr (td (span ((class "RktErr")) "location: ") (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "(eval 6 0 6 1)"))) "\n" (tr (td (span ((class "RktErr")) "expression: (check-equal? (cycle-length 4) 3)"))) "\n" (tr (td (span ((class "RktErr")) "actual: ") (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "42"))) "\n" (tr (td (span ((class "RktErr")) "expected: ") (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "3"))) "\n" (tr (td (span ((class "RktErr"))))) "\n" (tr (td (span ((class "RktErr")) "Check failure"))) "\n" (tr (td (span ((class "RktErr")) "--------------------"))) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-equal?") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "5") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "6") (span ((class "RktPn")) ")"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td (span ((class "RktErr")) "--------------------"))) "\n" (tr (td (span ((class "RktErr")) "FAILURE"))) "\n" (tr (td (span ((class "RktErr")) "name: ") (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "check-equal?"))) "\n" (tr (td (span ((class "RktErr")) "location: ") (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "(eval 7 0 7 1)"))) "\n" (tr (td (span ((class "RktErr")) "expression: (check-equal? (cycle-length 5) 6)"))) "\n" (tr (td (span ((class "RktErr")) "actual: ") (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "42"))) "\n" (tr (td (span ((class "RktErr")) "expected: ") (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "6"))) "\n" (tr (td (span ((class "RktErr"))))) "\n" (tr (td (span ((class "RktErr")) "Check failure"))) "\n" (tr (td (span ((class "RktErr")) "--------------------"))) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-equal?") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "22") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "16") (span ((class "RktPn")) ")"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td (span ((class "RktErr")) "--------------------"))) "\n" (tr (td (span ((class "RktErr")) "FAILURE"))) "\n" (tr (td (span ((class "RktErr")) "name: ") (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "check-equal?"))) "\n" (tr (td (span ((class "RktErr")) "location: ") (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "(eval 8 0 8 1)"))) "\n" (tr (td (span ((class "RktErr")) "expression: (check-equal? (cycle-length 22) 16)"))) "\n" (tr (td (span ((class "RktErr")) "actual: ") (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "42"))) "\n" (tr (td (span ((class "RktErr")) "expected: ") (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "16"))) "\n" (tr (td (span ((class "RktErr"))))) "\n" (tr (td (span ((class "RktErr")) "Check failure"))) "\n" (tr (td (span ((class "RktErr")) "--------------------"))) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n")) "\n") "\nAll of our test cases fail.  Hurrah!" (br) "\n" (h3 "\n4" (tt nbsp) (a ((href "http://www.blogger.com/blogger.g?blogID=2080885971644496896") (name "(part._.A_solution)"))) "A solution") "\nOk, now that we coded up the tests, letâs write a solution.  We can write out a\ndefinition for " (span ((class "RktSym")) "cycle-length") " almost straight out of the problem\nstatement:" (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29") (pltdoc "x")) "define")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._cond%29%29") (pltdoc "x")) "cond")))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._%7E3d%29%29") (pltdoc "x")) "=")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktVal")) "1") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/number-types.html#%28def._%28%28quote._%7E23%7E25kernel%29._odd%7E3f%29%29") (pltdoc "x")) "odd?")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._add1%29%29") (pltdoc "x")) "add1")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._add1%29%29") (pltdoc "x")) "add1")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._*%29%29") (pltdoc "x")) "*")) (span ((class "hspace")) nbsp) (span ((class "RktVal")) "3") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/number-types.html#%28def._%28%28quote._%7E23%7E25kernel%29._even%7E3f%29%29") (pltdoc "x")) "even?")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._add1%29%29") (pltdoc "x")) "add1")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._%2F%29%29") (pltdoc "x")) "/")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n" (tr (td (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "Let us try it out on a few values:"))) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktRes")) "1"))) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktRes")) "2"))) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "22") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktRes")) "16"))) "\n")) "\n") "\nIf we run this through our test suite, we should be fairly confident\nthat " (span ((class "RktSym")) "cycle-length") " is probably doing the right thing.\n(... modulo crazy inputs into the function such as " (span ((class "RktVal")) "0") ".  If we\nwant to guard against such inputs, we can use the features in\n" (a ((class "RktModLink") (href "http://doc.racket-lang.org/reference/contracts.html") (pltdoc "x")) (span ((class "RktSym")) "racket/contract")) ".)" (br) "\n" (h3 "\n5" (tt nbsp) (a ((href "http://www.blogger.com/blogger.g?blogID=2080885971644496896") (name "(part._.Optimizing_cycle-length)"))) "Optimizing " (span ((class "RktSym")) "cycle-length")) "\nHow fast is the performance for " (span ((class "RktSym")) "cycle-length") "?  Letâs try timing it for\na few values, using the " (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/time.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._time%29%29") (pltdoc "x")) "time")) " utility.  Weâll run cycle-length for a\nrange of numbers, and see how long it takes." (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/time.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._time%29%29") (pltdoc "x")) "time")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%29%29") (pltdoc "x")) "for")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktSym")) "i") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._in-range%29%29") (pltdoc "x")) "in-range")) (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "100000") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "i") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")) "\n")) "\n" (tr (td (span ((class "RktOut")) "cpu time: 890 real time: 889 gc time: 0"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n")) "\n") "\n" (h4 "\n5.1" (tt nbsp) (a ((href "http://www.blogger.com/blogger.g?blogID=2080885971644496896") (name "(part._.Introducing_an_accumulator)"))) "Introducing an accumulator") "\nThere are a few things we might do to improve the performance of this.  Having\nthe " (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._add1%29%29") (pltdoc "x")) "add1")) (span ((class "stt")) " ") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29") (pltdoc "x")) "...")) (span ((class "RktPn")) ")") " in the definition, waiting until the recursion finishes\nup, seems ok, but Iâm curious to see whether writing the definition with an\nexplicit accumulator will help us." (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29") (pltdoc "x")) "define")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length/acc") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n" (tr (td (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "Helper function:"))) "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29") (pltdoc "x")) "define")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length/acc") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "acc") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._cond%29%29") (pltdoc "x")) "cond")))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._%7E3d%29%29") (pltdoc "x")) "=")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktSym")) "acc") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/number-types.html#%28def._%28%28quote._%7E23%7E25kernel%29._odd%7E3f%29%29") (pltdoc "x")) "odd?")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length/acc") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._add1%29%29") (pltdoc "x")) "add1")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._*%29%29") (pltdoc "x")) "*")) (span ((class "hspace")) nbsp) (span ((class "RktVal")) "3") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._add1%29%29") (pltdoc "x")) "add1")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "acc") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/number-types.html#%28def._%28%28quote._%7E23%7E25kernel%29._even%7E3f%29%29") (pltdoc "x")) "even?")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length/acc") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._%2F%29%29") (pltdoc "x")) "/")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._add1%29%29") (pltdoc "x")) "add1")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "acc") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n")) "\n") "\n" (br) "\n" (div ((class "SIntrapara")) "\nWith this reformulation, how does this do now?\n") "\n" (div ((class "SIntrapara")) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/time.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._time%29%29") (pltdoc "x")) "time")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%29%29") (pltdoc "x")) "for")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktSym")) "i") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._in-range%29%29") (pltdoc "x")) "in-range")) (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "100000") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "i") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")) "\n")) "\n" (tr (td (span ((class "RktOut")) "cpu time: 790 real time: 790 gc time: 0"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n")) "\n") "\n") "\n" (br) "\nThis does help.  Although we do get an improvement, letâs drop this\nversion for now and go back to our previous definition since itâs\nsimplerâ" (wbr) "and because the next potential optimization will work better\non it!" (br) "\n" (h4 "\n5.2" (tt nbsp) (a ((href "http://www.blogger.com/blogger.g?blogID=2080885971644496896") (name "(part._.Adding_memoization)"))) "Adding memoization") "\nAnother thing that comes to mind is this: our first good version of\n" (span ((class "RktSym")) "cycle-length") " works recursively.  More to the point: repeated use of\n" (span ((class "RktSym")) "cycle-length") " can reuse prior results that we computed earlier.  Maybe\n" (span ((style "font-style: italic;")) "memoization") " will help.  Letâs try it out: weâll keep a small table of\nresults, and consult that to see if weâve already encountered the solution\nbefore." (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "We'll maintain a table of known results."))) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29") (pltdoc "x")) "define")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "table") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/hashtables.html#%28def._%28%28quote._%7E23%7E25kernel%29._make-hash%29%29") (pltdoc "x")) "make-hash")) (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29") (pltdoc "x")) "define")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._cond%29%29") (pltdoc "x")) "cond")))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "Consult the table:"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/hashtables.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._hash-has-key%7E3f%29%29") (pltdoc "x")) "hash-has-key?")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "table") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/hashtables.html#%28def._%28%28quote._%7E23%7E25kernel%29._hash-ref%29%29") (pltdoc "x")) "hash-ref")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "table") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._else%29%29") (pltdoc "x")) "else")))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "If we can't find it, compute it..."))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29") (pltdoc "x")) "define")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "answer"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._cond%29%29") (pltdoc "x")) "cond")))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._%7E3d%29%29") (pltdoc "x")) "=")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktVal")) "1") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/number-types.html#%28def._%28%28quote._%7E23%7E25kernel%29._odd%7E3f%29%29") (pltdoc "x")) "odd?")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._add1%29%29") (pltdoc "x")) "add1")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._add1%29%29") (pltdoc "x")) "add1")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._*%29%29") (pltdoc "x")) "*")) (span ((class "hspace")) nbsp) (span ((class "RktVal")) "3") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/number-types.html#%28def._%28%28quote._%7E23%7E25kernel%29._even%7E3f%29%29") (pltdoc "x")) "even?")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._add1%29%29") (pltdoc "x")) "add1")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._%2F%29%29") (pltdoc "x")) "/")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "... and then put it into the table."))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/hashtables.html#%28def._%28%28quote._%7E23%7E25kernel%29._hash-set%21%29%29") (pltdoc "x")) "hash-set!")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "table") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "answer") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "Don't forget to return the value back!"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktSym")) "answer") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n")) "\n") "\nDoes the overhead of setting up this table pay for itself?  Letâs see:" (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/time.html#%28form._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._time%29%29") (pltdoc "x")) "time")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%29%29") (pltdoc "x")) "for")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktSym")) "i") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._in-range%29%29") (pltdoc "x")) "in-range")) (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "100000") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "i") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")) "\n")) "\n" (tr (td (span ((class "RktOut")) "cpu time: 217 real time: 217 gc time: 44"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n")) "\n") "\nHey, not bad at all!  Thatâs significantly better." (br) "\nWe should make sure, of course, that all our test cases are running on this ok." (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-equal?") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1") (span ((class "RktPn")) ")"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-equal?") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2") (span ((class "RktPn")) ")"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-equal?") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "4") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "3") (span ((class "RktPn")) ")"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-equal?") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "5") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "6") (span ((class "RktPn")) ")"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-equal?") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "22") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "16") (span ((class "RktPn")) ")"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n")) "\n") "\nAllâs quiet on the " (span ((class "RktSym")) "cycle-length") " front.  The tests are all passing." (br) "\n" (h4 "\n5.3" (tt nbsp) (a ((href "http://www.blogger.com/blogger.g?blogID=2080885971644496896") (name "(part._.Advanced__abstracting_memoization_to_a_helper_macro)"))) "Advanced: abstracting memoization to a helper macro") "\nIt turns out that the kind of memoization weâve done here can be lifted out, so\nthat we can easily perform it at will.  That is, what weâre doing is something\nlike the following:" (br) "\n" (blockquote "\n") "\nGiven a definition that weâd like to memoize:" (br) "\n" (ul "\n" (li "create a table for exclusive use by the definition, and") "\n" (li "slightly tweak the definitionâs body so it consults the table\nbefore going through computation.") "\n") "\n" (br) "\n" (div ((class "SIntrapara")) "\nIn terms of Racket, we can say that like this:\n") "\n" (div ((class "SIntrapara")) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "A little helper to centralize the memoization logic"))) "\n" (tr (td (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "into a single rewrite rule:"))) "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29") (pltdoc "x")) "define-syntax-rule")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define/memo") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "name") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "id") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "body") (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29") (pltdoc "x")) "...")) (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/begin.html#%28form._%28%28quote._%7E23%7E25kernel%29._begin%29%29") (pltdoc "x")) "begin")))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29") (pltdoc "x")) "define")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "table") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/hashtables.html#%28def._%28%28quote._%7E23%7E25kernel%29._make-hash%29%29") (pltdoc "x")) "make-hash")) (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29") (pltdoc "x")) "define")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "name") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "id") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._cond%29%29") (pltdoc "x")) "cond")))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/hashtables.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._hash-has-key%7E3f%29%29") (pltdoc "x")) "hash-has-key?")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "table") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "id") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/hashtables.html#%28def._%28%28quote._%7E23%7E25kernel%29._hash-ref%29%29") (pltdoc "x")) "hash-ref")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "table") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "id") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._else%29%29") (pltdoc "x")) "else")))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29") (pltdoc "x")) "define")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "answer") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/begin.html#%28form._%28%28quote._%7E23%7E25kernel%29._begin%29%29") (pltdoc "x")) "begin")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "body") (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29") (pltdoc "x")) "...")) (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/hashtables.html#%28def._%28%28quote._%7E23%7E25kernel%29._hash-set%21%29%29") (pltdoc "x")) "hash-set!")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "table") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "id") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "answer") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktSym")) "answer") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n")) "\n") "\n") "\n" (br) "\nThis defines a small rewrite rule that expresses the idea of memoizing simple,\n1-argument function definitions.  Once we have this " (span ((class "RktSym")) "define/memo") ", we\ncan rewrite " (span ((class "RktSym")) "cycle-length") " to use it:" (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "define/memo") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._cond%29%29") (pltdoc "x")) "cond")))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._%7E3d%29%29") (pltdoc "x")) "=")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktVal")) "1") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/number-types.html#%28def._%28%28quote._%7E23%7E25kernel%29._odd%7E3f%29%29") (pltdoc "x")) "odd?")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._add1%29%29") (pltdoc "x")) "add1")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._add1%29%29") (pltdoc "x")) "add1")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._*%29%29") (pltdoc "x")) "*")) (span ((class "hspace")) nbsp) (span ((class "RktVal")) "3") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/number-types.html#%28def._%28%28quote._%7E23%7E25kernel%29._even%7E3f%29%29") (pltdoc "x")) "even?")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._add1%29%29") (pltdoc "x")) "add1")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._%2F%29%29") (pltdoc "x")) "/")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n")) "\n") "\nwhich is nice because itâs easy to read." (br) "\n" (h3 "\n6" (tt nbsp) (a ((href "http://www.blogger.com/blogger.g?blogID=2080885971644496896") (name "(part._.Cycling_back_to_a_loop)"))) "Cycling back to a loop") "\nNow that we have a fairly robust " (span ((class "RktSym")) "cycle-length") " function, we can do the\nrest of the problem.  Given a range of numbers, we want to go through them,\ncompute the cycle lengths, and pick out the biggest one." (br) "\nWe can try to write this directly with a " (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Flist%29%29") (pltdoc "x")) "for/list")) " to create a list of\nall the cycle-lengths, and " (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/procedures.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._apply%29%29") (pltdoc "x")) "apply")) " the " (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._max%29%29") (pltdoc "x")) "max")) " across that list.\nLetâs write this in code:" (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29") (pltdoc "x")) "define")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "max-cycle-length-range") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "i") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "j") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/procedures.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._apply%29%29") (pltdoc "x")) "apply")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._max%29%29") (pltdoc "x")) "max")))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Flist%29%29") (pltdoc "x")) "for/list")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktSym")) "n") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._in-range%29%29") (pltdoc "x")) "in-range")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "i") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._add1%29%29") (pltdoc "x")) "add1")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "j") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "(add1 j) for inclusion ..."))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "i") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n")) "\n") "\n" (br) "\n" (div ((class "SIntrapara")) "\nLetâs write a few test cases to make sure that this is computing the right\nthing:\n") "\n" (div ((class "SIntrapara")) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "From the \"Sample Output\" section of"))) "\n" (tr (td (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "http://acm.uva.es/p/v1/100.html"))) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-equal?") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "max-cycle-length-range") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "10") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "20") (span ((class "RktPn")) ")"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td (span ((class "RktErr")) "--------------------"))) "\n" (tr (td (span ((class "RktErr")) "FAILURE"))) "\n" (tr (td (span ((class "RktErr")) "name: ") (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "check-equal?"))) "\n" (tr (td (span ((class "RktErr")) "location: ") (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "(eval 31 0 31 1)"))) "\n" (tr (td (span ((class "RktErr")) "expression: (check-equal? (max-cycle-length-range 1 10) 20)"))) "\n" (tr (td (span ((class "RktErr")) "actual: ") (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "1"))) "\n" (tr (td (span ((class "RktErr")) "expected: ") (span ((class "hspace")) nbsp nbsp) (span ((class "RktErr")) "20"))) "\n" (tr (td (span ((class "RktErr"))))) "\n" (tr (td (span ((class "RktErr")) "Check failure"))) "\n" (tr (td (span ((class "RktErr")) "--------------------"))) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n")) "\n") "\n") "\n" (br) "\nWhat?!  Oh, whoops, I wasnât using the " (span ((class "RktSym")) "n") " in the loop.  Silly me.  Letâs fix that." (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29") (pltdoc "x")) "define")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "max-cycle-length-range") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "i") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "j") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/procedures.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._apply%29%29") (pltdoc "x")) "apply")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._max%29%29") (pltdoc "x")) "max")))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Flist%29%29") (pltdoc "x")) "for/list")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktSym")) "n") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._in-range%29%29") (pltdoc "x")) "in-range")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "i") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._add1%29%29") (pltdoc "x")) "add1")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "j") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n")) "\n") "\nThank goodness for test cases." (br) "\nOk, letâs try that again." (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-equal?") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "max-cycle-length-range") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "10") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "20") (span ((class "RktPn")) ")"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-equal?") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "max-cycle-length-range") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "100") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "200") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "125") (span ((class "RktPn")) ")"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-equal?") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "max-cycle-length-range") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "201") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "210") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "89") (span ((class "RktPn")) ")"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-equal?") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "max-cycle-length-range") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "900") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1000") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "174") (span ((class "RktPn")) ")"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n")) "\n") "\nAll passing?  Much better!" (br) "\n" (h4 "\n6.1" (tt nbsp) (a ((href "http://www.blogger.com/blogger.g?blogID=2080885971644496896") (name "(part._.Advanced__maximizing_a_loop)"))) "Advanced: maximizing a loop") "\nIt would be nice if we could directly express taking the maximum\nacross a " (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%29%29") (pltdoc "x")) "for")) " loop.  Weâre performing the maximum computation\nby first constructing a list of all the cycle lengths, then applying\n" (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._max%29%29") (pltdoc "x")) "max")) " over the whole list.  Can we avoid that auxiliary list\nconstruction, and just compute the max as weâre running through the\nnumbers?" (br) "\nIn fact, there are several variations of " (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%29%29") (pltdoc "x")) "for")) " loops in Racket,\nso maybe one of those variations will work for us.  For example, we\ncould use " (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Ffold%29%29") (pltdoc "x")) "for/fold")) ", which gives us enough expressive power to\ntake the maximum during iteration." (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Ffold%29%29") (pltdoc "x")) "for/fold")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktSym")) "current-max") (span ((class "hspace")) nbsp) (span ((class "RktVal")) (span ((class "nobreak")) "-i") "nf.0") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktSym")) "n") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "'") (span ((class "RktVal")) "(") (span ((class "RktVal")) "3") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "4") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "5") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "9") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "6") (span ((class "RktVal")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/if.html#%28form._%28%28quote._%7E23%7E25kernel%29._if%29%29") (pltdoc "x")) "if")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._%7E3e%29%29") (pltdoc "x")) ">")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "current-max") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "current-max") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")) "\n")) "\n" (tr (td (span ((class "RktRes")) "9"))) "\n")) "\n") "\nThere are other versions of " (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%29%29") (pltdoc "x")) "for")) " loops, such as the one for\ntaking sums (" (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Fsum%29%29") (pltdoc "x")) "for/sum")) ").  But as of this writing, there doesnât\nseem to be be a " (span ((class "RktSym")) "for/max") " form that lets us take the maximum\ndirectly." (br) "\nThe question arises: how difficult is it to build " (span ((class "RktSym")) "for/max") "?" (br) "\nIt turns out that itâs not too bad, though it requires a little more macrology:\nweâll use " (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Ffold%2Fderived%29%29") (pltdoc "x")) "for/fold/derived")) " to express our own " (span ((class "RktSym")) "for/max") " loop in terms of folding:" (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define-syntax%29%29") (pltdoc "x")) "define-syntax")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "for/max") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "stx") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._syntax-case%29%29") (pltdoc "x")) "syntax-case")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "stx") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29") (pltdoc "x")) "_")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "clauses") (span ((class "hspace")) nbsp) (span ((class "RktPn")) ". ") (span ((class "RktSym")) "defs+exprs") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._with-syntax%29%29") (pltdoc "x")) "with-syntax")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktSym")) "original") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "stx") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktRdr")) "#'") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Ffold%2Fderived%29%29") (pltdoc "x")) "for/fold/derived")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "original"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktSym")) "current-max") (span ((class "hspace")) nbsp) (span ((class "RktVal")) (span ((class "nobreak")) "-i") "nf.0") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktSym")) "clauses"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29") (pltdoc "x")) "define")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "maybe-new-max"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29") (pltdoc "x")) "let")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) ". ") (span ((class "RktSym")) "defs+exprs") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/if.html#%28form._%28%28quote._%7E23%7E25kernel%29._if%29%29") (pltdoc "x")) "if")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._%7E3e%29%29") (pltdoc "x")) ">")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "maybe-new-max") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "current-max") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktSym")) "maybe-new-max"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktSym")) "current-max") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n")) "\n") "\nEssentially, as weâre looping through numbers, we maintain a\n" (span ((class "RktSym")) "current-max") ", and update that max accordingly as we walk\nacross the iteration.  The rest of the code in " (span ((class "RktSym")) "for/max") "\ndelegates the rest of the gruntwork to\n" (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Ffold%29%29") (pltdoc "x")) "for/fold")) " (technically, " (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Ffold%2Fderived%29%29") (pltdoc "x")) "for/fold/derived")) ")." (br) "\nWe must test this, of course:" (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "Edge case: if we take the maximum of no numbers,"))) "\n" (tr (td (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "let's see -inf.0."))) "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-equal?") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "for/max") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktSym")) "i") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "'") (span ((class "RktVal")) "(") (span ((class "RktVal")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktSym")) "i") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktVal")) (span ((class "nobreak")) "-i") "nf.0") (span ((class "RktPn")) ")"))) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-equal?"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "for/max") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktSym")) "i") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "'") (span ((class "RktVal")) "(") (span ((class "RktVal")) "3") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "4") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "5") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "9") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "6") (span ((class "RktVal")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktSym")) "i") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp) (span ((class "RktVal")) "9") (span ((class "RktPn")) ")"))) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-equal?"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "for/max") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) "i") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._in-range%29%29") (pltdoc "x")) "in-range")) (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "23") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktSym")) "i") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp) (span ((class "RktVal")) "22") (span ((class "RktPn")) ")"))) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-equal?"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "for/max") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktSym")) "n") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "'") (span ((class "RktVal")) "(") (span ((class "RktVal")) "3.14159") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2.71828") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1.61803") (span ((class "RktVal")) ")") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "s") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "'") (span ((class "RktVal")) "(") (span ((class "RktVal")) (span ((class "nobreak")) "-1")) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktVal")) "1") (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktVal")) "1") (span ((class "RktVal")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._*%29%29") (pltdoc "x")) "*")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "s") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2.71828") (span ((class "RktPn")) ")"))) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n" (tr (td (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "... and of course..."))) "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-equal?"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "for/max") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) "i") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._in-range%29%29") (pltdoc "x")) "in-range")) (span ((class "hspace")) nbsp) (span ((class "RktVal")) "900") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._add1%29%29") (pltdoc "x")) "add1")) (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1000") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "i") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp) (span ((class "RktVal")) "174") (span ((class "RktPn")) ")"))) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n")) "\n") "\nLooks good.  With this, letâs express " (span ((class "RktSym")) "max-cycle-length-range") "\nin terms of " (span ((class "RktSym")) "for/max") " now:" (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29") (pltdoc "x")) "define")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "max-cycle-length-range") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "i") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "j") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "for/max") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktSym")) "n") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._in-range%29%29") (pltdoc "x")) "in-range")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "i") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._add1%29%29") (pltdoc "x")) "add1")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "j") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")) "\n")) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")) "\n")) "\n")) "\n") "\n" (h3 "\n7" (tt nbsp) (a ((href "http://www.blogger.com/blogger.g?blogID=2080885971644496896") (name "(part._.Making_a_module)"))) "Making a module") "\nNow that we have most of the solution worked out, letâs make a module\nthat encapsulates what weâve done.  Letâs lift up the definitions that\nwe used to make the solution nice and pretty, and place them into\n" (span ((class "stt")) "\"helpers.rkt\"") ":" (br) "\n" (br) "\n" (div ((class "SIntrapara")) "\n" (blockquote ((class "Rfilebox")) "\n") "\n" (div ((class "Rfiletitle")) "\n" (span ((class "Rfilename")) (span ((class "stt")) "\"helpers.rkt\""))) "\n" (blockquote ((class "Rfilecontent")) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "RktMeta")) "#lang") (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (a ((class "RktModLink") (href "http://doc.racket-lang.org/reference/index.html") (pltdoc "x")) (span ((class "RktSym")) "racket")) (span ((class "RktMeta"))))) "\n" (tr (td)) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._provide%29%29") (pltdoc "x")) "provide")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "for/max") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "define/memo") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td)) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define-syntax%29%29") (pltdoc "x")) "define-syntax")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "for/max") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "stx") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._syntax-case%29%29") (pltdoc "x")) "syntax-case")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "stx") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29.__%29%29") (pltdoc "x")) "_")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "clauses") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) ".") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "defs+exprs") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._with-syntax%29%29") (pltdoc "x")) "with-syntax")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktSym")) "original") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "stx") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._syntax%29%29") (pltdoc "x")) "#'")) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%2Ffold%2Fderived%29%29") (pltdoc "x")) "for/fold/derived")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "original") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktSym")) "current-max") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "-inf.0") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "clauses") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29") (pltdoc "x")) "define")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "maybe-new-max") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/let.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._let%29%29") (pltdoc "x")) "let")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktPn")) ")") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktMeta")) ".") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "defs+exprs") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/if.html#%28form._%28%28quote._%7E23%7E25kernel%29._if%29%29") (pltdoc "x")) "if")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._%7E3e%29%29") (pltdoc "x")) ">")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "maybe-new-max") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "current-max") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "maybe-new-max") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "current-max") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td)) "\n" (tr (td)) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fmisc..rkt%29._define-syntax-rule%29%29") (pltdoc "x")) "define-syntax-rule")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define/memo") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "name") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "id") (span ((class "RktPn")) ")") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "body") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29") (pltdoc "x")) "...")) (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/begin.html#%28form._%28%28quote._%7E23%7E25kernel%29._begin%29%29") (pltdoc "x")) "begin")) (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29") (pltdoc "x")) "define")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "table") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/hashtables.html#%28def._%28%28quote._%7E23%7E25kernel%29._make-hash%29%29") (pltdoc "x")) "make-hash")) (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29") (pltdoc "x")) "define")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "name") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "id") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._cond%29%29") (pltdoc "x")) "cond")) (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/hashtables.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._hash-has-key%7E3f%29%29") (pltdoc "x")) "hash-has-key?")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "table") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "id") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/hashtables.html#%28def._%28%28quote._%7E23%7E25kernel%29._hash-ref%29%29") (pltdoc "x")) "hash-ref")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "table") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "id") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "[") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._else%29%29") (pltdoc "x")) "else")) (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29") (pltdoc "x")) "define")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "answer") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/begin.html#%28form._%28%28quote._%7E23%7E25kernel%29._begin%29%29") (pltdoc "x")) "begin")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "body") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29") (pltdoc "x")) "...")) (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/hashtables.html#%28def._%28%28quote._%7E23%7E25kernel%29._hash-set%21%29%29") (pltdoc "x")) "hash-set!")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "table") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "id") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "answer") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "answer") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td)) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/module.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._module%2B%29%29") (pltdoc "x")) "module+")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "test") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._require%29%29") (pltdoc "x")) "require")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "rackunit") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-equal?") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "for/max") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktSym")) "i") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/quote.html#%28form._%28%28quote._%7E23%7E25kernel%29._quote%29%29") (pltdoc "x")) "'")) (span ((class "RktPn")) "(") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "i") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "-inf.0") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-equal?") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "for/max") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktSym")) "i") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/quote.html#%28form._%28%28quote._%7E23%7E25kernel%29._quote%29%29") (pltdoc "x")) "'")) (span ((class "RktPn")) "(") (span ((class "RktVal")) "3") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "1") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "4") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "1") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "5") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "9") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "2") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "6") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "i") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "9") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-equal?") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "for/max") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) "i") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._in-range%29%29") (pltdoc "x")) "in-range")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "1") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "23") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "i") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "22") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td)) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-equal?") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "for/max") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktSym")) "n") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/quote.html#%28form._%28%28quote._%7E23%7E25kernel%29._quote%29%29") (pltdoc "x")) "'")) (span ((class "RktPn")) "(") (span ((class "RktVal")) "3.14159") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "2.71828") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "1.61803") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "[") (span ((class "RktSym")) "s") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/quote.html#%28form._%28%28quote._%7E23%7E25kernel%29._quote%29%29") (pltdoc "x")) "'")) (span ((class "RktPn")) "(") (span ((class "RktVal")) "-1") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "1") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "1") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._*%29%29") (pltdoc "x")) "*")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "n") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "s") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "2.71828") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n")) "\n") "\n") "\n") "\n" (div ((class "SIntrapara")) "\nWho knows?  We might reuse " (span ((class "stt")) "\"helpers.rkt\"") " sometime.") "\n" (br) "\n(You may note that the bottom of " (span ((class "stt")) "\"helpers.rkt\"") " contains a\n" (a ((href "http://docs.racket-lang.org/guide/Module_Syntax.html#%28part._main-and-test%29")) (span ((class "RktSym")) "test") "\nsubmodule") " which collects the unit tests that weâve written.  We can\nrun a moduleâs test suite by using\n" (a ((href "http://docs.racket-lang.org/raco/test.html")) (span ((class "stt")) "raco test")) ".)" (br) "\nWith our " (span ((class "stt")) "\"helpers.rkt\"") " in in hand, letâs put our solution in\n" (span ((class "stt")) "\"three-n-plus-one.rkt\"") ":" (br) "\n" (blockquote ((class "Rfilebox")) "\n") "\n" (div ((class "Rfiletitle")) "\n" (span ((class "Rfilename")) (span ((class "stt")) "\"three-n-plus-one.rkt\""))) "\n" (blockquote ((class "Rfilecontent")) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "RktMeta")) "#lang") (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (a ((class "RktModLink") (href "http://doc.racket-lang.org/reference/index.html") (pltdoc "x")) (span ((class "RktSym")) "racket")) (span ((class "RktMeta"))))) "\n" (tr (td)) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._require%29%29") (pltdoc "x")) "require")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "\"helpers.rkt\"") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td)) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define/memo") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "n") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._cond%29%29") (pltdoc "x")) "cond")) (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._%7E3d%29%29") (pltdoc "x")) "=")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "n") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "1") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "1") (span ((class "RktPn")) "]") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/number-types.html#%28def._%28%28quote._%7E23%7E25kernel%29._odd%7E3f%29%29") (pltdoc "x")) "odd?")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "n") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._add1%29%29") (pltdoc "x")) "add1")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._add1%29%29") (pltdoc "x")) "add1")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._*%29%29") (pltdoc "x")) "*")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "3") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "n") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/number-types.html#%28def._%28%28quote._%7E23%7E25kernel%29._even%7E3f%29%29") (pltdoc "x")) "even?")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "n") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._add1%29%29") (pltdoc "x")) "add1")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._%2F%29%29") (pltdoc "x")) "/")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "n") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "2") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td)) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29") (pltdoc "x")) "define")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "max-cycle-length-range") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "i") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "j") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "for/max") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktSym")) "n") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._in-range%29%29") (pltdoc "x")) "in-range")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "i") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._add1%29%29") (pltdoc "x")) "add1")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "j") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "n") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td)) "\n" (tr (td)) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/module.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._module%2B%29%29") (pltdoc "x")) "module+")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "test") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._require%29%29") (pltdoc "x")) "require")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "rackunit") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td)) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-equal?") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "1") (span ((class "RktPn")) ")") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "1") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-equal?") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "2") (span ((class "RktPn")) ")") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "2") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-equal?") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "4") (span ((class "RktPn")) ")") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "3") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-equal?") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "5") (span ((class "RktPn")) ")") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "6") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-equal?") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "22") (span ((class "RktPn")) ")") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "16") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td)) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-equal?") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "max-cycle-length-range") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "1") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "10") (span ((class "RktPn")) ")") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "20") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-equal?") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "max-cycle-length-range") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "100") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "200") (span ((class "RktPn")) ")") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "125") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-equal?") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "max-cycle-length-range") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "201") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "210") (span ((class "RktPn")) ")") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "89") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-equal?") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "max-cycle-length-range") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "900") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "1000") (span ((class "RktPn")) ")") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "174") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "check-equal?") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "for/max") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) "i") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._in-range%29%29") (pltdoc "x")) "in-range")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "900") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/generic-numbers.html#%28def._%28%28quote._%7E23%7E25kernel%29._add1%29%29") (pltdoc "x")) "add1")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "1000") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cycle-length") (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "i") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktMeta"))) (span ((class "RktVal")) "174") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n")) "\n") "\n") "\n" (h3 "\n8" (tt nbsp) (a ((href "http://www.blogger.com/blogger.g?blogID=2080885971644496896") (name "(part._.Integrating_with_.I_.O_and_a_main)"))) "Integrating with I/O and a " (span ((class "stt")) "main")) "\nFinally, all this unit testing is fine and dandy, but we donât\nactually read input from standard input.  Letâs fix that, and modify\n" (span ((class "stt")) "\"three-n-plus-one.rkt\"") " so it can be run as the " (span ((style "font-style: italic;")) "main") "\nentry point." (br) "\n" (br) "\n" (div ((class "SIntrapara")) "\nWe can read individual lines as strings by iterating across\n" (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/port-ops.html#%28def._%28%28quote._%7E23%7E25kernel%29._current-input-port%29%29") (pltdoc "x")) "current-input-port")) " with " (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._in-lines%29%29") (pltdoc "x")) "in-lines")) ":\n") "\n" (div ((class "SIntrapara")) "\n" (blockquote ((class "SCodeFlow")) "\n") "\n" (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%29%29") (pltdoc "x")) "for")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktSym")) "line") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._in-lines%29%29") (pltdoc "x")) "in-lines")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/port-ops.html#%28def._%28%28quote._%7E23%7E25kernel%29._current-input-port%29%29") (pltdoc "x")) "current-input-port")) (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/stx-patterns.html#%28form._%28%28lib._racket%2Fprivate%2Fstxcase-scheme..rkt%29._......%29%29") (pltdoc "x")) "...")) (span ((class "RktPn")) ")")) "\n" (br) "\nOnce we have a line in hand, we can parse out the individual chunks\nwith " (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/Reading.html#%28def._%28%28quote._%7E23%7E25kernel%29._read%29%29") (pltdoc "x")) "read")) ".  " (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/Reading.html#%28def._%28%28quote._%7E23%7E25kernel%29._read%29%29") (pltdoc "x")) "read")) " doesnât normally read from strings\ndirectly, so we first translate each string into a port-like value\nusing " (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/stringport.html#%28def._%28%28quote._%7E23%7E25kernel%29._open-input-string%29%29") (pltdoc "x")) "open-input-string")) "." (br) "\nLast of all, letâs add the following to the bottom of\n" (span ((class "stt")) "\"three-n-plus-one.rkt\"") ":" (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/module.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._module%2B%29%29") (pltdoc "x")) "module+")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "main"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/for.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._for%29%29") (pltdoc "x")) "for")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktSym")) "line") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._in-lines%29%29") (pltdoc "x")) "in-lines")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/port-ops.html#%28def._%28%28quote._%7E23%7E25kernel%29._current-input-port%29%29") (pltdoc "x")) "current-input-port")) (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29") (pltdoc "x")) "define")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "line-port") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/stringport.html#%28def._%28%28quote._%7E23%7E25kernel%29._open-input-string%29%29") (pltdoc "x")) "open-input-string")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "line") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29") (pltdoc "x")) "define")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "i") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/Reading.html#%28def._%28%28quote._%7E23%7E25kernel%29._read%29%29") (pltdoc "x")) "read")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "line-port") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/define.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._define%29%29") (pltdoc "x")) "define")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "j") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/Reading.html#%28def._%28%28quote._%7E23%7E25kernel%29._read%29%29") (pltdoc "x")) "read")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "line-port") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/when_unless.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._when%29%29") (pltdoc "x")) "when")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/if.html#%28form._%28%28lib._racket%2Fprivate%2Fletstx-scheme..rkt%29._and%29%29") (pltdoc "x")) "and")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/number-types.html#%28def._%28%28quote._%7E23%7E25kernel%29._number%7E3f%29%29") (pltdoc "x")) "number?")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "i") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/number-types.html#%28def._%28%28quote._%7E23%7E25kernel%29._number%7E3f%29%29") (pltdoc "x")) "number?")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "j") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/Writing.html#%28def._%28%28quote._%7E23%7E25kernel%29._printf%29%29") (pltdoc "x")) "printf")) (span ((class "hspace")) nbsp) (span ((class "RktVal")) "\"~a ~a ~a\\n\""))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktSym")) "i") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "j"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "max-cycle-length-range") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "i") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "j") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")) "\n") "\nThis defines a " (span ((class "stt")) "main") " submodule.  When we run\n" (span ((class "stt")) "\"three-n-plus-one.rkt\"") " directly from the command line, it will\nrun " (span ((class "stt")) "main") ":" (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0")) (tbody "\n" (tr (td (span ((class "stt")) (span ((class "stt")) "$ cat sample-data.txt")))) "\n" (tr (td (span ((class "stt")) (span ((class "stt")) "1 10")))) "\n" (tr (td (span ((class "stt")) (span ((class "stt")) "100 200")))) "\n" (tr (td (span ((class "stt")) (span ((class "stt")) "201 210")))) "\n" (tr (td (span ((class "stt")) (span ((class "stt")) "900 1000")))) "\n" (tr (td)) "\n" (tr (td (span ((class "stt")) (span ((class "stt")) "$ racket three-n-plus-one.rkt " "<" " sample-data.txt")))) "\n" (tr (td (span ((class "stt")) (span ((class "stt")) "1 10 20")))) "\n" (tr (td (span ((class "stt")) (span ((class "stt")) "100 200 125")))) "\n" (tr (td (span ((class "stt")) (span ((class "stt")) "201 210 89")))) "\n" (tr (td (span ((class "stt")) (span ((class "stt")) "900 1000 174")))) "\n")) "\n") "\n" (h3 "\n9" (tt nbsp) (a ((href "http://www.blogger.com/blogger.g?blogID=2080885971644496896") (name "(part._.The_files)"))) "The files") "\n" (ul "\n" (li (a ((href "http://hashcollision.org/three-n-plus-one/helpers.rkt")) "helpers.rkt")) "\n" (li (a ((href "http://hashcollision.org/three-n-plus-one/three-n-plus-one.rkt")) "three-n-plus-one.rkt")) "\n") "\n") (link ((href "http://blog.racket-lang.org/feeds/1332705295037674198/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=1332705295037674198") (rel "replies") (title "6 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1332705295037674198") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1332705295037674198") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/10/the-3n1-problem_4990.html") (rel "alternate") (title "The 3n+1 problem") (type "text/html"))) (author (name "Danny Yoo") (uri "https://www.blogger.com/profile/04298793721597988477") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "6")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6798041830905815449") (published "2012-09-28T11:32:00.000-04:00") (updated "2012-09-28T11:52:19.799-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "I Write Funny-Lookin' Racket Code: An Alternate Style for Delimiters and Indentation") (post-content "A lot of people are quite surprised when they see the Racket code I write. Let's say I needed a function to render hash table values as expressions that would produce the same value.  A \"normal\" Racketeer might write something like the following." (br) "\n" (pre (code "(define (hash->expr ht)\n  (cons 'hash\n        (for/fold ([args '()])\n                  ([(k v) (in-hash ht)])\n          (cons (list 'quote k)\n                (cons (list 'quote v)\n                      args)))))")) "There might be a few variances in style, especially depending on whether one has Racket or Emacs set up to indent " (code "for/fold") " specially.  Almost no one, however, would come up with the code I write." (br) "\n" (pre (code "(define (hash->expr ht)\n  (cons 'hash\n    (for/fold\n        {[args '()]}\n        {[{k v} (in-hash ht)]}\n      (cons (list 'quote k)\n        (cons (list 'quote v)\n          args)))))")) "The biggest reaction I get is from the presence of " (code "{") "curly braces" (code "}") ", but those are largely incidental as far as I'm concerned. It's all about the indentation to me." (br) "\n" (br) "\n" (hr) (br) "\nA while back I found that my " (code ".emacs") " file was growing in proportion to my Racket code" mdash "all of it I had ever written, in fact.  Every new macro in my code or in the latest Racket version needed a line like: " (pre (code "(put 'for/fold 'scheme-indent-function 2)")) "This would tell Emacs " (em "more or less") " how I wanted it to indent the given form.  So long as I followed the use patterns Emacs could cope with.  For instance, with " (code "for/fold") ", Emacs could cope with both of the \"special\" arguments on the same line as the macro name, or both on separate lines.  Changing that up got weird results." (br) "\n" (br) "\nAlso, function arguments would lead to significant rightward-creep in my indentation.  Adding up the lengths of a list of strings, for instance, might look like this:" (br) "\n" (pre (code "(foldl +\n       0\n       (map string-length\n            (list \"There\"\n                  \"are\"\n                  \"thirty-four\"\n                  \"characters\"\n                  \"here.\")))")) "This wastes a lot of space on the left, and to me it doesn't do enough for readability to justify it.  I don't need my eyes drawn to " (code "0") " and " (code "+") " nearly that much." (br) "\n" (br) "\nI discovered a new style of indentation in the {" (em "Little") ", " (em "Seasoned") ", " (em "Reasoned") "} " (em "Schemer") " series of books by Dan Friedman and his many cohorts.  These books always start a new indentation level at a fixed distance in from the previous one, regardless of the cause for the indentation.  Arguments on the same line as the function or macro name are ignored; they do not \"push\" indentation over to the right at all." (br) "\n" (br) "\nThis indentation style has a lot of appeal to me for a number of reasons.  One, it wastes no space on the left.  Two, it never needs to \"know\" what a given macro means.  It doesn't matter if you're applying " (code "+") " or " (code "lambda") " or " (code "for/fold") ", all lines beyond the first move two (or however many) characters to the right.  I saw a light at the end of the tunnel: no more " (code ".emacs") " customization for every new form!" (br) "\n" (br) "\nThis style leaves two issues.  One, how to indent " (code "cond") "?  The " (em "Little") " books treat " (code "cond") " differently, indenting each clause only as far as the keyword " (code "cond") ", while other form's arguments are pushed in slightly farther than the function or macro name.  Two, how to \"fix\" forms like " (code "for/fold") " where a few lines really ought to be indented differently?  A straight-up interpretation of this style would generate code like this:" (br) "\n" (pre (code "(for/fold\n  ([x 0])\n  ([str (in-list '(\"12\" \"characters\"))])\n  (define n (string-length str))\n  (+ x n))")) "Now we can't tell visually where the " (code "for/fold") " iteration clauses leave off and the loop body definitions and expressions begin." (br) "\n" (br) "\nThe " (code "cond") " issue is easy enough to resolve.  In Racket, unlike in vanilla Scheme, we use " (code "[") "brackets" (code "]") " around " (code "cond") " clauses.  The same goes for a number of other repeated clauses, in fact: " (code "let") ", " (code "match") ", " (code "syntax-parse") ", and so forth.  So I decided my new, custom indentation style would indent " (code "[") "brackets" (code "]") " differently from " (code "(") "parentheses" (code ")") ".  Parens indent one farther than brackets.  That way," (br) "\n" (pre (code "(let ([x 1]\n      [y 2])\n  (+ x y))")) "doesn't become" (br) "\n" (pre (code "(let ([x 1]\n       [y 2])\n  (+ x y))")) "Since I already use " (code "[") "brackets" (code "]") " every time I have a repeated, non-expression clause, this rule does exactly what I need it to do." (br) "\n" (br) "\nOnce I had differentiated " (code "[]") " from " (code "()") ", resolving the " (code "for/fold") " issue was obvious.  I needed a new indentation rule and a new lexical marker: " (code "{") "braces" (code "}") ".  Now every time I have a " (em "fixed number") " of special non-expression forms in a macro, I wrap them in braces.  Anything in braces is indented slightly farther (four spaces rather than two) than ordinary sub-expressions.  So my " (code "for/fold") " example comes out like this." (br) "\n" (pre (code "(for/fold\n    {[x 0]}\n    {[str (in-list '(\"12\" \"characters\"))]}\n  (define n (string-length str))\n  (+ x n))")) "Suddently it's quite clear which parts are \"special\" in the " (code "for/fold") " macro." (br) "\n" (br) "\nSo now I write code using " (code "(") "parentheses" (code ")") " for definitions, expressions, and anything else resembling a nestable, expandable term (e.g. " (code "match") " patterns, syntax templates), " (code "[") "brackets" (code "]") " for repeated, non-expandable clauses (e.g. " (code "cond") " clauses, " (code "let") " bindings), and " (code "{") "braces" (code "}") " for non-repeated, non-expandable forms (e.g. " (code "lambda") " formals, " (em "groups") " of " (code "let") " bindings).  And I don't bother to align function arguments; I tend to treat the most significant argument as an \"accumulator\", and put everything else on one line if I can." (br) "\n" (pre (code "(foldl + 0\n  (map string-length\n    (list\n      \"There\"\n      \"are\"\n      \"thirty-four\"\n      \"characters\"\n      \"here.\")))")) "The way I read this code, the first line tells us we are performing a summation; the second line tells us we want the length of each string; the third line tells us we have a list coming; and the rest give its contents.  The result \"accumulates\" from a list to its lengths to their sum as the indentation cascades out and up from the inside." (br) "\n" (br) "\nWith these three rules, I now write my Racket code without bothering to customize my " (code ".emacs") " file as I go.  I just use delimiters judiciously to tell Emacs how I want everything indented, and everything comes out pretty much how I want it." (br) "\n" (br) "\nFor anyone interested in installing this indentation mode or looking at its source code, I've put the file up on GitHub at:" (br) "\n" (blockquote (a ((href "https://github.com/carl-eastlund/simple-sexp")) "https://github.com/carl-eastlund/simple-sexp")) "To use it, just put it somewhere your Emacs knows to look for Elisp code and add " (code "(require 'simple-sexp)") " to your " (code ".emacs") " file." (br) "\n" (br) "\n" (strong "Addendum:") " Oh, and there's some structured s-expression editing code in that file as well.  It preserves matched parens, brackets, braces, and quotes (for strings).  It's probably a much inferior implementation of things like paredit; this code represents the flailings of an Elisp novice.  Use at your own peril." (br) "\n") (link ((href "http://blog.racket-lang.org/feeds/6798041830905815449/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=6798041830905815449") (rel "replies") (title "3 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/6798041830905815449") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/6798041830905815449") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/09/i-write-funny-lookin-racket-code.html") (rel "alternate") (title "I Write Funny-Lookin' Racket Code: An Alternate Style for Delimiters and Indentation") (type "text/html"))) (author (name "Carl Eastlund") (uri "https://www.blogger.com/profile/00965085482378134816") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "3")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2793987134936360937") (published "2012-08-29T13:00:00.000-04:00") (updated "2012-08-29T13:00:34.068-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "RacketCon 2012") (post-content "We're pleased to announce that " (a ((href "http://con.racket-lang.org/")) "(second RacketCon)") " will take place on October 13, 2012, at Northeastern University in Boston.  This year, RacketCon will feature 3 2-hour tutorial sessions, as well as a series of short talks about development in and of Racket over the last year." (br) "\n" (br) "\nPotential tutorial sessions include:" (br) "\n" (ul (li "Building a new domain-specific language using syntactic extension") "\n" (li "Using contracts in application development") "\n" (li "Adding types to an existing application with Typed Racket") "\n" (li "Parallelizing Racket applications with futures and places") "\n") "Potential talks include:" (br) "\n" (ul (li "submodules") "\n" (li "WhaleSong") "\n" (li "futures and visualization") "\n" (li "distributed places") "\n" (li "optimization coaching") "\n" (li "Dracula and ACL2") "\n" (li "PLT Redex") "\n") "Lunch will be provided." (br) "\n" (br) "\nOn Sunday after RacketCon, we plan to hold a hackathon to work as a group on various Racket projects such as documentation improvements and FFI bindings.  This will be organized by " (a ((href "http://www.ccs.neu.edu/home/asumu/")) "Asumu Takikawa") "." (br) "\n" (br) "\nTo register, fill out " (a ((href "http://bit.ly/racketconsignup")) "this form") ".  The " (a ((href "http://con.racket-lang.org/")) "conference website") " has more information." (br) "\n" (br) "\n") (link ((href "http://blog.racket-lang.org/feeds/2793987134936360937/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=2793987134936360937") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2793987134936360937") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2793987134936360937") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/08/racketcon-2012.html") (rel "alternate") (title "RacketCon 2012") (type "text/html"))) (author (name "Sam Tobin-Hochstadt") (uri "https://www.blogger.com/profile/12049111326816937908") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3986652801908321907") (published "2012-08-25T20:23:00.000-04:00") (updated "2012-08-27T13:14:08.509-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Dynamic Programming versus Memoization") (post-content "[Edit on 2012-08-27, 12:31EDT: added code and pictures below. 2012-08-27, 13:10EDT: also incorporated some comments.]" (br) "\n" (br) "\nI wrote this on the Racket educators' mailing list, and Eli Barzilay" (br) "\nsuggested I post it here as well." (br) "\n" (br) "\nThe article is about the difference between " (strong "memoization") " and " (strong "dynamic programming") " (DP). Before you read on, you should stop and ask yourself: " (em "Do I think these two are the same concept?") "; if you think they are different, " (em "How do I think they differ?") "; and for that matter, " (em "Do I even think of them as related?") (br) "\n" (br) "\nDid you think? Okay, then read on." (br) "\n" (br) "\nThey most certainly are related, because they are both mechanisms for optimizing a computation by replacing repeated sub-computations with the storage and reuse of the result of those sub-computations. (That is, both trade off space for time.)  In that description is already implicit an assumption: that the sub-computation will return the same result every time (or else you can't replace the computation with its value on subsequent invocations).  You've almost certainly heard of DP from an algorithms class.  You've probably heard of memoization if you're a member of this language's community, but many undergrads simply never see it because algorithms textbooks ignore it; and when they do mention it they demonstrate fundamental misunderstandings (as " (cite "Algorithms") " by Dasgupta, Papadimitriou, and Vazirani does)." (br) "\n" (br) "\nTherefore, let's set aside precedent.  I'll tell you how to think about them." (br) "\n" (br) "\nMemoization is fundamentally a top-down computation and DP is fundamentally bottom-up.  In memoization, we observe that a computational " (em "tree") " can actually be represented as a computational " (em "DAG") " (a directed acyclic graph: the single most underrated data structure in computer science); we then use a black-box to turn the tree into a DAG.  But it allows the top-down description of the problem to remain unchanged.  (As I left unstated originally but commenter23 below rightly intuited, the nodes are function calls, edges are call dependencies, and the arrows are directed from caller to callee. See the pictures later in this article.)" (br) "\n" (br) "\nIn DP, we make the same observation, but construct the DAG from the bottom-up.  That means we have to rewrite the computation to express the delta from each computational tree/DAG node to its parents.  We also need a means for addressing/naming those parents (which we did not need in the top-down case, since this was implicit in the recursive call stack).  This leads to inventions like DP tables, but people often fail to understand why they exist: it's primarily as a " (em "naming mechanism") " (and while we're at it, why not make it efficient to find a named element, ergo arrays and matrices)." (br) "\n" (br) "\nIn both cases, there is the potential for space wastage.  In memoization, it is very difficult to get rid of this waste (you could have custom, space-saving memoizers, as V" aacute "clav Pech points out in his comment below, but then the programmer risks using the wrong one...which to me destroys the beauty of memoization in the first place).  In contrast, in DP it's easier to save space because you can just look at the delta function to see how far " ldquo "back" rdquo " it reaches; beyond there lies garbage, and you can come up with a cleverer representation that stores just the relevant part (the " ldquo "fringe" rdquo ").  Once you understand this, you realize that the classic textbook linear, iterative computation of the fibonacci is just an extreme example of DP, where the entire " ldquo "table" rdquo " has been reduced to two iteration variables.  (Did your algorithms textbook tell you that?)" (br) "\n" (br) "\nIn my class, we work through some of the canonical DP algorithms as memoization problems instead, just so when students later encounter these as " ldquo "DP problems" rdquo " in algorithms classes, they (a) realize there is nothing canonical about this presentation, and (b) can be wise-asses about it." (br) "\n" (br) "\nThere are many trade-offs between memoization and DP that should drive the choice of which one to use." (br) "\n" (br) "\n" (strong "Memoization") ":" (br) "\n" (ul (li "leaves computational description unchanged (black-box)") "\n" (li "avoids unnecessary sub-computations (i.e., saves time, and some space with it)") "\n" (li "hard to save space absent a strategy for what sub-computations to dispose of") "\n" (li "must alway check whether a sub-computation has already been done before doing it (which incurs a small cost)") "\n" (li "has a time complexity that depends on picking a smart computation name lookup strategy") "\n") "In direct contrast, " (strong "DP") ":" (br) "\n" (ul (li "forces change in desription of the algorithm, which may introduce errors and certainly introduces some maintenance overhead") "\n" (li "cannot avoid unnecessary sub-computations (and may waste the space associated with storing those results)") "\n" (li "can more easily save space by disposing of unnecessary sub-computation results") "\n" (li "has no need to check whether a computation has been done before doing it" mdash "the computation is rewritten to ensure this isn't necessary") "\n" (li "has a space complexity that depends on picking a smart data storage strategy") "\n") "[NB: Small edits to the above list thanks to an exchange with Prabhakar Ragde.]" (br) "\n" (br) "\nI therefore tell my students: first write the computation and observe whether it fits the DAG pattern; if it does, use memoization.  Only if the space proves to be a problem and a specialized memo strategy won't help" mdash "or, even less likely, the cost of " ldquo "has it already been computed" rdquo " is also a problem" mdash "should you think about converting to DP.  And when you do, do so in a methodical way, retaining structural similarity to the original.  Every subsequent programmer who has to maintain your code will thank you." (br) "\n" (br) "\nI'll end with a short quiz that I always pose to my class." (br) "\n" (br) "\nMemoization is an optimization of a top-down, depth-first computation for an answer.  DP is an optimization of a bottom-up, breadth-first computation for an answer.  We should naturally ask, what about" (br) "\n" (ul (li "top-down, breadth-first") "\n" (li "bottom-up, depth-first") "\n") "Where do they fit into the space of techniques for avoiding recomputation by trading off space for time?" (br) "\n" (ol (li "Do we already have names for them? If so, what?, or") "\n" (li "Have we been missing one or two important tricks?, or") "\n" (li "Is there a reason we don't have names for these?") "\n") (h4 "Where's the Code?") "I've been criticized for not including code, which is a fair complaint. First, please see the comment number 4 below by simli. For another, let me contrast the two versions of computing Levenshtein distance. For the dynamic programming version, see " (a ((href "http://en.wikipedia.org/wiki/Levenshtein_distance")) "Wikipedia") ", which provides pseudocode and memo tables as of this date (2012-08-27). Here's the Racket version:" (br) "\n" (pre "(define levenshtein\n  (lambda (s t)\n    (cond\n     [(and (empty? s) (empty? t)) 0]\n     [(empty? s) (length t)]\n     [(empty? t) (length s)]\n     [else\n      (if (equal? (first s) (first t))\n   (levenshtein (rest s) (rest t))\n   (min (add1 (levenshtein (rest s) t))\n        (add1 (levenshtein s (rest t)))\n        (add1 (levenshtein (rest s) (rest t)))))])))\n") "The fact that " (em "this") " is not considered the more straightforward, reference implementation by the Wikipedia author is, I think, symptomatic of the lack of understanding that this post is about." (br) "\n" (br) "\nNow let's memoize it (assuming a two-argument " (code "memoize") "):" (br) "\n" (pre "(define levenshtein\n  (memoize\n    (lambda (s t)\n      (cond\n       [(and (empty? s) (empty? t)) 0]\n       [(empty? s) (length t)]\n       [(empty? t) (length s)]\n       [else\n (if (equal? (first s) (first t))\n     (levenshtein (rest s) (rest t))\n     (min (add1 (levenshtein (rest s) t))\n   (add1 (levenshtein s (rest t)))\n   (add1 (levenshtein (rest s) (rest t)))))]))))\n") "All that changed is the insertion of the second line." (br) "\n" (h4 "Bring on the Pitchers!") "The easiest way to illustrate the tree-to-DAG conversion visually is via the Fibonacci computation. Here's a picture of the computational tree:" (br) "\n" (br) "\n" (div ((class "separator") (style "clear: both; text-align: center;")) (a ((href "http://2.bp.blogspot.com/-b6_KqcEzdJ8/UDulIAaIg0I/AAAAAAAACBY/MuQ8yNkLVMQ/s1600/fib-tree.jpg") (imageanchor "1") (style "margin-left:1em; margin-right:1em")) (img ((border "0") (height "152") (src "http://2.bp.blogspot.com/-b6_KqcEzdJ8/UDulIAaIg0I/AAAAAAAACBY/MuQ8yNkLVMQ/s400/fib-tree.jpg") (width "400"))))) (br) "\nNow let's see it with memoization. The calls are still the same, but the dashed ovals are the ones that don't compute but whose values are instead looked up, and their emergent arrows show which computation's value was returned by the memoizer." (br) "\n" (br) "\n" (div ((class "separator") (style "clear: both; text-align: center;")) (a ((href "http://1.bp.blogspot.com/-jwR9DVJ0wRY/UDunEkoRrXI/AAAAAAAACBk/Poct_tG0eRE/s1600/fib-dag.jpg") (imageanchor "1") (style "margin-left:1em; margin-right:1em")) (img ((border "0") (height "233") (src "http://1.bp.blogspot.com/-jwR9DVJ0wRY/UDunEkoRrXI/AAAAAAAACBk/Poct_tG0eRE/s400/fib-dag.jpg") (width "400"))))) (br) "\n" (strong "Important") ": The above example is misleading because it suggests that memoization " (em "linearizes") " the computation, which in general it does not. If you want to truly understand the process, I suggest hand-tracing the Levenshtein computation with memoization. And to truly understand the " (em "relationship") " to DP, compare that hand-traced Levenshtein computation with the DP version. (Hint: you can save some manual tracing effort by lightly instrumenting your memoizer to print inputs and outputs. Also, make the memo table a global variable so you can observe it grow.)") (link ((href "http://blog.racket-lang.org/feeds/3986652801908321907/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=3986652801908321907") (rel "replies") (title "17 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/3986652801908321907") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/3986652801908321907") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html") (rel "alternate") (title "Dynamic Programming versus Memoization") (type "text/html"))) (author (name "Shriram Krishnamurthi") (uri "https://www.blogger.com/profile/02956763366608000839") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (media:thumbnail ((height "72") (url "http://2.bp.blogspot.com/-b6_KqcEzdJ8/UDulIAaIg0I/AAAAAAAACBY/MuQ8yNkLVMQ/s72-c/fib-tree.jpg") (width "72") (xmlns:media "http://search.yahoo.com/mrss/"))) (thr:total "17")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1105457027807151168") (published "2012-08-24T16:52:00.001-04:00") (updated "2012-08-24T18:44:14.767-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Fully Inlined Merge Sort") (post-content "While writing the code for the " (a ((href "http://en.wikipedia.org/wiki/Triangular_distribution")) "triangular distribution") " in the upcoming math library, I found that I needed a function that sorts exactly three numbers. This kind of code is annoying to write and to get right. But it comes up rarely enough, and it " (span ((style "font-style: italic;")) "seems") " simple enough, that Iâve never felt like making a library function for it." (br) "\n" (div ((class "SIntrapara")) "But what if I wrote a macro that generated code to sort " (span ((style "font-style: italic;")) "n") " numbers very quickly, where " (span ((style "font-style: italic;")) "n") " is known at expansion time, but the numbers themselves arenât? I think I could justify putting that in a library." (br) "\n") (div ((class "SIntrapara")) "Hereâs code that correctly sorts three numbers " (span ((class "RktSym")) "a") ", " (span ((class "RktSym")) "b") " and " (span ((class "RktSym")) "c") ": ") (div ((class "SIntrapara")) (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) "if") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "<") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "c") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "if") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "<") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "values") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "c") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "if") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "<") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "c") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "values") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "c") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "values") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "c") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "if") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "<") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "c") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "values") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "c") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "if") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "<") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "values") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "c") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "values") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "c") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")))) (div ((class "SIntrapara")) "Itâs an " (span ((class "RktSym")) "if") " tree. Notice that there are 6 leaf expressions, for the 3! = 6 possible permutations. Also, it never compares more than it has to. Itâs optimal.") (div ((class "SIntrapara")) "The optimality came from my reasoning about transitivity. For example, only two comparisons are needed before returning " (span ((class "RktPn")) "(") (span ((class "RktSym")) "values") (span ((class "stt")) " ") (span ((class "RktSym")) "a") (span ((class "stt")) " ") (span ((class "RktSym")) "b") (span ((class "stt")) " ") (span ((class "RktSym")) "c") (span ((class "RktPn")) ")") ". I knew that both " (span ((class "RktPn")) "(") (span ((class "RktSym")) "<") (span ((class "stt")) " ") (span ((class "RktSym")) "a") (span ((class "stt")) " ") (span ((class "RktSym")) "b") (span ((class "RktPn")) ")") " and " (span ((class "RktPn")) "(") (span ((class "RktSym")) "<") (span ((class "stt")) " ") (span ((class "RktSym")) "b") (span ((class "stt")) " ") (span ((class "RktSym")) "c") (span ((class "RktPn")) ")") ", so " (span ((class "RktPn")) "(") (span ((class "RktSym")) "<") (span ((class "stt")) " ") (span ((class "RktSym")) "a") (span ((class "stt")) " ") (span ((class "RktSym")) "b") (span ((class "stt")) " ") (span ((class "RktSym")) "c") (span ((class "RktPn")) ")") " must be true by transitivity." (br) "\n") (div ((class "SIntrapara")) "It would be nice if the macro generated optimal code by explicitly reasoning about transitivity, or as an emergent property of the sorting algorithm it uses." (br) "\n") (div ((class "SIntrapara")) "Weâll write a macro that does the latter, by generating a fully inlined merge sort." (br) "\n") (div ((class "SIntrapara")) "[Edit: The final inline sort macro is " (a ((href "https://gist.github.com/3456604")) "here") ".]") (a ((name "more"))) (br) "\n" (h3 (a ((href "http://www.blogger.com/blogger.g?blogID=2080885971644496896") (name "(part._.Runtime_.Merge_.Sort)"))) "Runtime Merge Sort") (div ((class "SIntrapara")) "Start with a simple, runtime merge sort: ") (div ((class "SIntrapara")) (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "merge") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "as") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "bs") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "match*") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "as") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "bs") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktPn")) "(") (span ((class "RktSym")) "list") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "bs") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp nbsp) (span ((class "RktSym")) "bs") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) "as") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "list") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp nbsp) (span ((class "RktSym")) "as") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktPn")) "(") (span ((class "RktSym")) "list") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "as") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "...") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "list") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "bs") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "...") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "if") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "<") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cons") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "merge") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "as") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cons") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "bs") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cons") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "merge") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cons") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "as") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "bs") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp))) "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "merge-sort") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "match") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) "list") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp nbsp) (span ((class "RktSym")) "vs") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) "list") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp nbsp) (span ((class "RktSym")) "vs") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "_") (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define-values") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "lvs") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "rvs") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "split-at") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "quotient") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "length") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "merge") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "merge-sort") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "lvs") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "merge-sort") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "rvs") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")))) (table ((cellspacing "0") (class "RktBlk")) (tbody (tr (td "Example:")) "\n" (tr (td (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "merge-sort") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "'") (span ((class "RktVal")) "(") (span ((class "RktVal")) "5") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "5") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "10") (span ((class "RktVal")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktRes")) "'(1 2 5 5 10)"))) "\n"))))) "\n")) (div ((class "SIntrapara")) "To make a macro out of merge sort, we need to change two things. The most obvious is that it has to " (span ((style "font-style: italic;")) "return syntax") " for an " (span ((class "RktSym")) "if") " instead of " (span ((style "font-style: italic;")) "evaluating") " it. Thatâs easy for a novice macrologist: change the functions to operate on syntax, stick a syntax-quasiquote in front of the " (span ((class "RktSym")) "if") ", and unquote the bits inside that get evaluated at expansion time." (br) "\n") (div ((class "SIntrapara")) "But if we did only that, weâd end up with expanded code like this: ") (div ((class "SIntrapara")) (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) "if") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "<") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cons") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "if") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "...") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cons") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "if") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "...") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")))) (div ((class "SIntrapara")) "It would be slow because " (span ((class "RktSym")) "cons") " allocates. We want the code to be fast.") (div ((class "SIntrapara")) "So the other change is to move the " (span ((class "RktSym")) "cons") "es inside the " (span ((class "RktSym")) "if") "s, and evaluate them at expansion time. We can then construct a " (span ((class "RktSym")) "values") " expression out of the resulting list." (br) "\n") (h3 (a ((href "http://www.blogger.com/blogger.g?blogID=2080885971644496896") (name "(part._.Accumulator-.Passing_.Style_.Won_t_.Work)"))) "Accumulator-Passing Style Wonât Work") (div ((class "SIntrapara")) "Novice functional programmers should know that accumulator-passing style (APS) moves " (span ((class "RktSym")) "cons") "es inward. For example, this âadd 1 to each elementâ function: ") (div ((class "SIntrapara")) (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "list-add1") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "match") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) "list") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "list") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) "list") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "v") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "...") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cons") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "add1") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "v") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "list-add1") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")))) (div ((class "SIntrapara")) "becomes this after conversion to APS: ") (div ((class "SIntrapara")) (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "list-add1/acc") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "acc") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "list") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "match") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) "list") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "reverse") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "acc") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) "list") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "v") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "...") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "list-add1/acc") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cons") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "add1") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "v") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "acc") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")))) (div ((class "SIntrapara")) "Now " (span ((class "RktSym")) "cons") " is where we want it: inside the recursive call, instead of in tail position. The problem is that " (span ((style "font-style: italic;")) "APS doesnât work on tree-shaped recursion") ".") (h3 (a ((href "http://www.blogger.com/blogger.g?blogID=2080885971644496896") (name "(part._.Continuation-.Passing_.Style_.Does_.Work)"))) "Continuation-Passing Style Does Work") (div ((class "SIntrapara")) "In continuation-passing style (CPS), we pass a continuation " (span ((class "RktSym")) "k") "â" (wbr) "i.e. âwhat happens nextââ" (wbr) " instead of an accumulator. The functions call " (span ((class "RktSym")) "k") " instead of returning values. For example: ") (div ((class "SIntrapara")) (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "list-add1/k") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "k") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "identity") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "match") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) "list") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "k") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "list") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) "list") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "v") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "...") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "list-add1/k") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "Î»") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "vs") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "k") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cons") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "add1") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "v") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")))) (div ((class "SIntrapara")) "If we want, we can pass something besides " (span ((class "RktSym")) "identity") " as the base-case continuation: ") (div ((class "SIntrapara")) (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "list-add1/k") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "'") (span ((class "RktVal")) "(") (span ((class "RktVal")) "1") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "3") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "4") (span ((class "RktVal")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "Î»") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "vs") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "apply") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "values") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td (span ((class "RktRes")) "2"))) "\n" (tr (td (span ((class "RktRes")) "3"))) "\n" (tr (td (span ((class "RktRes")) "4"))) "\n" (tr (td (span ((class "RktRes")) "5"))) "\n")))) "\n")))) (div ((class "SIntrapara")) "CPS turns " (span ((style "font-style: italic;")) "every") " call into a tail call, so it moves " (span ((class "RktSym")) "cons") "es inward even with tree-shaped recursion. As a demonstration, hereâs a CPSed merge sort: ") (div ((class "SIntrapara")) (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "merge/k") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "as") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "bs") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "k") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "match*") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "as") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "bs") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktPn")) "(") (span ((class "RktSym")) "list") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "bs") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "k") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "bs") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) "as") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "list") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "k") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "as") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktPn")) "(") (span ((class "RktSym")) "list") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "as") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "...") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "list") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "bs") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "...") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "if") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "<") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "merge/k") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "as") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cons") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "bs") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) 955) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "vs") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "k") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cons") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "merge/k") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cons") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "as") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "bs") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) 955) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "vs") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "k") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cons") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp))) "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "merge-sort/k") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "k") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "match") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) "list") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "k") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) "list") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "k") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "_") (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define-values") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "lvs") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "rvs") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "split-at") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "quotient") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "length") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "merge-sort/k"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktSym")) "lvs") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) 955) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "lvs") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "merge-sort/k"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktSym")) "rvs") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) 955) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "rvs") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "merge/k") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "lvs") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "rvs") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "k") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")))) (div ((class "SIntrapara")) "You can read the last expression in " (span ((class "RktSym")) "merge-sort/k") " as, âSort " (span ((class "RktSym")) "lvs") ". Then, with the sorted " (span ((class "RktSym")) "lvs") ", sort " (span ((class "RktSym")) "rvs") ". Then, with the sorted " (span ((class "RktSym")) "rvs") ", merge " (span ((class "RktSym")) "lvs") " and " (span ((class "RktSym")) "rvs") ".â") (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td "Example:")) "\n" (tr (td (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "merge-sort/k") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "'") (span ((class "RktVal")) "(") (span ((class "RktVal")) "5") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "3") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1") (span ((class "RktVal")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "Î»") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "vs") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "apply") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "values") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td (span ((class "RktRes")) "1"))) "\n" (tr (td (span ((class "RktRes")) "2"))) "\n" (tr (td (span ((class "RktRes")) "3"))) "\n" (tr (td (span ((class "RktRes")) "5"))) "\n")))) "\n"))))) "\n")) (h3 (a ((href "http://www.blogger.com/blogger.g?blogID=2080885971644496896") (name "(part._.The_.Inline_.Sort_.Macro)"))) "The Inline Sort Macro") (div ((class "SIntrapara")) "When we macro-ize the CPSed merge sort, weâll turn the continuations into " (span ((style "font-style: italic;")) "expansion-time") " functions. So not only will macro-ized CPS move " (span ((class "RktSym")) "cons") "es inward, itâll apply them all at expansion time!") (div ((class "SIntrapara")) "Weâll do it in three parts: the user-facing macro, the inline merge function, and the inline sort function.") (h4 "1" (tt nbsp) (a ((href "http://www.blogger.com/blogger.g?blogID=2080885971644496896") (name "(part._.The_.User-.Facing_.Macro)"))) "The User-Facing Macro") (div ((class "SIntrapara")) "Letâs put a nice face on inline sorting: ") (div ((class "SIntrapara")) (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) "define-syntax") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "inline-sort") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "stx") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "syntax-case") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "stx") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) "_") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "lst") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "...") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "with-syntax") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) "vs") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "...") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "generate-temporaries") (span ((class "hspace")) nbsp) (span ((class "RktRdr")) "#'") (span ((class "RktPn")) "(") (span ((class "RktSym")) "lst") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "...") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktRdr")) "#`") (span ((class "RktPn")) "(") (span ((class "RktSym")) "let") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktSym")) "vs") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "lst") (span ((class "RktPn")) "]") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "...") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktRdr")) "#,") (span ((class "RktPn")) "(") (span ((class "RktSym")) "inline-sort/k") (span ((class "hspace")) nbsp) (span ((class "RktRdr")) "#'") (span ((class "RktPn")) "(") (span ((class "RktSym")) "vs") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "...") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) 955) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "vs") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktRdr")) "#`") (span ((class "RktPn")) "(") (span ((class "RktSym")) "values") (span ((class "hspace")) nbsp) (span ((class "RktRdr")) "#,@") (span ((class "RktSym")) "vs") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")))) (div ((class "SIntrapara")) "This macro does two things. First, it names the values to be sorted, so they donât get re-evaluated every time theyâre compared. Second, it calls " (span ((class "RktSym")) "inline-sort/k") " with a base-case continuation that converts syntax lists to " (span ((class "RktSym")) "values") " expressions.") (div ((class "SIntrapara")) "Note that the call " (span ((class "RktRdr")) "#,") (span ((class "RktPn")) "(") (span ((class "RktSym")) "inline-sort/k") (span ((class "stt")) " ") (span ((class "RktSym")) "...") (span ((class "RktPn")) ")") " happens at expansion time, and that the continuation " (span ((class "RktPn")) "(") (span ((class "RktSym")) "Î»") (span ((class "stt")) " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "vs") (span ((class "RktPn")) ")") (span ((class "stt")) " ") (span ((class "RktSym")) "...") (span ((class "RktPn")) ")") " it passes is an expansion-time value.") (h4 "2" (tt nbsp) (a ((href "http://www.blogger.com/blogger.g?blogID=2080885971644496896") (name "(part._.The_.Inline_.Merge_.Function)"))) "The Inline Merge Function") (div ((class "SIntrapara")) "Changing " (span ((class "RktSym")) "merge/k") " to operate on syntax at expansion time is as straightforward as possible: ") (div ((class "SIntrapara")) (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) "define-for-syntax") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "inline-merge/k") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "as") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "bs") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "k") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "syntax-case") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "list") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "as") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "bs") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktPn")) "(") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "bs") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "k") (span ((class "hspace")) nbsp) (span ((class "RktRdr")) "#'") (span ((class "RktSym")) "bs") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) "as") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "k") (span ((class "hspace")) nbsp) (span ((class "RktRdr")) "#'") (span ((class "RktSym")) "as") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktPn")) "(") (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "as") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "...") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "b") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "bs") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "...") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp) (span ((class "RktRdr")) "#`") (span ((class "RktPn")) "(") (span ((class "RktSym")) "if") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "<") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktRdr")) "#,") (span ((class "RktPn")) "(") (span ((class "RktSym")) "inline-merge/k") (span ((class "hspace")) nbsp) (span ((class "RktRdr")) "#'") (span ((class "RktPn")) "(") (span ((class "RktSym")) "as") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "...") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktRdr")) "#'") (span ((class "RktPn")) "(") (span ((class "RktSym")) "b") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "bs") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "...") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "Î»") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "vs") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "k") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cons") (span ((class "hspace")) nbsp) (span ((class "RktRdr")) "#'") (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktRdr")) "#,") (span ((class "RktPn")) "(") (span ((class "RktSym")) "inline-merge/k") (span ((class "hspace")) nbsp) (span ((class "RktRdr")) "#'") (span ((class "RktPn")) "(") (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "as") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "...") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktRdr")) "#'") (span ((class "RktPn")) "(") (span ((class "RktSym")) "bs") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "...") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "Î»") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "vs") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "k") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "cons") (span ((class "hspace")) nbsp) (span ((class "RktRdr")) "#'") (span ((class "RktSym")) "b") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")))) (div ((class "SIntrapara")) "The only substantial changes are the quasiquotes and unquotes, and using " (span ((class "RktSym")) "syntax-case") " to destructure syntax lists instead of using " (span ((class "RktSym")) "match") " to destructure lists. Again, note that the recursive calls " (span ((class "RktRdr")) "#,") (span ((class "RktPn")) "(") (span ((class "RktSym")) "inline-merge/k") (span ((class "stt")) " ") (span ((class "RktSym")) "...") (span ((class "RktPn")) ")") " in each " (span ((class "RktSym")) "if") " branch happen at expansion time, and that their continuations are expansion-time values.") (div ((class "SIntrapara")) "We can see what kind of code " (span ((class "RktSym")) "merge/k") " returns by applying it at expansion time: ") (div ((class "SIntrapara")) (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "begin-for-syntax"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "print"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "syntax-" ">" "datum"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "inline-merge/k") (span ((class "hspace")) nbsp) (span ((class "RktRdr")) "#'") (span ((class "RktPn")) "(") (span ((class "RktSym")) "a") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktRdr")) "#'") (span ((class "RktPn")) "(") (span ((class "RktSym")) "b") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "c") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) 955) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "vs") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")))) "\n" (tr (td (p (span ((class "RktOut")) "'(if (" "<" " a b) (a b c) (if (" "<" " a c) (b a c) (b c a)))")))) "\n" (tr (td (table ((cellspacing "0")) (tbody (tr (td)) "\n")))) "\n")))) (div ((class "SIntrapara")) "The syntax list " (span ((class "RktRdr")) "#'") (span ((class "RktPn")) "(") (span ((class "RktSym")) "b") (span ((class "stt")) " ") (span ((class "RktSym")) "c") (span ((class "RktPn")) ")") " is assumed already sorted, meaning " (span ((class "RktPn")) "(") (span ((class "RktSym")) "<") (span ((class "stt")) " ") (span ((class "RktSym")) "b") (span ((class "stt")) " ") (span ((class "RktSym")) "c") (span ((class "RktPn")) ")") " at runtime. Therefore, if " (span ((class "RktPn")) "(") (span ((class "RktSym")) "<") (span ((class "stt")) " ") (span ((class "RktSym")) "a") (span ((class "stt")) " ") (span ((class "RktSym")) "b") (span ((class "RktPn")) ")") " at runtime, by transitivity, " (span ((class "RktPn")) "(") (span ((class "RktSym")) "<") (span ((class "stt")) " ") (span ((class "RktSym")) "a") (span ((class "stt")) " ") (span ((class "RktSym")) "b") (span ((class "stt")) " ") (span ((class "RktSym")) "c") (span ((class "RktPn")) ")") " at runtime, so the merge generates " (span ((class "RktRdr")) "#'") (span ((class "RktPn")) "(") (span ((class "RktSym")) "a") (span ((class "stt")) " ") (span ((class "RktSym")) "b") (span ((class "stt")) " ") (span ((class "RktSym")) "c") (span ((class "RktPn")) ")") ". In other words, " (span ((class "RktSym")) "inline-merge/k") "âs assumption that its arguments are sorted " (span ((style "font-style: italic;")) "is equivalent to reasoning about transitivity") ".") (h4 "3" (tt nbsp) (a ((href "http://www.blogger.com/blogger.g?blogID=2080885971644496896") (name "(part._.The_.Inline_.Sort_.Function)"))) "The Inline Sort Function") (div ((class "SIntrapara")) "Lastly, the divide-and-conquer part: ") (div ((class "SIntrapara")) (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) "require") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "for-syntax") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "racket/list") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp nbsp) (span ((class "RktCmt")) ";") (span ((class "RktCmt")) nbsp) (span ((class "RktCmt")) "for list functions"))) "\n" (tr (td (span ((class "hspace")) nbsp))) "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) "define-for-syntax") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "inline-sort/k") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "k") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "syntax-case") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "k") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) "a") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "k") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "_") (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "let") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktSym")) "vs") (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "if") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "list?") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "syntax-" ">" "list") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "define-values") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "lvs") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "rvs") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "split-at") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "quotient") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "length") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "inline-sort/k"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktSym")) "lvs") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) 955) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "lvs") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "inline-sort/k"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktSym")) "rvs") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) 955) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "rvs") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "inline-merge/k") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "lvs") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "rvs") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "k") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")))) (div ((class "SIntrapara")) "This is changed similarly to " (span ((class "RktSym")) "merge/k") ". The only new change is using " (span ((class "RktSym")) "syntax-" ">" "list") " to convert syntax to lists so we can use the functions " (span ((class "RktSym")) "length") " and " (span ((class "RktSym")) "split-at") ".") (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td "Example:")) "\n" (tr (td (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "inline-sort") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "5") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "3") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1") (span ((class "RktPn")) ")"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td (span ((class "RktRes")) "1"))) "\n" (tr (td (span ((class "RktRes")) "2"))) "\n" (tr (td (span ((class "RktRes")) "3"))) "\n" (tr (td (span ((class "RktRes")) "5"))) "\n")))) "\n"))))) "\n")) (div ((class "SIntrapara")) "Of course, the result of evaluating an " (span ((class "RktSym")) "inline-sort") " doesnât tell the whole story. Letâs fire up the macro stepper and see what " (span ((class "RktPn")) "(") (span ((class "RktSym")) "inline-sort") (span ((class "stt")) " ") (span ((class "RktVal")) "5") (span ((class "stt")) " ") (span ((class "RktVal")) "2") (span ((class "stt")) " ") (span ((class "RktVal")) "3") (span ((class "RktPn")) ")") " expands to. Copying from the macro stepper window and renaming temp variables, we get ") (div ((class "SIntrapara")) (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) "let") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "5") (span ((class "RktPn")) "]") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "b") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2") (span ((class "RktPn")) "]") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "c") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "3") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "if") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "<") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "c") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "if") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "<") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "values") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "c") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "if") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "<") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "c") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "values") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "c") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "values") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "c") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "if") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "<") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "c") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "values") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "c") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "if") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "<") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "values") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "c") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "values") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "c") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")))) (div ((class "SIntrapara")) "Itâs an " (span ((class "RktSym")) "if") " tree. Notice that there are 6 leaf expressions, for the 3! = 6 possible permutations. Also, it never compares more than it has to. Itâs optimal.") (h3 (a ((href "http://www.blogger.com/blogger.g?blogID=2080885971644496896") (name "(part._.Inline_.Sort_.Properties)"))) "Inline Sort Properties") (div ((class "SIntrapara")) "Inherited from the merge sort, the inline sort has the following properties (assuming a length-" (span ((style "font-style: italic;")) "n") " list): ") (div ((class "SIntrapara")) (ul (li "Time optimality: The depth of the " (span ((class "RktSym")) "if") " tree is O(" (span ((style "font-style: italic;")) "n") " log(" (span ((style "font-style: italic;")) "n") ")).") "\n" (li "Size optimality: The number of leaves is exactly " (span ((style "font-style: italic;")) "n") "!.") "\n")) (div ((class "SIntrapara")) "The term âsize optimalityâ is misleading, because thatâs still a lot of code. Iâve seriously considered requiring any user of this macro to state how many permutations there are for the number of values theyâre sorting. Theyâd have to prove to the macro that they know how much code theyâre asking it to generate.") (div ((class "SIntrapara")) "Inline sort is wicked fast, as we should expect: ") (div ((class "SIntrapara")) (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "define") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "'") (span ((class "RktVal")) "(") (span ((class "RktVal")) "5") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "3") (span ((class "RktVal")) nbsp) (span ((class "RktVal")) "1") (span ((class "RktVal")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")))) "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "match-define") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "list") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "c") (span ((class "RktPn")) nbsp) (span ((class "RktSym")) "d") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "RktPn")) ")"))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")))) "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "for") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktSym")) "_") (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "in-range") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "5") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "time") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "for") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktSym")) "_") (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "in-range") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1000000") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "match-let") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) "list") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "c") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "d") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "sort") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "vs") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "<") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "void") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td (span ((class "RktOut")) "cpu time: 550 real time: 540 gc time: 30"))) "\n" (tr (td (span ((class "RktOut")) "cpu time: 510 real time: 518 gc time: 0"))) "\n" (tr (td (span ((class "RktOut")) "cpu time: 520 real time: 517 gc time: 20"))) "\n" (tr (td (span ((class "RktOut")) "cpu time: 520 real time: 517 gc time: 0"))) "\n" (tr (td (span ((class "RktOut")) "cpu time: 510 real time: 516 gc time: 10"))) "\n")))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")))) "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) "for") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktSym")) "_") (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "in-range") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "5") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "time") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "for") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktSym")) "_") (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "in-range") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1000000") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "let-values") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktPn")) "(") (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "c") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "d") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "inline-sort") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "a") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "b") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "c") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "d") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "void") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td (span ((class "RktOut")) "cpu time: 20 real time: 28 gc time: 0"))) "\n" (tr (td (span ((class "RktOut")) "cpu time: 30 real time: 27 gc time: 0"))) "\n" (tr (td (span ((class "RktOut")) "cpu time: 30 real time: 27 gc time: 0"))) "\n" (tr (td (span ((class "RktOut")) "cpu time: 30 real time: 27 gc time: 0"))) "\n" (tr (td (span ((class "RktOut")) "cpu time: 20 real time: 27 gc time: 0"))) "\n")))) "\n" (tr (td (table ((cellspacing "0")) (tbody "\n" (tr (td)) "\n")))) "\n")))) (div ((class "SIntrapara")) "So about 20 times faster than " (span ((class "RktSym")) "sort") " on a length-4 list.") (div ((class "SIntrapara")) "I use it in Typed Racket, on floating-point numbers. Typed Racketâs optimizer replaces " (span ((class "RktSym")) "<") " with " (span ((class "RktSym")) "unsafe-fl" "<") ". This tells the compiler that the elements are floats, so it can keep them stack-allocated, which reduces allocations further. In all, for my particular use of " (span ((class "RktSym")) "inline-sort") ", itâs over 50 times faster than " (span ((class "RktSym")) "sort") ".") (div ((class "SIntrapara")) "And using it is a heckuvalot easier than writing an " (span ((class "RktSym")) "if") " tree and reasoning about transitivity every time I need to sort a handful of floats.") (h3 (a ((href "http://www.blogger.com/blogger.g?blogID=2080885971644496896") (name "(part._.Conclusion)"))) "Conclusion") (div ((class "SIntrapara")) "Writing macros in expansion-time CPS to fully inline a recursive function works out beautifully. I suspect that it will work on any recursive, polymorphic function whose well-foundedness follows only from the structure of the input data.") (div ((class "SIntrapara")) "Also, it can generate a metric truckload of code.") (div ((class "SIntrapara")) "Interesting note: I originally wrote " (span ((class "RktSym")) "inline-sort") " using only " (span ((class "RktSym")) "syntax-rules") ", passing the names of higher-order macros to other macros as continuations. Sorting a five-element list took almost 19000 expansion steps, which is ridiculously inefficient even for a 120-leaf " (span ((class "RktSym")) "if") " tree.")) (link ((href "http://blog.racket-lang.org/feeds/1105457027807151168/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=1105457027807151168") (rel "replies") (title "2 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1105457027807151168") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1105457027807151168") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/08/fully-inlined-merge-sort.html") (rel "alternate") (title "Fully Inlined Merge Sort") (type "text/html"))) (author (name "Neil Toronto") (uri "https://www.blogger.com/profile/06524735949001338782") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "2")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2831471944590539929") (published "2012-08-07T10:17:00.002-04:00") (updated "2012-08-07T10:17:54.168-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Racket v5.3") (post-content "Racket version 5.3 is now available from\n" (br) "\n" (pre (a ((href "http://racket-lang.org/")) "http://racket-lang.org/")) "\n" (h2 "Release Highlights:") "\n" (ul "\n" (li "Submodules are nested module declarations that can be loaded and run independently from the enclosing module.  See also the " (a ((href "http://blog.racket-lang.org/2012/06/submodules.html")) "overview of submodules") ".") "\n" (li "The futures visualizer is a graphical profiling tool for parallel programs using futures.  The tool shows a detailed execution timeline depicting the migration of futures between threads, and gives detailed information about each runtime synchronization that occurred during program execution.  In addition, " (tt "would-be-future") " is a special type of future that always executes sequentially and records all potential barricades a regular future would encounter.") "\n" (li "Optimization Coach (formerly Performance Report) reports information about Racket's inlining optimizations.  Optimization Coach can be launched in any language through the View menu.") "\n" (li "The new " (tt "images/flomap") " library defines floating-point bitmaps and fast image processing operations on them.  It is written in Typed Racket, so Typed Racket code may use it without the cost of contract checks.") "\n" (li "The new " (tt "json") " library supports parsing and generating JSON.  (Originally based on Dave Herman's planet library.)") "\n" (li (tt "racket/string") " is extended with a set of simplified string manipulation functions that are more convenient than using regexps.  " (tt "regexp-match*") " and friends can now be used with new keyword arguments to return specific matched regexp group/s and gaps between matches.") "\n" (li "The new " (tt "racket/generic") " library allows generic function definitions, which dispatch to methods added to a structure type via the new " (tt "#:methods") " keyword.") "\n" (li "The " (tt "class") " form supports declaring a method abstract.  An abstract method prevents a class from being instantiated unless it is overridden.") "\n" (li "The contract library comes with support for interfaces, generics, prompts, continuation-marks, and structs.") "\n" (li "Most error messages use a new multi-line format that is more consistent with contract errors and accommodates more information.") "\n" (li "Typed Racket supports function definitions with keyword arguments; the startup time of Typed Racket programs has been sharply reduced.") "\n" (li "The new " (tt "ffi/com") " library replaces MysterX; a compatibility " (tt "mysterx") " library remains, but without ActiveX support.  The new " (tt "ffi/unsafe/com") " library offers a more primitive and direct way to use COM classes and methods.") "\n" (li "There is now a very complete completion code for zsh.  It is not included in the distribution though; get it at http://goo.gl/DU8JK  (This script and the bash completions will be included in the standard installers in future versions.)") "\n") "\n" (h2 "Deprecation") "\nEffective this release:\n" (ul "\n" (li "The " (tt "tex2page") " and " (tt "combinator-parser") " libraries have been moved from the Racket distribution to PLaneT:" (br) "\n" (blockquote (pre "     (require (planet plt/tex2page))\n     (require (planet plt/combinator-parser))"))) "\n" (li "The following has been deprecated and will be removed in the January 2013 release:" (br) "\n  the " (tt "planet") " command-line tool; use " (tt "raco planet") " instead.\n") "\n" (li "The following has been deprecated and will be removed in the August 2013 release:" (br) "\n  the " (tt "mzlib/class100") " library; use " (tt "racket/class") " instead.\n") "\n")) (link ((href "http://blog.racket-lang.org/feeds/2831471944590539929/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=2831471944590539929") (rel "replies") (title "2 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2831471944590539929") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2831471944590539929") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/08/racket-v53.html") (rel "alternate") (title "<a href=\"http://racket-lang.org\">Racket v5.3</a>") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://plus.google.com/115730576737402335315") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh5.googleusercontent.com/-eR9w2qhxsD0/AAAAAAAAAAI/AAAAAAAACa4/EbnrYldgv28/s32-c/photo.jpg") (width "32")))) (thr:total "2")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2509585020298466138") (published "2012-06-03T02:10:00.000-04:00") (updated "2012-06-24T21:52:23.721-04:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "new-feature"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "modules"))) (title ((type "text")) "Submodules") (post-content "A Racket " (a ((href "") (name "(tech._submodule)"))) (span ((style "font-style: italic;")) "submodule") " is a module that is syntactically nested within another module. Submodules will be supported in the next release of Racket, and they are available in the current " (a ((href "http://pre.racket-lang.org/installers/")) "pre-release version") "." (br) "\nSubmodules provide nested namespaces, but that kind of nesting is already available through forms like " (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/package.html#(form._((lib._racket%2Fpackage..rkt)._define-package))") (pltdoc "x")) "define-package")) ". The power of submodules is that they can be separately loaded and separately run relative to their enclosing modules, in the same way that top-level modules can be separately load and run. This separation of dependencies means that submodules can be used to add code and information to modulesâ" (wbr) "such as tests, documentation, and parsing informationâ" (wbr) "that is loaded only when specifically requested." (br) "\n" (h3 "\n" (a ((href "") (name "(part._.The_main_.Submodule)"))) "The " (span ((class "RktSym")) "main") " Submodule") "\nOne use of a submodule is to declare of a " (span ((class "RktSym")) "main") " submodule. A " (span ((class "RktSym")) "main") " submodule is instantiated when the enclosing module is run as the main program, but not when the enclosing module is used as a library." (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (blockquote ((class "Rfilebox")) "\n") "\n") "\n" (div ((class "Rfiletitle")) "\n" (span ((class "Rfilename")) (span ((class "stt")) "\"fish.rkt\""))) "\n" (blockquote ((class "Rfilecontent")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (a ((class "RktModLink") (href "http://pre.racket-lang.org/docs/html/guide/Module_Syntax.html#(part._hash-lang)") (pltdoc "x")) (span ((class "RktMod")) "#lang")) (span ((class "hspace")) nbsp) (a ((class "RktModLink") (href "http://pre.racket-lang.org/docs/html/reference/index.html") (pltdoc "x")) (span ((class "RktSym")) "racket/base")))) "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/require.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._provide))") (pltdoc "x")) "provide")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "fish") (span ((class "RktPn")) ")"))) "\n" (tr (td)) "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/define.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._define))") (pltdoc "x")) "define")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "fish") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "'") (span ((class "RktVal")) "(") (span ((class "RktVal")) "1") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2") (span ((class "RktVal")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td)) "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/module.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._module%2B))") (pltdoc "x")) "module+")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "main"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://pre.racket-lang.org/docs/html/reference/pairs.html#(def._((lib._racket%2Fprivate%2Fmap..rkt)._map))") (pltdoc "x")) "map")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktValLink") (href "http://pre.racket-lang.org/docs/html/reference/Writing.html#(def._((lib._racket%2Fprivate%2Fmisc..rkt)._displayln))") (pltdoc "x")) "displayln")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "fish") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")) "\n") "\n" (blockquote ((class "SCodeFlow")) "\n" (blockquote ((class "Rfilebox")) "\n") "\n") "\n" (div ((class "Rfiletitle")) "\n" (span ((class "Rfilename")) (span ((class "stt")) "\"sum-fish.rkt\""))) "\n" (blockquote ((class "Rfilecontent")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (a ((class "RktModLink") (href "http://pre.racket-lang.org/docs/html/guide/Module_Syntax.html#(part._hash-lang)") (pltdoc "x")) (span ((class "RktMod")) "#lang")) (span ((class "hspace")) nbsp) (a ((class "RktModLink") (href "http://pre.racket-lang.org/docs/html/reference/index.html") (pltdoc "x")) (span ((class "RktSym")) "racket/base")))) "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/require.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._require))") (pltdoc "x")) "require")) (span ((class "hspace")) nbsp) (span ((class "RktVal")) "\"fish.rkt\"") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://pre.racket-lang.org/docs/html/reference/procedures.html#(def._((lib._racket%2Fprivate%2Fbase..rkt)._apply))") (pltdoc "x")) "apply")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktValLink") (href "http://pre.racket-lang.org/docs/html/reference/generic-numbers.html#(def._((quote._~23~25kernel)._%2B))") (pltdoc "x")) "+")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "fish") (span ((class "RktPn")) ")"))) "\n")) "\n") "\nThe " (span ((class "stt")) "\"fish.rkt\"") " module exports " (span ((class "RktSym")) "fish") " as a list of numbers.  Running " (span ((class "stt")) "\"sum-fish.rkt\"") ", which imports " (span ((class "stt")) "\"fish.rkt\"") ", prints the sum of the numbers. Running " (span ((class "stt")) "\"fish.rkt\"") " directly, however, triggers the instantiation of the " (span ((class "RktSym")) "main") " submodule within " (span ((class "stt")) "\"fish.rkt\"") ", which displays each number in " (span ((class "RktSym")) "fish") " on its own line." (br) "\nA " (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/module.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._module%2B))") (pltdoc "x")) "module+")) (span ((class "stt")) " ") (span ((class "RktSym")) "main") (span ((class "stt")) " ") (span ((class "RktSym")) "....") (span ((class "RktPn")) ")") " declaration is similar to the Python " (span ((class "stt")) "if __name__ == \"__main__\":") " idiom, but with a significant difference. Importing " (span ((class "stt")) "\"fish.rkt\"") " into another module ignores the " (span ((class "RktSym")) "main") " submodule completely, so that the " (span ((class "RktSym")) "main") " submoduleâs code and its dependencies arenât loaded." (br) "\n" (h3 "\n" (a ((href "") (name "(part._.Unit_.Tests)"))) "Unit Tests") "\nAnother use for submodulesâ" (wbr) "and one where independent loading matters more than for " (span ((class "stt")) "\"fish.rkt\"") "âs " (span ((class "RktSym")) "main") "â" (wbr) "is for test suites.  A " (span ((class "RktSym")) "main") " submodule could be used for tests, so that running the module runs its tests, but our preferred convention is to declare a " (span ((class "RktSym")) "test") " submodule:" (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (blockquote ((class "Rfilebox")) "\n") "\n") "\n" (div ((class "Rfiletitle")) "\n" (span ((class "Rfilename")) (span ((class "stt")) "\"fish2.rkt\""))) "\n" (blockquote ((class "Rfilecontent")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (a ((class "RktModLink") (href "http://pre.racket-lang.org/docs/html/guide/Module_Syntax.html#(part._hash-lang)") (pltdoc "x")) (span ((class "RktMod")) "#lang")) (span ((class "hspace")) nbsp) (a ((class "RktModLink") (href "http://pre.racket-lang.org/docs/html/reference/index.html") (pltdoc "x")) (span ((class "RktSym")) "racket/base")))) "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/require.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._provide))") (pltdoc "x")) "provide")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "fish") (span ((class "RktPn")) ")"))) "\n" (tr (td)) "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/define.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._define))") (pltdoc "x")) "define")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "fish") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "'") (span ((class "RktVal")) "(") (span ((class "RktVal")) "1") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2") (span ((class "RktVal")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td)) "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/module.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._module%2B))") (pltdoc "x")) "module+")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "test"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/require.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._require))") (pltdoc "x")) "require")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "rackunit") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://pre.racket-lang.org/docs/html/rackunit/api.html#(def._((lib._rackunit%2Fmain..rkt)._check))") (pltdoc "x")) "check")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktValLink") (href "http://pre.racket-lang.org/docs/html/reference/pairs.html#(def._((lib._racket%2Fprivate%2Fmap..rkt)._andmap))") (pltdoc "x")) "andmap")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktValLink") (href "http://pre.racket-lang.org/docs/html/reference/number-types.html#(def._((quote._~23~25kernel)._number~3f))") (pltdoc "x")) "number?")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "fish") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")) "\n") "\nThe new " (span ((class "stt")) "raco test") " shell command runs the " (span ((class "RktSym")) "test") " submodule of a given module, so that " (span ((class "stt")) "raco test fish2.rkt") " checks that all the values of the " (span ((class "RktSym")) "fish") " list are numbers. The " (span ((class "RktSym")) "test") " submodule imports " (a ((class "RktModLink") (href "http://pre.racket-lang.org/docs/html/rackunit/api.html") (pltdoc "x")) (span ((class "RktSym")) "rackunit")) " for its " (span ((class "RktSym")) (a ((class "RktValLink") (href "http://pre.racket-lang.org/docs/html/rackunit/api.html#(def._((lib._rackunit%2Fmain..rkt)._check))") (pltdoc "x")) "check")) " form, but that import does not create a dependency on " (a ((class "RktModLink") (href "http://pre.racket-lang.org/docs/html/rackunit/api.html") (pltdoc "x")) (span ((class "RktSym")) "rackunit")) " (which is a substantial library) for modules that import " (span ((class "stt")) "\"fish2.rkt\"") "; the dependency is only for the " (span ((class "RktSym")) "test") " submodule." (br) "\nThe " (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/module.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._module%2B))") (pltdoc "x")) "module+")) " form creates a dependency of the submodule on the enclosing module, since it implicitly imports all bindings of its enclosing module. The implicit import explains why the " (span ((class "RktSym")) "test") " submodule in " (span ((class "stt")) "\"fish2.rkt\"") " can use " (span ((class "RktSym")) "fish") " directly (i.e., itâs not simply because the submodule is syntactically nested). The implicit import includes all bindings from the enclosing module, including bindings that are not exported via " (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/require.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._provide))") (pltdoc "x")) "provide")) ", which supports unit tests for unexported functions." (br) "\nFinally, the " (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/module.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._module%2B))") (pltdoc "x")) "module+")) " form splices together multiple declarations of a particular submodule, which is useful for interleaving definitions and tests:" (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (blockquote ((class "Rfilebox")) "\n") "\n") "\n" (div ((class "Rfiletitle")) "\n" (span ((class "Rfilename")) (span ((class "stt")) "\"fish3.rkt\""))) "\n" (blockquote ((class "Rfilecontent")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (a ((class "RktModLink") (href "http://pre.racket-lang.org/docs/html/guide/Module_Syntax.html#(part._hash-lang)") (pltdoc "x")) (span ((class "RktMod")) "#lang")) (span ((class "hspace")) nbsp) (a ((class "RktModLink") (href "http://pre.racket-lang.org/docs/html/reference/index.html") (pltdoc "x")) (span ((class "RktSym")) "racket/base")))) "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/require.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._provide))") (pltdoc "x")) "provide")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "fish") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "feed") (span ((class "RktPn")) ")"))) "\n" (tr (td)) "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/module.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._module%2B))") (pltdoc "x")) "module+")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "test") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/require.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._require))") (pltdoc "x")) "require")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "rackunit") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td)) "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/define.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._define))") (pltdoc "x")) "define")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "fish") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "'") (span ((class "RktVal")) "(") (span ((class "RktVal")) "1") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2") (span ((class "RktVal")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/module.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._module%2B))") (pltdoc "x")) "module+")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "test") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://pre.racket-lang.org/docs/html/rackunit/api.html#(def._((lib._rackunit%2Fmain..rkt)._check))") (pltdoc "x")) "check")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktValLink") (href "http://pre.racket-lang.org/docs/html/reference/pairs.html#(def._((lib._racket%2Fprivate%2Fmap..rkt)._andmap))") (pltdoc "x")) "andmap")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktValLink") (href "http://pre.racket-lang.org/docs/html/reference/number-types.html#(def._((quote._~23~25kernel)._number~3f))") (pltdoc "x")) "number?")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "fish") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td)) "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/define.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._define))") (pltdoc "x")) "define")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "feed") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://pre.racket-lang.org/docs/html/reference/generic-numbers.html#(def._((quote._~23~25kernel)._%2B))") (pltdoc "x")) "+")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/module.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._module%2B))") (pltdoc "x")) "module+")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "test") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://pre.racket-lang.org/docs/html/rackunit/api.html#(def._((lib._rackunit%2Fmain..rkt)._check-equal~3f))") (pltdoc "x")) "check-equal?")) (span ((class "hspace")) nbsp) (span ((class "RktVal")) "3") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "feed") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")) "\n") "\nSince tests are isolated to a submodule, it might make sense to âstripâ tests from a set of modules to prepare them for distribution to end-users. Although we havenât created the " (span ((class "stt")) "raco strip") " command, yet, itâs a likely future addition. In that way, submodules act like sections in an object-linking file format such as ELF." (br) "\n" (h3 "\n" (a ((href "") (name "(part._.Core_.Submodule_.Forms)"))) "Core Submodule Forms") "\nThe " (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/module.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._module%2B))") (pltdoc "x")) "module+")) " form is actually just a macro that expands to a more primitive form for declaring submodules. The primitive submodule forms are " (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/module.html#(form._((quote._~23~25kernel)._module))") (pltdoc "x")) "module")) " and " (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/module.html#(form._((quote._~23~25kernel)._module*))") (pltdoc "x")) "module*")) ", which reflect the two different directions that module dependencies can run: the " (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/module.html#(form._((quote._~23~25kernel)._module*))") (pltdoc "x")) "module*")) " form allows the submodule to import its enclosing module, while the " (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/module.html#(form._((quote._~23~25kernel)._module))") (pltdoc "x")) "module")) " form allows the enclosing module to import the submodule." (br) "\nAs a minor feature, submodules can be declared with " (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/module.html#(form._((quote._~23~25kernel)._module))") (pltdoc "x")) "module")) " and used by a " (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/require.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._require))") (pltdoc "x")) "require")) "â" (wbr) "essentially the same within a module as interactively:" (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (a ((class "RktModLink") (href "http://pre.racket-lang.org/docs/html/guide/Module_Syntax.html#(part._hash-lang)") (pltdoc "x")) (span ((class "RktMod")) "#lang")) (span ((class "hspace")) nbsp) (a ((class "RktModLink") (href "http://pre.racket-lang.org/docs/html/reference/index.html") (pltdoc "x")) (span ((class "RktSym")) "racket/base")))) "\n" (tr (td)) "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/module.html#(form._((quote._~23~25kernel)._module))") (pltdoc "x")) "module")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "zoo") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "racket/base"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/require.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._provide))") (pltdoc "x")) "provide")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "tiger") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/define.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._define))") (pltdoc "x")) "define")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "tiger") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "\"Tony\"") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td)) "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/require.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._require))") (pltdoc "x")) "require")) (span ((class "hspace")) nbsp) (span ((class "RktVal")) "'") (span ((class "RktVal")) "zoo") (span ((class "RktPn")) ")"))) "\n" (tr (td)) "\n" (tr (td (span ((class "RktSym")) "tiger"))) "\n")) "\n") "\nMore significantly, " (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/module.html#(form._((quote._~23~25kernel)._module))") (pltdoc "x")) "module")) " allows a submodule to be free of any dependency on its enclosing module, while the enclosing module similarly has no obligation to import the submodule." (br) "\nThe " (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/module.html#(form._((quote._~23~25kernel)._module*))") (pltdoc "x")) "module*")) " form similarly implies no a priori dependency of the submodule on its enclosing module, except that a " (span ((class "RktVal")) "#f") " for the submoduleâs initial import means an import of all of the enclosing moduleâs bindings. The " (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/module.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._module%2B))") (pltdoc "x")) "module+")) " form expands (after collecting all pieces of a submoduleâs body) to a " (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/module.html#(form._((quote._~23~25kernel)._module*))") (pltdoc "x")) "module*")) " form with a " (span ((class "RktVal")) "#f") " initial import." (br) "\n" (h3 "\n" (a ((href "") (name "(part._.In-.Source_.Documentation)"))) "In-Source Documentation") "\nA more interesting example is the " (a ((class "RktModLink") (href "http://pre.racket-lang.org/docs/html/scribble/srcdoc.html#(mod-path._scribble%2Fsrcdoc)") (pltdoc "x")) (span ((class "RktSym")) "scribble/srcdoc")) " library, which supports documentation within a libraryâs source in a JavaDoc-like way:" (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (blockquote ((class "Rfilebox")) "\n") "\n") "\n" (div ((class "Rfiletitle")) "\n" (span ((class "Rfilename")) (span ((class "stt")) "\"fish4.rkt\""))) "\n" (blockquote ((class "Rfilecontent")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (a ((class "RktModLink") (href "http://pre.racket-lang.org/docs/html/guide/Module_Syntax.html#(part._hash-lang)") (pltdoc "x")) (span ((class "RktMod")) "#lang")) (span ((class "hspace")) nbsp) (a ((class "RktModLink") (href "http://pre.racket-lang.org/docs/html/reference/index.html") (pltdoc "x")) (span ((class "RktSym")) "racket")))) "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/require.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._require))") (pltdoc "x")) "require")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "scribble/srcdoc"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/scribble/srcdoc.html#(form._((lib._scribble%2Fsrcdoc..rkt)._for-doc))") (pltdoc "x")) "for-doc")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "racket/base") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "scribble/manual") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td)) "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/require.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._provide))") (pltdoc "x")) "provide")))) "\n" (tr (td (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/scribble/srcdoc.html#(form._((lib._scribble%2Fsrcdoc..rkt)._thing-doc))") (pltdoc "x")) "thing-doc")))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktSym")) "fish") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "listof") (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktValLink") (href "http://pre.racket-lang.org/docs/html/reference/number-types.html#(def._((quote._~23~25kernel)._number~3f))") (pltdoc "x")) "number?")) (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktVal")) "\"Our fish, each represented as a number.\"") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/define.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._define))") (pltdoc "x")) "define")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "fish") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "'") (span ((class "RktVal")) "(") (span ((class "RktVal")) "1") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2") (span ((class "RktVal")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td)) "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/require.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._provide))") (pltdoc "x")) "provide")))) "\n" (tr (td (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/scribble/srcdoc.html#(form._((lib._scribble%2Fsrcdoc..rkt)._proc-doc%2Fnames))") (pltdoc "x")) "proc-doc/names")))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktSym")) "feed") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://pre.racket-lang.org/docs/html/reference/number-types.html#(def._((quote._~23~25kernel)._number~3f))") (pltdoc "x")) "number?")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) ". ") (span ((class "RktSym")) (span ((class "nobreak")) "-" ">")) (span ((class "RktPn")) " .") (span ((class "hspace")) nbsp) (span ((class "RktSym")) (a ((class "RktValLink") (href "http://pre.racket-lang.org/docs/html/reference/number-types.html#(def._((quote._~23~25kernel)._number~3f))") (pltdoc "x")) "number?")) (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "n") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktVal")) "\"Feed 1 pound of food to the fish \"") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/scribble/scribble_manual_code.html#(form._((lib._scribble%2Fmanual..rkt)._racket))") (pltdoc "x")) "racket")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "\".\"") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/define.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._define))") (pltdoc "x")) "define")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) "feed") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://pre.racket-lang.org/docs/html/reference/generic-numbers.html#(def._((quote._~23~25kernel)._%2B))") (pltdoc "x")) "+")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "n") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "1") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")) "\n") "\nThe " (a ((class "RktModLink") (href "http://pre.racket-lang.org/docs/html/scribble/srcdoc.html#(mod-path._scribble%2Fsrcdoc)") (pltdoc "x")) (span ((class "RktSym")) "scribble/srcdoc")) " library provides " (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/scribble/srcdoc.html#(form._((lib._scribble%2Fsrcdoc..rkt)._thing-doc))") (pltdoc "x")) "thing-doc")) " and " (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/scribble/srcdoc.html#(form._((lib._scribble%2Fsrcdoc..rkt)._proc-doc))") (pltdoc "x")) "proc-doc")) ", which can be used instead of a plain " (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/require.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._provide))") (pltdoc "x")) "provide")) " form to attach both a contract and documentation to the exported binding. The contract is used at run time to guard uses of the value. The contract is also included in the documentation with hyperlinks to bindings that are used in the contract, such as " (span ((class "RktSym")) (a ((class "RktValLink") (href "http://pre.racket-lang.org/docs/html/reference/number-types.html#(def._((quote._~23~25kernel)._number~3f))") (pltdoc "x")) "number?")) "." (br) "\nIn addition to " (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/require.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._provide))") (pltdoc "x")) "provide")) " forms, the " (span ((class "RktSym")) "scribble/srcdoc") " library provides " (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/scribble/srcdoc.html#(form._((lib._scribble%2Fsrcdoc..rkt)._for-doc))") (pltdoc "x")) "for-doc")) " for use within " (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/require.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._require))") (pltdoc "x")) "require")) ". A " (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/scribble/srcdoc.html#(form._((lib._scribble%2Fsrcdoc..rkt)._for-doc))") (pltdoc "x")) "for-doc")) " imports forms that are used in the implementation of the documentation, as opposed to the implementation of the library. In " (span ((class "stt")) "\"fish4.rkt\"") ", " (a ((class "RktModLink") (href "http://pre.racket-lang.org/docs/html/scribble/manual.html") (pltdoc "x")) (span ((class "RktSym")) "scribble/manual")) " is imported for the " (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/scribble/scribble_manual_code.html#(form._((lib._scribble%2Fmanual..rkt)._racket))") (pltdoc "x")) "racket")) " form that is used in the documentation of " (span ((class "RktSym")) "feed") "." (br) "\nThese forms from " (a ((class "RktModLink") (href "http://pre.racket-lang.org/docs/html/scribble/srcdoc.html#(mod-path._scribble%2Fsrcdoc)") (pltdoc "x")) (span ((class "RktSym")) "scribble/srcdoc")) " work together to construct a " (span ((class "RktSym")) "srcdoc") " submodule that contains documentation for the enclosing module without creating any documentation-related run-time overhead for the enclosing module.  The moduleâs documentation is loaded from bytecode only when specifically requested from the " (span ((class "RktSym")) "srcdoc") " submodule for inclusion in a documentation build via " (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/scribble/srcdoc.html#(form._((lib._scribble%2Fextract..rkt)._include-extracted))") (pltdoc "x")) "include-extracted")) ":" (br) "\n" (blockquote ((class "Rfilebox")) "\n") "\n" (div ((class "Rfiletitle")) "\n" (span ((class "Rfilename")) (span ((class "stt")) "\"fish4.scrbl\""))) "\n" (blockquote ((class "Rfilecontent")) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (span ((class "RktMeta")) "#lang") (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (a ((class "RktModLink") (href "http://pre.racket-lang.org/docs/html/scribble/manual.html") (pltdoc "x")) (span ((class "RktSym")) "scribble/manual")) (span ((class "RktMeta"))))) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "RktPn")) "@") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/require.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._require))") (pltdoc "x")) "require")) (span ((class "RktMeta"))) (span ((class "hspace")) nbsp) (span ((class "RktMeta"))) (span ((class "RktSym")) "scribble/extract") (span ((class "RktPn")) ")") (span ((class "RktMeta"))))) "\n" (tr (td)) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "RktPn")) "@") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://pre.racket-lang.org/docs/html/scribble/base.html#(def._((lib._scribble%2Fbase..rkt)._title))") (pltdoc "x")) "title")) (span ((class "RktPn")) "{") (span ((class "RktVal")) "Fish") (span ((class "RktPn")) "}") (span ((class "RktMeta"))))) "\n" (tr (td)) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "RktPn")) "@") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/scribble/doc-modules.html#(form._((lib._scribble%2Fmanual..rkt)._defmodule))") (pltdoc "x")) "defmodule")) (span ((class "RktPn")) "[") (span ((class "RktVal")) "\"fish.rkt\"") (span ((class "RktPn")) "]") (span ((class "RktMeta"))))) "\n" (tr (td)) "\n" (tr (td (span ((class "RktMeta"))) (span ((class "RktPn")) "@") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/scribble/srcdoc.html#(form._((lib._scribble%2Fextract..rkt)._include-extracted))") (pltdoc "x")) "include-extracted")) (span ((class "RktPn")) "[") (span ((class "RktVal")) "\"fish4.rkt\"") (span ((class "RktPn")) "]") (span ((class "RktMeta"))))) "\n")) "\n") "\n") "\n" (h3 "\n" (a ((href "") (name "(part._.Implementing_.Languages)"))) "Implementing Languages") "\nTop-level modules in Racket intentionally inherit no bindings from the top-level environment, so that (1) a moduleâs meaning is fixed independent of its load order or other effects, and (2) the initial import of a module can act as a âlanguageâ with complete control over the moduleâs meaning. That is, " (a ((class "RktModLink") (href "http://pre.racket-lang.org/docs/html/guide/Module_Syntax.html#(part._hash-lang)") (pltdoc "x")) (span ((class "RktMod")) "#lang")) " is in principle the only top-level form in Racket. With only modules at the top level, however, macros cannot abstract over sets of top-level modules." (br) "\nSubmodules provide more flexibility, in that a macro defined within a module can abstract over a set of submodules. As it happens, abstracting over a set of submodules is useful for defining a new language for use with " (a ((class "RktModLink") (href "http://pre.racket-lang.org/docs/html/guide/Module_Syntax.html#(part._hash-lang)") (pltdoc "x")) (span ((class "RktMod")) "#lang")) "." (br) "\nA language for use with " (a ((class "RktModLink") (href "http://pre.racket-lang.org/docs/html/guide/Module_Syntax.html#(part._hash-lang)") (pltdoc "x")) (span ((class "RktMod")) "#lang")) " is implemented by several pieces that live at different times, including the languageâs parser, the languageâs run-time support library, and the languageâs syntax-coloring plug-in for DrRacket. Formerly, a programmer who implements a language with those three pieces was forced to write three different modules (or else tangle the different pieces in a single module, which invariably pulls too many dependencies into any one of them). Those pieces now can be in submodules, which opens the possibility for new abstractions that conveniently generate the various pieces of a language." (br) "\nFor example, if you want to define an " (span ((class "RktSym")) "ocean") " language that is " (a ((class "RktModLink") (href "http://pre.racket-lang.org/docs/html/reference/index.html") (pltdoc "x")) (span ((class "RktSym")) "racket/base")) " plus " (span ((class "RktSym")) "fish") ", itâs enough to install the following module as " (span ((class "stt")) "\"main.rkt\"") " in an " (span ((class "stt")) "\"ocean\"") " collection (e.g., in an " (span ((class "stt")) "\"ocean\"") " directory is that is registered as a collection with the command " (span ((class "stt")) "raco link ocean") "):" (br) "\n" (blockquote ((class "SCodeFlow")) "\n" (table ((cellspacing "0") (class "RktBlk")) (tbody "\n" (tr (td (a ((class "RktModLink") (href "http://pre.racket-lang.org/docs/html/guide/Module_Syntax.html#(part._hash-lang)") (pltdoc "x")) (span ((class "RktMod")) "#lang")) (span ((class "hspace")) nbsp) (a ((class "RktModLink") (href "http://pre.racket-lang.org/docs/html/reference/index.html") (pltdoc "x")) (span ((class "RktSym")) "racket/base")))) "\n" (tr (td)) "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/require.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._provide))") (pltdoc "x")) "provide")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/require.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._all-from-out))") (pltdoc "x")) "all-from-out")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "racket/base") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktSym")) "fish") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/define.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._define))") (pltdoc "x")) "define")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "fish") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "'") (span ((class "RktVal")) "(") (span ((class "RktVal")) "1") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "2") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "3") (span ((class "RktVal")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td)) "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://pre.racket-lang.org/docs/html/reference/Writing.html#(def._((lib._racket%2Fprivate%2Fmisc..rkt)._displayln))") (pltdoc "x")) "displayln")) (span ((class "hspace")) nbsp) (span ((class "RktVal")) "\"Fish are swimming\"") (span ((class "RktPn")) ")"))) "\n" (tr (td)) "\n" (tr (td (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://pre.racket-lang.org/docs/html/reference/module.html#(form._((quote._~23~25kernel)._module))") (pltdoc "x")) "module")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "reader") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "syntax/module-reader"))) "\n" (tr (td (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "#:language") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "'") (span ((class "RktVal")) "ocean") (span ((class "RktPn")) ")"))) "\n")) "\n") "\nWhen Racket sees a module that starts " (a ((class "RktModLink") (href "http://pre.racket-lang.org/docs/html/guide/Module_Syntax.html#(part._hash-lang)") (pltdoc "x")) (span ((class "RktMod")) "#lang")) (span ((class "stt")) " ") (span ((class "RktSym")) "ocean") ", it does not simply load the " (span ((class "stt")) "\"main.rkt\"") " module of the " (span ((class "stt")) "\"ocean\"") " collection. Instead, " (a ((class "RktModLink") (href "http://pre.racket-lang.org/docs/html/guide/Module_Syntax.html#(part._hash-lang)") (pltdoc "x")) (span ((class "RktMod")) "#lang")) " looks for a " (span ((class "RktSym")) "reader") " submodule of the " (span ((class "stt")) "\"main.rkt\"") " module. The " (span ((class "RktSym")) "reader") " module above does not depend on its enclosing module, so that parsing a module in the " (span ((class "RktSym")) "ocean") " language does not trigger the âFish are swimmingâ printout. Instead, the " (span ((class "RktPn")) "#:language") (span ((class "stt")) " ") (span ((class "RktVal")) "'") (span ((class "RktVal")) "ocean") " part of the " (span ((class "RktSym")) "reader") " submodule indicates that a module parsed from " (a ((class "RktModLink") (href "http://pre.racket-lang.org/docs/html/guide/Module_Syntax.html#(part._hash-lang)") (pltdoc "x")) (span ((class "RktMod")) "#lang")) (span ((class "stt")) " ") (span ((class "RktSym")) "ocean") " starts by importing the " (span ((class "RktSym")) "ocean") " module, so the bindings of " (span ((class "RktSym")) "ocean") " are available in the program, and âFish are swimmingâ will print when the program is run." (br) "\n" (h3 "\n" (a ((href "") (name "(part._.Submodules_are_.Like___)"))) "Submodules are Like...") "\nAt some level, syntactic nesting of modules is an obvious feature to include in a module system.  Nevertheless, Racketâs submodules are " (span ((style "font-style: italic;")) "not") " like nested modules most languagesâ" (wbr) "including Python, Chez, or MLâ" (wbr) "where nesting is for namespace management and nested modules are always instantiated in along with the enclosing module. Racket submodules can be used in a similar way, but the fact that submodules are separately loadable makes them available to solve a larger class of problems." (br) "\nIf I had to pick just one analogy, Iâd say that submodules are most like a generalization of annotations in the Java sense. Java annotations allow the decoration of code with metadata, and the annotations are preserved through run time, so that annotations can be inspected in source, in compiled code, or reflectively at run time. Java annotations are limited to data, so that any abstraction or programatic interpretation of the data depends on yet another external tool and language, or else the code part (such as test to run for a " (span ((class "stt")) "@Test") " annotation) is difficult to separate from the main program. C# attributes are slightly more general, in that the data can have associated methods, but attribute code is still mingled with run-time code. Submodules generalize annotations to make them âlive,â so that the language of annotations can include expressions, functions, and even syntactic extensions, while allowing the annotation/submodule code to stay separate from the base code." (br) "\n" (span ((style "font-weight: bold;")) "For more information on submodules") ", see " (a ((href "http://pre.racket-lang.org/docs/html/guide/Module_Syntax.html#(part._submodules)") (pltdoc "x")) "the pre-release Guide section") ".") (link ((href "http://blog.racket-lang.org/feeds/2509585020298466138/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=2509585020298466138") (rel "replies") (title "1 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2509585020298466138") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2509585020298466138") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/06/submodules.html") (rel "alternate") (title "Submodules") (type "text/html"))) (author (name "Matthew Flatt") (uri "https://www.blogger.com/profile/03369511886823036667") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "1")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6027746791514492154") (published "2012-04-02T18:46:00.000-04:00") (updated "2012-06-24T22:06:12.943-04:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "new-feature"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "scribble"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "tools"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "documentation"))) (title ((type "text")) "Scribble Your Blogs") (post-content (p (a ((href "http://doc.racket-lang.org/scribble/index.html") (pltdoc "x")) "Scribble") " is a great language for writing documentation. Now it" rsquo "s a great language for writing blog posts, too. I" rsquo "ve just released a tool called Scriblogify that compiles Scribble documents and posts them as blog entries. Scriblogify is a more polished and automated version of the scripts I" rsquo "ve been using for several months to prepare posts for " (a ((href "http://macrologist.blogspot.com")) "my own blog") ".") (a ((name "more"))) (p "To get Scriblogify, just download it from " (a ((href "http://planet.racket-lang.org/")) "PLaneT") ":") (p (div ((class "SIntrapara")) (blockquote ((class "SCodeFlow"))) (p (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/require.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._require))") (pltdoc "x")) "require")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/require.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._planet))") (pltdoc "x")) "planet")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "ryanc/scriblogify:1") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) (div ((class "SIntrapara")) "or ") (div ((class "SIntrapara")) (span ((class "hspace")) nbsp nbsp) (span ((class "stt")) "raco planet install ryanc scriblogify.plt 1 0"))) (p "The package automatically installs a " (span ((class "stt")) "raco") " subcommand (" (span ((class "stt")) "raco scriblogify") ") that can be used to configure Scriblogify and process and upload blog posts.") (p "Configure Scriblogify by running") (p (span ((class "hspace")) nbsp nbsp) (span ((class "stt")) "raco scriblogify --setup")) (p "That will open a browser window with the Scriblogify configuration servlet. The servlet will prompt you to authorize Scriblogify to access your Blogger and Picasa Web Albums accounts (only the Blogger/Picasa combination is currently supported) and then create one or more " (span ((style "font-style: italic")) "profiles") 8212 (wbr) "named combinations of blogs and web albums to upload to.") (p "Scriblogify automatically handles images computed in your Scribble documents by uploading them to a web album. For example, here are some images computed with the " (a ((class "RktModLink") (href "http://doc.racket-lang.org/slideshow/Making_Pictures.html") (pltdoc "x")) (span ((class "RktSym")) "slideshow/pict")) " library:") (blockquote ((class "SCodeFlow")) (table ((cellspacing "0") (class "RktBlk")) (tbody (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/require.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._require))") (pltdoc "x")) "require")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "slideshow/pict") (span ((class "RktPn")) ")"))) "\n" (tr (td (table ((cellspacing "0")) (tbody (tr (td)) "\n")))) "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/define.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._define))") (pltdoc "x")) "define")) (span ((class "hspace")) nbsp) (span ((class "RktSym")) "rainbow-colors"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktVal")) "'") (span ((class "RktVal")) "(") (span ((class "RktVal")) "\"red\"") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "\"orange\"") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "\"yellow\"") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "\"green\"") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "\"blue\"") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "\"purple\"") (span ((class "RktVal")) ")") (span ((class "RktPn")) ")"))) "\n")))) "\n" (tr (td (table ((cellspacing "0")) (tbody (tr (td)) "\n")))) "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/for.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._for%2Flist))") (pltdoc "x")) "for/list")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktSym")) "c") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "rainbow-colors") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/slideshow/Pict_Drawing_Adjusters.html#(def._((lib._slideshow%2Fpict..rkt)._colorize))") (pltdoc "x")) "colorize")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/slideshow/Basic_Pict_Constructors.html#(def._((lib._slideshow%2Fpict..rkt)._filled-rounded-rectangle))") (pltdoc "x")) "filled-rounded-rectangle")) (span ((class "hspace")) nbsp) (span ((class "RktVal")) "20") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "20") (span ((class "RktPn")) ")") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "c") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")))) "\n" (tr (td (p (span ((class "RktRes")) "'(") (img ((alt "image") (height "20") (src "http://lh3.googleusercontent.com/-Nw2qGT_Gqf0/T3ooFbzLYfI/AAAAAAAAAM0/RH0sF_LIFv4/6224749dcbedde288fbe.png") (width "20"))) (span ((class "RktRes"))) (span ((class "hspace")) nbsp) (span ((class "RktRes"))) (img ((alt "image") (height "20") (src "http://lh3.googleusercontent.com/-8-7SmENh9k0/T3ooFdQbY3I/AAAAAAAAAM8/ZICyhocb6Rc/c4913728963093e38751.png") (width "20"))) (span ((class "RktRes"))) (span ((class "hspace")) nbsp) (span ((class "RktRes"))) (img ((alt "image") (height "20") (src "http://lh4.googleusercontent.com/-PSOcb7stZr8/T3ooFt_7-rI/AAAAAAAAANE/mWLrEDwXZds/444bca14470831e7d6ff.png") (width "20"))) (span ((class "RktRes"))) (span ((class "hspace")) nbsp) (span ((class "RktRes"))) (img ((alt "image") (height "20") (src "http://lh5.googleusercontent.com/-TsD6Vcl-sxg/T3ooF6QHwSI/AAAAAAAAANM/z62Ez6h6LHc/89476984cb9eb9240fc3.png") (width "20"))) (span ((class "RktRes"))) (span ((class "hspace")) nbsp) (span ((class "RktRes"))) (img ((alt "image") (height "20") (src "http://lh4.googleusercontent.com/-89QNBJBWeGM/T3ooGLS9rmI/AAAAAAAAANU/sppnlqzKAvo/28cec16b31d4c76075b9.png") (width "20"))) (span ((class "RktRes"))) (span ((class "hspace")) nbsp) (span ((class "RktRes"))) (img ((alt "image") (height "20") (src "http://lh4.googleusercontent.com/-onBFW733Vbk/T3ooGMaJQtI/AAAAAAAAANc/iDWI9-vDc0c/c5b6cc6caacf7236552c.png") (width "20"))) (span ((class "RktRes")) ")")))) "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktStxLink") (href "http://doc.racket-lang.org/reference/for.html#(form._((lib._racket%2Fprivate%2Fbase..rkt)._for%2Flist))") (pltdoc "x")) "for/list")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktPn")) "[") (span ((class "RktSym")) "c") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "rainbow-colors") (span ((class "RktPn")) "]"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "[") (span ((class "RktSym")) "dir") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/reference/sequences.html#(def._((lib._racket%2Fprivate%2Fbase..rkt)._in-cycle))") (pltdoc "x")) "in-cycle")) (span ((class "hspace")) nbsp) (span ((class "RktVal")) "'") (span ((class "RktVal")) "(") (span ((class "RktVal")) "right") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "left") (span ((class "RktVal")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) "]") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/slideshow/More_Pict_Constructors.html#(def._((lib._slideshow%2Fpict..rkt)._standard-fish))") (pltdoc "x")) "standard-fish")) (span ((class "hspace")) nbsp) (span ((class "RktVal")) "25") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "25") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "#:color") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "c") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "#:direction") (span ((class "hspace")) nbsp) (span ((class "RktSym")) "dir") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")))) "\n" (tr (td (p (span ((class "RktRes")) "'(") (img ((alt "image") (height "25") (src "http://lh5.googleusercontent.com/-4Q5VuSIxAqM/T3ooGc4R_cI/AAAAAAAAANk/uCrs5__CBcw/3d1b37788f87402ac5b4.png") (width "25"))) (span ((class "RktRes"))) (span ((class "hspace")) nbsp) (span ((class "RktRes"))) (img ((alt "image") (height "25") (src "http://lh3.googleusercontent.com/-nvrVBDBOJKM/T3ooGkB6yxI/AAAAAAAAANs/wiXUMZ1TqhU/c76c2fd9ee8dd17478a9.png") (width "25"))) (span ((class "RktRes"))) (span ((class "hspace")) nbsp) (span ((class "RktRes"))) (img ((alt "image") (height "25") (src "http://lh4.googleusercontent.com/-gJNYPaUVH6M/T3ooGqonXgI/AAAAAAAAAN0/MZZFHgrh4Bw/26ad2820ad55cd949830.png") (width "25"))) (span ((class "RktRes"))) (span ((class "hspace")) nbsp) (span ((class "RktRes"))) (img ((alt "image") (height "25") (src "http://lh4.googleusercontent.com/-8twqYanpVm8/T3ooG8BmwhI/AAAAAAAAAN8/Nh8nO9f2IzU/29f3c6b6309db3f073fe.png") (width "25"))) (span ((class "RktRes"))) (span ((class "hspace")) nbsp) (span ((class "RktRes"))) (img ((alt "image") (height "25") (src "http://lh3.googleusercontent.com/-I_IExb2OzW4/T3ooHMMUlLI/AAAAAAAAAOE/cV_laHY790o/2d20a4ca5d5ba1526683.png") (width "25"))) (span ((class "RktRes"))) (span ((class "hspace")) nbsp) (span ((class "RktRes"))) (img ((alt "image") (height "25") (src "http://lh5.googleusercontent.com/-cu-91yF88j8/T3ooHHJGP2I/AAAAAAAAAOM/jdsgqusxKJQ/d9054d26c7c079238f6d.png") (width "25"))) (span ((class "RktRes")) ")")))) "\n" (tr (td (table ((cellspacing "0") (class "RktBlk")) (tbody (tr (td (span ((class "stt")) ">" " ") (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/slideshow/Pict_Combiners.html#(def._((lib._slideshow%2Fpict..rkt)._cc-superimpose))") (pltdoc "x")) "cc-superimpose")))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/slideshow/Pict_Combiners.html#(def._((lib._slideshow%2Fpict..rkt)._cc-superimpose))") (pltdoc "x")) "cc-superimpose")) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/slideshow/More_Pict_Constructors.html#(def._((lib._slideshow%2Fpict..rkt)._cloud))") (pltdoc "x")) "cloud")) (span ((class "hspace")) nbsp) (span ((class "RktVal")) "100") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "80") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "\"lightblue\"") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/slideshow/More_Pict_Constructors.html#(def._((lib._slideshow%2Fpict..rkt)._cloud))") (pltdoc "x")) "cloud")) (span ((class "hspace")) nbsp) (span ((class "RktVal")) "90") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "70") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "\"white\"") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/slideshow/Pict_Combiners.html#(def._((lib._slideshow%2Fpict..rkt)._hc-append))") (pltdoc "x")) "hc-append")) (span ((class "hspace")) nbsp) (span ((class "RktVal")) "10"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/slideshow/More_Pict_Constructors.html#(def._((lib._slideshow%2Fpict..rkt)._standard-fish))") (pltdoc "x")) "standard-fish")) (span ((class "hspace")) nbsp) (span ((class "RktVal")) "30") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "30") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "#:color") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "\"red\"") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "#:direction") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "'") (span ((class "RktVal")) "right") (span ((class "RktPn")) ")"))) "\n" (tr (td (span ((class "RktPlain")) (span ((class "hspace")) nbsp nbsp)) (span ((class "hspace")) nbsp nbsp) (span ((class "RktPn")) "(") (span ((class "RktSym")) (a ((class "RktValLink") (href "http://doc.racket-lang.org/slideshow/More_Pict_Constructors.html#(def._((lib._slideshow%2Fpict..rkt)._standard-fish))") (pltdoc "x")) "standard-fish")) (span ((class "hspace")) nbsp) (span ((class "RktVal")) "25") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "20") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "#:color") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "\"blue\"") (span ((class "hspace")) nbsp) (span ((class "RktPn")) "#:direction") (span ((class "hspace")) nbsp) (span ((class "RktVal")) "'") (span ((class "RktVal")) "left") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")") (span ((class "RktPn")) ")"))) "\n")))) "\n" (tr (td (p (img ((alt "image") (height "80") (src "http://lh5.googleusercontent.com/-9FYRayoPWv0/T3ooHWol4qI/AAAAAAAAAOU/CGsNLHmEVzw/eadf7a1de2b35289ef67.png") (width "100")))))) "\n"))) (p "By Scribbling your blog entries, you get Scribble" rsquo "s nice code formatting, colorizing, and documentation links for free" 8212 (wbr) "well, once you" rsquo "ve updated your blog" rsquo "s CSS (see below). If you" rsquo "re blogging about bleeding-edge work, there" rsquo "s an option to make Scriblogify link to the " (a ((href "http://pre.racket-lang.org/docs/html/")) "nightly build docs") " (updated daily) instead of the " (a ((href "http://docs.racket-lang.org/")) "release docs") " (updated every 3 months).") (p (a ((href "http://planet.racket-lang.org/package-source/ryanc/scriblogify.plt/1/0/planet-docs/scriblogify/index.html")) "Scriblogify" rsquo "s documentation") " has more details, including how to update your blog" rsquo "s CSS for Scribbled content and what bloggable Scribble documents look like.") (p "You can see the source for this blog post " (a ((href "https://github.com/rmculpepper/scriblogify/blob/v1.0/samples/scribble-your-blogs.scrbl")) "here") ". This blog entry was created with the following command:") (p (span ((class "hspace")) nbsp nbsp) (span ((class "stt")) "raco scriblogify -p the-racket-blog scribble-your-blogs.scrbl")) (p "Now go forth and Scribble your blogs.")) (link ((href "http://blog.racket-lang.org/feeds/6027746791514492154/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=6027746791514492154") (rel "replies") (title "2 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/6027746791514492154") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/6027746791514492154") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/04/scribble-your-blogs.html") (rel "alternate") (title "Scribble Your Blogs") (type "text/html"))) (author (name "Ryan Culpepper") (uri "https://www.blogger.com/profile/04275692281825651783") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (media:thumbnail ((height "72") (url "http://lh3.googleusercontent.com/-Nw2qGT_Gqf0/T3ooFbzLYfI/AAAAAAAAAM0/RH0sF_LIFv4/s72-c/6224749dcbedde288fbe.png") (width "72") (xmlns:media "http://search.yahoo.com/mrss/"))) (thr:total "2")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7140437319852267080") (published "2012-03-26T19:55:00.001-04:00") (updated "2012-03-26T19:56:37.609-04:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "release"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Fixed Racket v5.2.1 Installers") (post-content (br) "\nDear Racketeers," (br) "\n" (br) "\nWe have just released a " (a ((href "http://racket-lang.org/download/")) "DrRacket version 5.2.1") " that starts fine today. " nbsp "The fixed version has replaced the 5.2.1 installers. " nbsp "This version and" nbsp "the original 5.2.1 differ only in this one fix." (br) "\n" (br)) (link ((href "http://blog.racket-lang.org/feeds/7140437319852267080/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=7140437319852267080") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/7140437319852267080") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/7140437319852267080") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/03/fixed-racket-v521-installers.html") (rel "alternate") (title "Fixed Racket v5.2.1 Installers") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://plus.google.com/115730576737402335315") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh5.googleusercontent.com/-eR9w2qhxsD0/AAAAAAAAAAI/AAAAAAAACa4/EbnrYldgv28/s32-c/photo.jpg") (width "32")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2390508687802287055") (published "2012-02-02T15:30:00.001-05:00") (updated "2012-03-26T19:53:54.869-04:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "release"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Racket v5.2.1") (post-content "Racket version 5.2.1 is now available from\n" (pre (a ((href "http://racket-lang.org/")) "http://racket-lang.org/")) "\n" (h2 "Release Highlights:") "\n" (ul "\n" (li "Performance improvements include the use of " (tt "epoll()") "/" (tt "kqueue()") " instead of " (tt "select()") " for the Racket thread scheduler, cross-module inlining of small functions, and the use of SSE instead of x87 for JIT-compiled floating-point operations on platforms where SSE is always available (including x86_64 platforms).  A related change is the interning of literal numbers, strings, byte strings, characters, and regexps that appear in code and syntax objects.") "\n" (li "DrRacket uses a set of composable ray-traced icons available from the new " (tt "images") " library collection.") "\n" (li "Typed Racket's " (tt "typecheck-fail") " form allows macro creators to customize the error messages that Typed Racket produces.  This is especially useful when creating pattern matching macros.") "\n" (li "The performance of Redex's matcher has been substantially improved; depending on the model you should see improvements between 2x and 50x in the time it takes to reduce terms.") "\n" (li "Plots look nicer and are more correct at very small and very large scales.  New features include customizable dual axis ticks and transforms (e.g., log axes, date and currency ticks, axis interval collapse and stretch), stacked histograms, and 3D vector fields.  The legacy " (tt "fit") " function and libfit have been removed.") "\n" (li "The " (tt "2htdp/universe") " library's " (tt "big-bang") " form supports an experimental game pad key handler.") "\n" (li "The " (tt "db") " library now supports nested transactions and PostgreSQL arrays.  Bugs involving MySQL authentication and memory corruption in the SQLite bindings have been fixed.") "\n" (li "The Macro Stepper tool in DrRacket no longer executes a program after expanding it.") "\n" (li "In the DMdA teaching languages, infinite recursive signatures (\"streams\", for example) with no intervening " (tt "mixed") " are now supported, and the signatures of record definitions without fields now have generators for use with " (tt "property") ".") "\n" (li "MysterX's ActiveX support is deprecated and will be removed in the next release.  MysterX's core COM functionality will become deprecated in the next release, but COM functionality will be supported for the foreseeable future as a compatibility layer over a forthcoming " (tt "ffi/com") " library.") "\n")) (link ((href "http://blog.racket-lang.org/feeds/2390508687802287055/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=2390508687802287055") (rel "replies") (title "4 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2390508687802287055") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2390508687802287055") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/02/racket-v521.html") (rel "alternate") (title "<a href=\"http://racket-lang.org\">Racket v5.2.1</a>") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://plus.google.com/115730576737402335315") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh5.googleusercontent.com/-eR9w2qhxsD0/AAAAAAAAAAI/AAAAAAAACa4/EbnrYldgv28/s32-c/photo.jpg") (width "32")))) (thr:total "4")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2611538924601880099") (published "2012-02-01T19:25:00.000-05:00") (updated "2012-02-01T21:46:59.560-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "experience-reports"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "serialization"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "continuations"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "web-server"))) (title ((type "text")) "Zack Galler's Experience with Stateful vs Stateless Web Apps") (post-content (p "Communication using HTTP between client and server is a simple problem of halted computation.") "\n" (p "A client computes a request, transmits and halts, waiting for a server response.  On receipt, the server computes a response, transmits and halts, waiting for the next client request.") "\n" (p "This much is well known.") "\n" (p "Racket's magnificent " (em "stateful") " Web server does three things on the server side:") "\n" (ol (li "it " (b "reifies") " a Racket continuation, capturing where the server computation has halted.") "\n" (li "it " (b "externalizes") " the continuation, creating  a URL-representation that uniquely maps to the Racket continuation") "\n" (li "it " (b "disseminates") " the externalized continuation to interested clients, typically via HTTP response, but alternately via SMTP or any other protocol.")) "\n" (p "Then, it waits.") "\n" (p "Later, when " (b "presented") " with an externalized continuation, a quick inverse mapping occurs, the underlying Racket continuation is " (b "invoked,") " and the server processes the new client request.") "\n" (p "Rinse and repeat.") "\n" (p "The problem with this approach is twofold") "\n" (ol (li "the reified Racket continuations live in server memory.  And there's no safe way to garbage collect, as the continuations could be invoked at any time.  There are strategies to reclaim memory, but " (em "some") " load level will noticeably decrease the performance of your application.  And its not possible to figure out what that load level is prior to finishing your application.  This is a problem.") "\n" (li "Again, the reified Racket continuations live in server memory and cannot be moved.  So there's no way to scale an application to more than one server.  It's a necessarily one machine system.  This makes problem #1 worse.")) "\n" (p "Racket's yet more magnificent " (em "stateless") " Web server does exactly the same three things:") "\n" (ol (li "to " (b "reify") ", it rewrites the entire call stack into a format known as " (a ((href "https://en.wikipedia.org/wiki/Administrative_normal_form")) "A-Normal Form") " (ANF).") "\n" (li "to " (b "externalize") ", the ANF'd stack is encoded for transmission over HTTP.") "\n" (li "and then it's sent over to the client (" (b "dissemination") ").")) "\n" (p "Later, when " (b "presented") " with encoded stack, the stateless server performs an inverse transform to " (b "reconstruct") " the call stack, at which point the server keeps going.") "\n" (p "So we've lost the " (b "invocation") " step and substituted a " (b "reconstruction") ".") "\n" (p "But in exchange, we've eliminated continuations from server memory, and solved both enumerated problems above.  Neat trick.") "\n" (br "\n" (p "I provide a few lessons learned for the archives for the next person to attempt porting " (tt "#lang racket") " to " (tt "#lang web-server") " code.") "\n" (p "First, the predicate " (tt "serializable?") " from " (tt "racket/serialize") " is invaluable.  The " (tt "#lang web-server") " code will not transform if there are non-serializable constructs in the dynamic extent of the invocation of " (tt "send/suspend") ", such as a local binding or argument.") "\n" (p "Second, invocations of native continuations reified with " (tt "call/cc") " frequently throw errors related to continuation prompts, such as âattempt to cross a continuation barrierâ or âno corresponding prompt tag in continuationâ.  In all cases, I was able to remedy the situation by enclosing the invocation in " (tt "call-with-continuation-prompt") ".  This may be an error in the system, but it is unclear at this time.") "\n" (p "Third, the transformation does not allow parameters or " (tt "dynamic-wind") ", because the internal data-structures representing them are not serializable, but continuation-marks can be used to reimplement the piece of the functionality you need.") "\n" (br "\n" (p "Finally, thank you to the Racket team.  I think the stateless Web language is important technology and must have required an enormous amount of work to implement.") "\n" (p "Anecdotally, application speed seems at or better than the stateful code.") "\n" (p "To learn more about the stateless Web application infrastructure, " (a ((href "http://docs.racket-lang.org/web-server/stateless.html")) "consult the manual") " or post to the " (a ((href "http://lists.racket-lang.org/")) "mailing list") ".") "\n" (p (i "(This post was written by Zack Galler with minor edits before posting by Jay McCarthy.)"))))) (link ((href "http://blog.racket-lang.org/feeds/2611538924601880099/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=2611538924601880099") (rel "replies") (title "4 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2611538924601880099") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2611538924601880099") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/02/zack-gallers-experience-with-stateful.html") (rel "alternate") (title "Zack Galler's Experience with Stateful vs Stateless Web Apps") (type "text/html"))) (author (name "Jay McCarthy") (uri "https://plus.google.com/101670206687664104937") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh3.googleusercontent.com/-13KUDv8LhZw/AAAAAAAAAAI/AAAAAAAAAAA/7MdiB5POU5k/s32-c/photo.jpg") (width "32")))) (thr:total "4")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-453161652899215709") (published "2011-11-09T22:49:00.000-05:00") (updated "2011-11-09T22:49:08.917-05:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "release"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Racket v5.2") (post-content "Racket version 5.2 is now available from\n" (pre (a ((href "http://racket-lang.org/")) "http://racket-lang.org/")) "\n" (h2 "Release Highlights:") "\n" (ul "\n" (li "DrRacket comes with an experimental, on-line check syntax tool, although this new tool is disabled default.  See below for more information.") "\n" (li "The new " (tt "db") " library offers a high-level, functional interface to popular relational database systems, including PostgreSQL, MySQL, and SQLite, as well as other systems via ODBC.") "\n" (li "A new XREPL collection provides convenient commands for a plain racket REPL.  It is particularly convenient for people who prefer console-based work and alternative editors.  See also the new chapter on command-line tools and other editors at the end of the Racket Guide.") "\n" (li "The " (tt "plot") " collection has been reimplemented in Racket.  It now offers PDF output, log axes, histograms, and more.  Some code that uses " (tt "plot") " will still work, and some will need light porting.  The " (tt "plot/compat") " module offers expedient backward compatibility.") "\n" (li "DrRacket uses more conventional key bindings: " (tt "C-t") " creates a new tab, " (tt "C-w") " closes the current one, and " (tt "C-r") " runs the definitions.  On Mac OS X, the Command key is used.  See âDefining Custom Shortcutsâ in the DrRacket manual for an example that uses the old key bindings.") "\n" (li "The new " (tt "raco link") " command registers a directory as a collection, which allows the collection directory to reside outside the â" (tt "collects") "â tree and without changing the PLTCOLLECTS environment variable.") "\n" (li "Typed Racket:" (ul "\n" (li "Typed Racket provides static performance debugging support to show which code gets optimized and point out code that does not.  Use the âPerformance Reportâ button in DrRacket.") "\n" (li "More intuitive types in printouts in the REPL and in error messages.  Use " (tt ":query-result-type") " to explore types, or " (tt ":print-type") " for a full printout.") "\n" (li "Typed Racket now supports defining function with optional arguments using the same syntax as Racket."))) "\n" (li "Redex now supports specifying (and testing and automatically typesetting) judgment forms including type systems and SOS-style operational semantics.") "\n" (li "Fixed several GUI problems, including problems on Ubuntu 11.10 (GTK+ 3) and 64-bit Mac OS X.") "\n" (li "Internal-definition expansion has changed to use " (tt "let*") " semantics for sequences that contain no back references.  This change removes a performance penalty for using internal definitions instead of " (tt "let") " in common cases, and it only changes the meaning of programs that capture continuations in internal definitions. Internal definitions are now considered preferable in style to " (tt "let") ".") "\n" (li "Support for " (tt "begin-for-syntax") " has been generalized; modules may now define and export both value bindings and syntax bindings (macros) at phase 1 and higher.\n" (p (small "Due to a bug, phase 1 syntax (or higher) is not available in DrRacket's " (tt "#lang") "-based REPL.  A simple workaround is to disable debugging in DrRacket (see âno debuggingâ radio button in detailed language dialog)."))) "\n") "\n" (h2 "Additional Items:") "\n" (ul "\n" (li "The " (tt "racket/gui") " library (and Slideshow) provides more support for multiple-screen displays.") "\n" (li "DrRacket remembers whether an opened file used LF or CRLF line endings, and will continue using the same.  When creating a new file, a preference determines how it is saved.") "\n" (li (tt "net/url") " can now follow HTTP redirections.") "\n" (li "The LNCS and JFP class files are no longer distributed with Racket.  Instead, they are downloaded on demand.") "\n" (li "The Algol language implementation is now available as a plain language using " (tt "#lang algol60") ".") "\n" (li "The Racket-to-C compiler (as accessed via " (tt "raco ctool") " or " (tt "mzc") ") has been removed; Racket's JIT has long provided better performance, and the FFI provides better access to C libraries.") "\n" (li "Contracts can be applied to exports with the new " (tt "contract-out") " form within " (tt "provide") ", instead of a separate " (tt "provide/contract") " form.  (The new " (tt "contract-out") " form is implemented as a new kind of âprovide pre-transformerâ.)") "\n" (li "The " (tt "date*") " structure type is an extension of " (tt "date") " with " (tt "nanosecond") " and " (tt "time-zone-name") " fields.") "\n" (li "New looping constructs: " (tt "for/sum") " and " (tt "for/product") ".") "\n" (li "Direct calls to keyword-accepting functions are now optimized to eliminate the overhead of keywords.  In addition, the compiler detects and logs warnings for keyword-argument mismatches.") "\n" (li "The libfit interface is available from " (tt "plot/deprecated/fit") ", and will be removed in the near future.") "\n" (li "The Unix installer has been re-done, and it is now more robust.") "\n" (li "The built-in reader and printer support for Honu is removed.  (This functionality is re-implemented in Racket.)") "\n") "\n" (h3 "On-line Check Syntax:") "\n" (p "DrRacket now provides an on-line version of the syntax check tool, which means that syntax checking runs automatically while you continue to edit a program.  With this tool enabled, its annotations (e.g., binding arrows) and actions (e.g., the renaming refactoring and direct documentation links) are almost always available.") "\n" (p "We have noticed that on-line syntax checking renders DrRacket unstable on occasion, perhaps because it relies on relatively new support for parallelism.  Occurrences of the problem are rare, but they are not rare enough, which is why we have disabled the tool by default.  At the same time, current users of the tool find it so valuable that we felt it should be included in the release.  We expect to track down the remaining problems and enable the tool by default in near-future release.") "\n" (p "To enable on-line syntax checking (for " (tt "#lang") "-based programs only), click on the red dot in the bottom right of DrRacket's window.  To turn it off, click there again.")) (link ((href "http://blog.racket-lang.org/feeds/453161652899215709/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=453161652899215709") (rel "replies") (title "1 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/453161652899215709") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/453161652899215709") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/11/racket-v52.html") (rel "alternate") (title "<a href=\"http://racket-lang.org/\">Racket v5.2</a>") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://plus.google.com/115730576737402335315") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh5.googleusercontent.com/-eR9w2qhxsD0/AAAAAAAAAAI/AAAAAAAACa4/EbnrYldgv28/s32-c/photo.jpg") (width "32")))) (thr:total "1")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-176509377051155662") (published "2011-10-18T14:28:00.004-04:00") (updated "2012-06-24T21:44:05.047-04:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "eval"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "reflection"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "modules"))) (title ((type "text")) "On eval in dynamic languages generally and in Racket specifically") (post-content (p "The " (tt "eval") " function is at the heart of a dynamic language,\nand it strikes many newcomers as an amazingly powerful tool. At the\nsame time, experienced programmers avoid " (tt "eval") ", because\nunnecessary use creates trouble. It" rsquo "s not easy to explain\nwhy " (tt "eval") " should be avoided or when it" rdquo "s appropriate to\nuse " (tt "eval") ", but I" rsquo "ll take another stab at it here.\n\n\n" (h3 "What is " (tt "eval") "?") "\n\n" (p "Consider the following " ldquo "program" rdquo " in English prose:") "\n\n" (blockquote "\n Assume that your favorite color is red. Now imagine a balloon that is\n your favorite color. Paint a canvas the same color as the balloon.\n") "\n\n" (p "As English goes, that" rsquo "s a fairly clear program with a fairly\nwell-defined result. When I follow those instructions, at least, I\nwill always produce a red canvas (assuming that I have a canvas and\nsome red paint, but a potential lack of art supplies is not the point\nhere).") "\n\n" (p "I would come up with a red canvas even if I read the instructions when\nsurrounded by people who speak only Chinese, obviously, since I" rsquo "m the\none reading the instructions. Furthermore, it would be straightforward\nto translate the program to Chinese, and then a person who reads\nChinese would produce a red canvas.") "\n\n" (p "A translator might even take the liberty of simplifying the program to\njust") "\n\n" (blockquote "\n  Paint a canvas red.\n") "\n\n" (p "The translation loses some of the poetry of the original, but the\nresult is the same.") "\n\n" (p "In Racket terms, the paragraph corresponds to a module. It can be\ncompiled (i.e., translated) and optimized (i.e., simplified). A\nprogram can be made up of multiple modules that are written in\ndifferent languages, but since each module can be reliably translated,\nthey can all be compiled into some common language to run the\nprogram.") "\n\n\n" (p "Here" rsquo "s a different program:") "\n\n" (blockquote "\n Tell the person next to you " ldquo "Assume that your favorite color is red." rdquo "\n Tell the person " ldquo "Now, imagine a balloon that is your favorite color." rdquo "\n Tell the person " ldquo "Paint canvas the same color as the balloon." rdquo "\n") "\n\n" (p "Getting a red canvas back may be a little trickier in this case. If the\nperson next to me speaks only Chinese, then my program may fail with a\nmessage-not-understood error.") "\n\n" (p "If I want to translate the program to Chinese, then it" rsquo "s not clear\nwhether the parts in quotes should be translated. Maybe I mean for a\nperson who can read Chinese but only sound out English to run the\nprogram when surrounded by English speakers, or maybe I mean for a\nChinese person to run the program when surrounded by Chinese people.\nEither way, I have to be a lot more specific to a translator. For more\ncomplex programs, the instructions to the translator can become\ncomplex and fragile.") "\n\n" (p "Finally, a translator probably won" rsquo "t feel comfortable simplifying the\nprogram to") "\n\n" (blockquote "\n Tell the person next to you " ldquo "Paint a canvas red." rdquo "\n") "\n\n" (p "\nbecause there could be all sorts of environmental conditions that make\nthe result different" mdash "such as people who are willing to paint\nbut unwilling to accept assumptions about their favorite colors.") "\n\n" (p "The paragraph with " ldquo "tell the person..." rdquo " is a program that uses " (tt "eval") ".\nIt can" rsquo "t be compiled and optimized as well as the earlier paragraph, and the language context\nin which it is run may change the result. The quotes around sentences\ncorrespond to the quote in front of an expression passed to " (tt "eval") " in\nRacket; there" rsquo "s no particular reason that the language for " (tt "eval") " will\nmatch the language of the program that has the quoted text. The\nissues become even more complex if you try to implement different\nparts of the program in different languages.") "\n\n" (p "If the analogy to multiple spoken languages seems strange" mdash "maybe\nyour language is Javascript, period" mdash "the problem of translation to\nanother language is really a proxy for program understanding. There" rsquo "s\na direct connection to performance and optimization (i.e., translation\nto efficient machine code), but using " (tt "eval") " also makes a program more\ndifficult to understand for the same reasons that it makes the program\nmore difficult to translate. For example, a reader of your program may\nnot be able to tell whether " ldquo "assume your favorite color is red" rdquo " is\njust a rhetorical device to get to a red canvas or whether some new\ninstructions will arrive that will ask for your favorite color.") "\n\n\n" (h3 "When is " (tt "eval") " Good?") "\n\n" (p "The program with " ldquo "tell the person next to you" rdquo " above uses " (tt "eval") " in a\nbad way. The task could just as well be performed by the person reading\nthe instructions, instead of getting another nearby person involved.") "\n\n" (p "Some other uses " (tt "eval") " are both good and necessary. For example,\nconsider the following program:") "\n\n" (blockquote "\n Ask the construction manager for instructions. Walk to the building\n site and convey those instructions to the construction crew.\n") "\n\n" (p "This program uses " (tt "eval") " when it conveys instructions to the\nconstruction crew, but no quoted forms appear in the program. The\nabsence of quoted code is one sign that " (tt "eval") " may be\nappropriate. Note that the program could work no matter what language\nthe manager and crew speak, although there is an implicit (and\nsometimes non-trivial) assumption that the manager and crew speak the\nsame language." (p "\n\n" (p "Here" rsquo "s another example:") "\n\n" (blockquote "\n Go outside, and tell each member of the construction crew " ldquo "take a\n lunch break, now." rdquo "\n") "\n\n" (p "There" rsquo "s a quoted program in this case, but it" rsquo "s crucial to ask other\npeople to run the quoted program, instead of just taking the lunch\nbreak yourself. That is, " (tt "eval") " is really necessary. The implementor\nof this program takes on the burden of making sure that the\ninstructions are in a suitable language, however, and may need to\nparameterize the quoted program by an explicit action to translate it\nto a language understood by the construction crew.") "\n\n" (p "Here" rsquo "s one more reasonable example:") "\n\n" (blockquote "\n Ask the construction manager for instructions. Follow them.\n") "\n\n" (p "In this case, it" rsquo "s the construction manager" rsquo "s problem to give you\ninstructions in a language that you understand.") "\n\n" (p "Here" rsquo "s a questionable example:") "\n\n" (blockquote "\n Decide how long to work before lunch, say N hours, and write a note\n to yourself to work N hours. Add to the note by telling yourself to\n take a lunch break afterward.\n") "\n\n" (p "If you could really write that program without quotes, then it" rsquo "s\nprobably ok. The example is misleading, though, because languages\ndon" rsquo "t usually support") "\n\n" (blockquote "\n write a note to yourself to work N hours\n") "\n\n" (p "You" rsquo "d have to write instead") "\n\n" (blockquote "\n write a note to yourself that says " ldquo "work" rdquo " followed by the number N\n and then " ldquo "hours" rdquo "\n") "\n\n" (p "and the quote marks are where the problem comes in. If you translate\nthe program to Chinese, then you have to be careful to somehow\ntranslate " ldquo "work" rdquo " and " ldquo "hours" rdquo " to Chinese, too.") "\n\n" (p "The point here is not that programs without quoted text are clearly\ngood or that programs with quoted text are clearly bad. The real point\nis that a programmer has to be especially careful about passing around\ninstructions and using quoted instructions. Using " (tt "eval") " means\naccepting the burden of using instructions will make sense by the time\nthey are delivered. That burdened is best avoided, which is why\nexperienced programmers avoid " (tt "eval") ", but some of the examples\nillustrate cases where the burden is not avoidable or where the\nactions enabled by " (tt "eval") " make the burden worthwhile.") "\n\n\n" (h3 "Using " (tt "eval") " in Racket") "\n\n" (p "In the context of Racket, the multiple-language analogy is relatively\naccurate, because Racket is about having many programming languages\nwork together and allowing programmers to define ever better languages\nand language constructs. In Racket, it" rsquo "s especially likely that a\nlibrary written in one language is used in a context where another\nlanguage is the default.") "\n\n" (p "Newcomers to Racket sometimes stumble over the fact that") "\n\n" (pre "\n #lang racket\n (define my-x 1)\n (eval '(+ my-x 2))\n") "\n\n" (p "or even") "\n\n" (pre "\n #lang racket\n (eval '(+ 1 2))\n") "\n\n" (p "does not work at all, and yet if the program") "\n\n" (pre "\n #lang racket\n (define my-x 1)\n") "\n\n") "is loaded into a read-eval-print loop" mdash "for example, by clicking the\n" ldquo "Run" rdquo " button in DrRacket and then typing into the lower interactions\npanel" mdash "then") "\n\n" (pre "\n (eval '(+ my-x 2))\n") "\n\n" (p "works as expected.") "\n\n" (p "DrRacket" rsquo "s interactions window has to use " (tt "eval") " in the sense that it\nreads an expression to evaluate and then passes it on to the\ninterpreter for an answer. More generally, to make various pieces of\nthe environment fit together, DrRacket sets " (tt "eval") " globally to use the\nmodule" rsquo "s language while evaluating expressions in the interactions\nwindow. In Racket terminology, DrRacket sets the " (tt "current-namespace") "\nparameter to the module" rsquo "s namespace when it initializes the\ninteractions window. In contrast, while the module body is being\nevaluated, " (tt "eval") " treats expressions as being in the language that is\nempty by default, which is why " (tt "eval") " during the module evaluation\nproduces a different result from " (tt "eval") " during the interactions\nwindows.") "\n\n" (p "You may wonder why DrRacket doesn" rsquo "t initialize the namespace of " (tt "eval") "\nto be the module" rsquo "s namespace from the start, so that in-module uses of\n" (tt "eval") " and the interactions window behave the same. In a program that\nis implemented by multiple modules, which module" rsquo "s language should be\nused? In particular, if the language it" rsquo "s always the main module" rsquo "s\nlanguage, then a module may behave differently on its own than as part\nof a larger program. In the process of developing Racket and DrRacket,\nwe" rsquo "ve seen many such problems, and so Racket now arranges for the\ndefault language to be empty (which is different from any useful\nlanguage) to help programmers remember that there" rsquo "s a language issue\nto consider whenever " (tt "eval") " is used.") "\n\n" (p "The Racket Guide" rsquo "s chapter 15 covers in more depth the issues and\nnamespace tools of Racket for harnessing the power of " (tt "eval") ":") "\n\n" (blockquote "\n " (a ((href "http://docs.racket-lang.org/guide/reflection.html")) "http://docs.racket-lang.org/guide/reflection.html") "\n") "\n\n" (p "Think of " (tt "eval") " as a power tool. For some tasks,\nthere" rsquo "s no real substitute, and so we want " (tt "eval") "\naround. At the same time, " (tt "eval") " should be used with care. In\ndynamic languages generally, that means a reluctant and targeted use\n" (tt "eval") ". In Racket specifically, it means knowing the namespace toolbox\nand being as explicit as possible about the intended context for\ndynamic evaluation."))) (link ((href "http://blog.racket-lang.org/feeds/176509377051155662/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=176509377051155662") (rel "replies") (title "2 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/176509377051155662") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/176509377051155662") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/10/on-eval-in-dynamic-languages-generally.html") (rel "alternate") (title "On eval in dynamic languages generally and in Racket specifically") (type "text/html"))) (author (name "Matthew Flatt") (uri "https://www.blogger.com/profile/03369511886823036667") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "2")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5257012253577974725") (published "2011-08-16T04:15:00.000-04:00") (updated "2011-11-09T22:50:37.950-05:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "release"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Racket v5.1.3") (post-content "Racket version 5.1.3 is now available from" (pre "  " (a ((href "http://racket-lang.org/")) "http://racket-lang.org/")) (p "This is a bugfix release, resolving the DrRacket issue with the contour view.  In addition, two tex files with problematic licensing were removed.")) (link ((href "http://racket-lang.org/") (rel "related") (title "Racket v5.1.3"))) (link ((href "http://blog.racket-lang.org/feeds/5257012253577974725/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=5257012253577974725") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/5257012253577974725") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/5257012253577974725") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/08/racket-v513.html") (rel "alternate") (title "Racket v5.1.3") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_lx1aK_XwT-o/SxSPoMzJgLI/AAAAAAAAAA8/v5ASXddGsSc/s32-R/eli-small.jpg") (width "28")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7519203787706361878") (published "2011-08-03T15:47:00.004-04:00") (updated "2011-11-09T22:50:37.967-05:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "release"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Racket v5.1.2") (post-content "Racket version 5.1.2 is now available from" (pre "  " (a ((href "http://racket-lang.org/")) "http://racket-lang.org/")) (ul (li "The download page includes 64-bit installers for Mac OS X, Windows, and two Debian flavors.  Racket now supports OS X Lion.") (li "Racket now includes a new " (tt "racket/place") " library to support parallelism, complementing " (tt "racket/future") ".  Racket's parallel build process is now based on places instead of multiple OS processes." (br "Places support share-nothing parallelism and message-passing communication.  Compared to futures, places are heavyweight, but they have a simpler performance model.")) (li "The syntax-certificate system has been replaced by a syntax-taint system.  Both certificates and taints were designed to protect otherwise inaccessible bindings from abuse when they appear in macro expansions.  Taints are simpler and lighter, and the switch closes known holes in the certificate system.  Macros that are not implemented with " (tt "syntax-rules") " or " (tt "define-syntax-rule") ", however, must explicitly use " (tt "syntax-protect") " to protect their expansions from abuse.") (li "The " (tt "net/url") " library supports HTTPS connections, but beware that by default all sites are accepted (equivalent to ignoring a browser's warnings about untrusted certificates).") (li "Error messages in the student languages use a simplified vocabulary and consistent phrasings.  If you maintain curriculum material or teachpacks then please consider updating.  See the âError Message Composition Guidelinesâ section in the documentation for details.") (li "Typed Racket: almost all core Racket data structures and operations are now accessible in Typed Racket (most of this work is due to prolific contributor Eric Dobson).  The performance of the typechecker has been significantly improved.") (li "The " (tt "scriblib/bibtex") " library supports BibTeX-formatted citation databases in Scribble documents.  BibTeX can be tricky to parse, so please report failed entries as bug reports.") (li "The " (tt "for") " forms now support an " (tt "#:unless") " clause, and a nonnegative integer can be used as a sequence.  The new " (tt "compose1") " function creates single-valued composition functions.  The " (tt "racket/function") " library now provides " (tt "identity") ", " (tt "thunk") ", and " (tt "thunk*") ".") (li "The license has been clarified: we now use LGPLv2.1 uniformly.  (The license file used to specify LGPLv2, contrary to the download pages.)"))) (link ((href "http://racket-lang.org/") (rel "related") (title "Racket v5.1.2"))) (link ((href "http://blog.racket-lang.org/feeds/7519203787706361878/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=7519203787706361878") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/7519203787706361878") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/7519203787706361878") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/08/racket-v512.html") (rel "alternate") (title "Racket v5.1.2") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_lx1aK_XwT-o/SxSPoMzJgLI/AAAAAAAAAA8/v5ASXddGsSc/s32-R/eli-small.jpg") (width "28")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4765317171885687427") (published "2011-07-29T02:36:00.002-04:00") (updated "2011-08-03T19:25:14.556-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "racketcon"))) (title ((type "text")) "RacketCon Recap") (post-content "We held " (a ((href "http://con.racket-lang.org/")) "RacketCon") " here at " (a ((href "http://www.ccis.neu.edu/2011/")) "Northeastern") " over the past weekend, and it was a great time!" nbsp " Matthew Flatt consulted his magic 8-ball about the future of Racket (it involves Hawaiian shirts); Matthias Felleisen announced the upcoming Realm of Racket book; Robby Findler demoed DrRacket with online syntax checking; Ryan Culpepper taught us how to make Rackety libraries; Prabhakar Ragde explained how the University of Waterloo teaches Racket and Program by Design to 1500 students a year (and how to embed math into Scribble documents)." (br) "\n" (br) "\nDanny Yoo has already " (a ((href "http://blog.hashcollision.org/?p=162")) "blogged") " about his talk about his " (a ((href "http://hashcollision.org/whalesong/")) "Whalesong") " Racket-" ">" "JavaScript compiler. Hopefully other people will write more about some of the individual talks; I'll update this post to link to any that I see." (br) "\n" (br) "\nAs promised, the talks were videotaped by Jeff Dlouhy of the " (a ((href "http://acm.ccs.neu.edu/")) "NUACM") "; the videos are in post-production and should be up within a few weeks. We'll announce their availability on this blog." nbsp " Slides from the individual talks will be up on the " (a ((href "http://con.racket-lang.org/2011/")) "RacketCon webpage") " soon.") (link ((href "http://blog.racket-lang.org/feeds/4765317171885687427/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=4765317171885687427") (rel "replies") (title "6 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/4765317171885687427") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/4765317171885687427") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/07/racketcon-recap.html") (rel "alternate") (title "RacketCon Recap") (type "text/html"))) (author (name "Sam Tobin-Hochstadt") (uri "https://www.blogger.com/profile/12049111326816937908") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "6")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-546301615685805019") (published "2011-06-29T17:25:00.003-04:00") (updated "2011-07-29T17:53:47.051-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "racketcon"))) (title ((type "text")) "Come to RacketCon!") (post-content (center (b "Calling All Racketeers!")) "\n\n" (p "Join us at RacketCon, 23 " "&" " 24 July 2011.") "\n" (p (center (a ((href "http://con.racket-lang.org/")) "http://con.racket-lang.org/"))) "\n\n" (p "\nThe schedule for RacketCon is now available, and includes\npresentations by key members of the Racket team, including Matthew\nFlatt on the future of Racket and Matthias Felleisen on the Program By\nDesign curriculum, as well as tutorials on building web applications\nand accessing low-level libraries.\n") "\n\n" (p "\nThe meeting will take place at Northeastern University in Boston, MA.\nIt will be an opportunity for developers, researchers, and educators\nusing Racket, DrRacket, Program By Design, and related technologies to\ncome together to share plans, ideas, and enthusiasm.  To make it\naccessible, we will not charge any registration fees; we'll also serve\nyou breakfast and lunch.") "\n\n" (p "We're excited about RacketCon, and hope you'll join us there. To\nregister for RacketCon, please send an email with your name and\naffiliation to " (a ((href "mailto:racketcon@racket-lang.org")) "racketcon@racket-lang.org") ".") "\n\n" (p "\nAdditional information, including registration, transportation and\nhotel information, can be found on the web page:\n" (a ((href "http://con.racket-lang.org")) "http://con.racket-lang.org") "\n")) (link ((href "http://con.racket-lang.org/") (rel "related") (title "Come to RacketCon!"))) (link ((href "http://blog.racket-lang.org/feeds/546301615685805019/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=546301615685805019") (rel "replies") (title "2 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/546301615685805019") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/546301615685805019") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/06/come-to-racketcon.html") (rel "alternate") (title "Come to RacketCon!") (type "text/html"))) (author (name "Sam Tobin-Hochstadt") (uri "https://www.blogger.com/profile/12049111326816937908") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "2")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5086396725121935681") (published "2011-05-26T13:46:00.008-04:00") (updated "2012-06-24T22:06:57.752-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "tools"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "code-coverage"))) (title ((type "text")) "Multi-file code coverage viewing tool") (post-content (a ((href "http://3.bp.blogspot.com/-bqUHiG2gf6M/Td6l76u3kMI/AAAAAAAAAGE/HEpOctSVSIc/s1600/covered-files-dialog.png") (onblur "try {parent.deselectBloggerImageGracefully();} catch(e) {}")) (img ((alt "") (border "0") (id "BLOGGER_PHOTO_ID_5611104634546917570") (src "http://3.bp.blogspot.com/-bqUHiG2gf6M/Td6l76u3kMI/AAAAAAAAAGE/HEpOctSVSIc/s320/covered-files-dialog.png") (style "cursor: pointer; float: left; height: 131px; margin: 0pt 10px 10px 0pt; width: 320px;")))) "\n" (br) "\nI'm very pleased to announce the availability of a multi-file code coverage viewer, written by Jonathan Walsh." (br) "\nTorn between separating your test cases into another file and actually seeing the coverage? Well, go ahead and pull them apart, because the multi-file coverage tool displays coverage information for the files required by the present one, including both percentage covered (on a line-by-line basis) and optionally a list of uncovered lines (no more inching through your code, looking for the red highlighting." (br) "\n" (a ((href "http://3.bp.blogspot.com/-d4j23yei4rc/Td6l0wv3UCI/AAAAAAAAAF8/ptD2u9KwevE/s1600/coverage-button.png")) (img ((alt "") (border "0") (id "BLOGGER_PHOTO_ID_5611104511607656482") (src "http://3.bp.blogspot.com/-d4j23yei4rc/Td6l0wv3UCI/AAAAAAAAAF8/ptD2u9KwevE/s320/coverage-button.png") (style "cursor: pointer; float: left; height: 117px; margin: 0pt 10px 10px 0pt; width: 320px;")))) "\n" (span ((style "font-weight: bold;")) "Back End:") "\n\n\n" (br) "\nOne reason I expect this tool to be long-term robust is that it makes absolutely no changes to the back-end; that is, it just uses the existing code coverage framework. The only thing going on here is that the tool provides a way to store, load, and display this information. This means that the tool displays coverage for un-compiled files only. We thought about fiddling with this, but finally decided that the existing behavior was probably about as useful as anything else we'd come up with, and a lot more robust." (br) "\nURL for docs:" (br) "\n" (a ((href "http://planet.racket-lang.org/package-source/jowalsh/code-coverage.plt/1/3/planet-docs/code-coverage/index.html")) "http://planet.racket-lang.org/package-source/jowalsh/code-coverage.plt/1/3/planet-docs/code-coverage/index.html") (br) "\nAs you might expect, it's a one-line install:" (br) "\n" (blockquote ((style "font-family: courier new;")) "\n#lang racket" (br) "\n(require (planet jowalsh/code-coverage))\n") "\nPlease let us know about bugs you discover!") (link ((href "http://planet.racket-lang.org/display.ss?package=code-coverage.plt&owner=jowalsh") (rel "related") (title "Multi-file code coverage viewing tool"))) (link ((href "http://blog.racket-lang.org/feeds/5086396725121935681/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=5086396725121935681") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/5086396725121935681") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/5086396725121935681") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/05/multi-file-code-coverage-viewing-tool.html") (rel "alternate") (title "Multi-file code coverage viewing tool") (type "text/html"))) (author (name "John Clements") (uri "https://www.blogger.com/profile/15701081040575095781") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (media:thumbnail ((height "72") (url "http://3.bp.blogspot.com/-bqUHiG2gf6M/Td6l76u3kMI/AAAAAAAAAGE/HEpOctSVSIc/s72-c/covered-files-dialog.png") (width "72") (xmlns:media "http://search.yahoo.com/mrss/"))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7456665387737613746") (published "2011-05-26T08:21:00.004-04:00") (updated "2011-05-26T11:40:46.799-04:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "matthew"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "interview"))) (title ((type "text")) "Racket on FLOSS Weekly") (post-content (p "Our own " (a ((href "http://www.cs.utah.edu/~mflatt/")) "Matthew Flatt") " was interviewed about Racket " (a ((href "http://twit.tv/floss167")) "on FLOSS Weekly") ".  Also available on " (a ((href "http://www.youtube.com/watch?v=vJGV7HaTdbg")) "YouTube") ".") "\n\n" (iframe ((allowfullscreen "allowfullscreen") (frameborder "0") (height "349") (src "http://www.youtube.com/embed/vJGV7HaTdbg") (width "425")))) (link ((href "http://blog.racket-lang.org/feeds/7456665387737613746/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=7456665387737613746") (rel "replies") (title "6 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/7456665387737613746") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/7456665387737613746") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/05/racket-on-floss-weekly.html") (rel "alternate") (title "Racket on FLOSS Weekly") (type "text/html"))) (author (name "Robby Findler") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (media:thumbnail ((height "72") (url "https://img.youtube.com/vi/vJGV7HaTdbg/default.jpg") (width "72") (xmlns:media "http://search.yahoo.com/mrss/"))) (thr:total "6")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6203425329791139673") (published "2011-04-30T04:19:00.002-04:00") (updated "2011-11-09T22:50:37.954-05:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "release"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Racket v5.1.1") (post-content "Racket version 5.1.1 is now available from" (pre "  " (a ((href "http://racket-lang.org/")) "http://racket-lang.org/")) (ul (li "The new " (tt "racket/stream") " library provides " (tt "stream-first") ", " (tt "stream-rest") ", a lazy " (tt "stream-cons") ", and so on.  Streams are a subtype of sequences, so they work in " (tt "for") " forms.  Some sequence generators, such as " (tt "in-range") ", now produce streams.  A " (tt "racket/sequence") " library replaces the old " (tt "racket/stream") " library.") (li "The new " (tt "racket/syntax") " library contains facilities useful for writing macros.  The new " (tt "syntax/srcloc") " and " (tt "syntax/location") " libraries provide support for manipulating source locations.") (li "The " (tt "racket/gui") " library now supports multi-column list boxes and scrolling panels.") (li "The new " (tt "ffi/file") " library is useful for writing foreign library bindings that cooperate with Racket's security guard mechanism.") (li "Generators from the " (tt "racket/generator") " library can now have formal arguments that are used when the generator is fired up.") (li "Single-precision floating-point support is now enabled by default.  Single-precision floats print differently from their default double-precision counterparts, new primitives convert between the two precisions, and new reader syntax supports single-precision literals.") (li "JIT improvements include a small change to aid x86 branch prediction on function-call returns, which can speed up some programs significantly.") (li "Typed Racket:" (ul (li "The numeric tower has been entirely overhauled.  TR programs can now use more precise types than before, and check more numeric properties, such as sign or range properties.") (li "Fixnum optimizations have been improved and should apply more broadly.") (li "The performance of the typechecker has been improved.  In particular, dispatch on large union types should typecheck much faster than before."))) (li "The Stepper can now step through Lazy Racket programs.") (li "The " (tt "racket/future") " library includes " (tt "fsemaphore") " values, the " (tt "future") " primitive no longer freezes futures (so a future can spawn new futures), and " (tt "future") " log messages are more informative.") (li "PLaneT development links are now version-specific.") (li "The " (tt "2htdp/image") " library now includes " (tt "overlay/align") ", " (tt "underlay/align") ", " (tt "overlay/align/offset") " and " (tt "underlay/align/offset") ".") (li "The network protocol for universes in " (tt "2htdp/universe") " has changed, so that v5.1.1 is incompatible with earlier versions.") (li "The \"DrScheme\" application (which simply ran DrRacket in the last few releases) has been removed.  The \"MrEd\" GUI executables for Windows and Mac OS X have also been removed, although the \"mred\" console executable remains for Unix and Mac OS X to support old scripts."))) (link ((href "http://racket-lang.org/") (rel "related") (title "Racket v5.1.1"))) (link ((href "http://blog.racket-lang.org/feeds/6203425329791139673/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=6203425329791139673") (rel "replies") (title "2 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/6203425329791139673") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/6203425329791139673") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/04/racket-v511.html") (rel "alternate") (title "Racket v5.1.1") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_lx1aK_XwT-o/SxSPoMzJgLI/AAAAAAAAAA8/v5ASXddGsSc/s32-R/eli-small.jpg") (width "28")))) (thr:total "2")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1248551246168499369") (published "2011-04-04T14:00:00.001-04:00") (updated "2012-06-24T21:45:38.999-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "macros"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "tutorials"))) (title ((type "text")) "Writing âsyntax-caseâ Macros") (post-content (p "Disclaimer: This is not really a tutorial on macros, it's more of a quick introduction to using Racket's " (code "syntax-case") "-based macros for people who are familiar with symbolic macros and miss their âsimplicityâ.  It's also not comprehensive or thorough or complete, it's just intended to provide a rough quick overview of how to write macros.  It was originally posted on comp.lang.scheme in a thread called âIdiot's guide to Scheme macrosâ, but I avoided that title here, since it's not a general purpose guide.  (Also, it's yet another attempt to dispel the irrational âmacrophobiaâ some people have when it gets to hygienic macros, leading them back to using " (code "defmacro") " with all its problems.)") (p "The main idea with Racket's macro system (and with other " (code "syntax-case") " systems) is that macros are syntax to syntax functions, just like the case of " (code "defmacro") ", except that instead of raw s-expressions you're dealing with syntax objects.  This becomes very noticeable when identifiers are handled: instead of dealing with plain symbols, you're dealing with these syntax values (called âidentifiersâ in this case) that are essentially a symbol and " (em "some opaque information") " that represents the lexical scope for its source.  In several " (code "syntax-case") " systems this is the only difference from " (code "defmacro") " macros, but in the Racket case this applies to everything â identifiers, numbers, other immediate constants, and even function applications, etc â they are all the same s-expression values that you're used to, except wrapped with additional information.  Another thing that is unique to Racket is the extra information: in addition to the opaque lexical context, there is also source information and arbitrary properties (there are also certificates, but that's ignorable for this text).") (p "With this in mind, explaining the rest is not too difficult:") (ul (li (code "(syntax-source stx)") ", " (code "(syntax-position stx)") ", " (code "(syntax-line stx)") ", " (code "(syntax-column stx)") " â retrieve parts of the source location information.") (li (code "(syntax-e stx)") " â takes a syntax value and returns the value it âwrapsâ.  For example, if " (code "stx") " is an identifier you'd get a symbol, and if it's a number you'd get the number.  If it's a simple parenthesized form, you'd get a list of syntax values for the subforms.  Note that the list can be improper, with the last element being a syntax object that contains a proper list.  (But the list will actually be improper if the original syntax was a dotted list.)") (li (code "(syntax-" ">" "datum stx)") " â takes a syntax value and returns the plain s-expression that it holds.  This is done by recursive uses of " (code "syntax-e") ".  (It would be a simple definition that does what you'd think it should do.)") (li (code "(syntax-" ">" "list stx)") " â sometimes you want to pull out the list of syntax values from a given parenthesized syntax, but " (code "syntax-e") " does too little (can still return an improper list) and " (code "syntax-" ">" "datum") " does too much (gives you back raw s-expressions).  " (code "syntax-" ">" "list") " is a utility function that uses " (code "syntax-e") " as many times as needed to get back a proper list of syntax values.  If that's not possible (if the input syntax was not a proper list), it returns " (code "#f") ", so it serves as a predicate too.") (li (code "(syntax-property stx prop)") " â returns the given property value from stx, if any, and " (code "#f") " if none.  For example, try" (blockquote (pre "(syntax-property #'[foo] 'paren-shape)")) "(The " (code "#'") " is similar to a quote, but for syntax values â I'll get to that later on.)") (li "Note that there is " (em "no") " accessor for the opaque lexical scope, and as you'll see next, you don't need one.") (li "To create a piece of syntax you use " (code "datum-" ">" "syntax") ", and you give it an s-expression which will be the âcontentsâ of the resulting syntax object.  (The input can contain syntax values, which are left as is.)  But when you do that you need to give it the other bits â including the lexical context thing, which you have no access to.  The way that's done is:" (blockquote (pre "(datum-" ">" "syntax context-stx input-sexpr)")) " This returns a syntax value that wraps the " (code "input-sexpr") " value, using the lexical scope from " (code "context-stx") ".  A common way to âbreak hygieneâ and create a binding that is visible to the macro user's code is:" (blockquote (pre "(datum-" ">" "syntax stx 'foo)")) "where " (code "stx") " is some syntax value that you get from the user input to the macro.  It returns a " (code "foo") " identifier that has the same lexical context information as " (code "stx") ", so it's as if it came from there." (br) "Note that there is actually another optional argument that specifies the source (either using another syntax object, or as an explicit list), and another for copying the properties from â so an alternative to the above would be:" (blockquote (pre "(datum-" ">" "syntax stx 'foo stx stx)")) "which also makes the source information and the properties be the same as those of " (code "stx") " (for example, this can matter in case of syntax errors ).") (li "There is also " (code "(quote-syntax blah)") " which creates a quoted syntax, with its lexical source from the place it appears.") (li "Finally, " (code "define-syntax") " does the magic of tying a name with a transformer function.")) (p "And that's almost everything that you need in order to write hygienic (and non-hygienic) macros.  Very inconveniently.") (p "For example, here's a simple " (code "while") " macro (use this in a file that starts with â" (code "#lang racket") "â):") (blockquote (pre "(define-syntax (while stx)\n  (define subs (syntax-" ">" "list stx))\n  (datum-" ">" "syntax\n   stx\n   `(let loop ()\n      (when ,(cadr subs)\n        ,@(cddr subs)\n        (loop)))\n   stx))")) (p "which breaks like this:") (blockquote (pre "(define x 2)\n(let ([let 5])\n  (while (" "<" " x 10)\n    (printf " "\"" "x = ~s\\n" "\"" " x)\n    (set! x (add1 x))))")) (p "The problem is that all of those quoted names are getting the context of the user input, which is not the right thing (it's close to a " (code "defmacro") ").  To fix this, you need to " (code "quote-syntax") " all of these identifiers, so they'll have the macro source instead of the input source:") (blockquote (pre "(define-syntax (while stx)\n  (define subs (syntax-" ">" "list stx))\n  (datum-" ">" "syntax\n   stx\n   `(,(quote-syntax let) ,(quote-syntax loop) ()\n     (,(quote-syntax when) ,(cadr subs)\n      ,@(cddr subs)\n      (,(quote-syntax loop))))\n   stx))")) (p "But that's clearly insane...  More than being tedious, it's still incorrect since all of those function application parens will have the user's lexical context (Racket has a special implicit " (code "#%app") " macro that gets used in all function applications, and in this case the context of this application will make it unhygienic).  Instead of doing this, a better approach would be to create the resulting syntax with the lexical context of the macro source by changing just that argument:") (blockquote (pre "(define-syntax (while stx)\n  (define subs (syntax-" ">" "list stx))\n  (datum-" ">" "syntax\n   (quote-syntax here)\n   `(let loop ()\n      (when ,(cadr subs)\n        ,@(cddr subs)\n        (loop)))\n   stx))")) (p "And that's simple again, and works fine now.") (p "The problem is that it's tedious wrt to deconstructing the input (which happens to be trivial in this case), and wrt slapping together an output value â and that's where " (code "syntax-case") " comes in.  It addresses the both by using pattern matching, where identifiers in patterns are bound as âsyntax patternsâ.  A new form is added â " (code "syntax") " â which is similar to a " (code "quote") ", except that (a) it actually quotes things similarly to " (code "quote-syntax") ", with the lexical context of the " (code "syntax") " form; and (b) pattern variables are substituted with what they matched.  With this, the above macro becomes much easier:") (blockquote (pre "(define-syntax (while stx)\n  (syntax-case stx ()\n    [(_ test body ...)\n     (syntax (let loop ()\n               (when test\n                 body ...\n                 (loop))))]))")) (p "The first line specifies that you want to match the " (code "stx") " input syntax, and that you have no âkeywordsâ (in the same sense as in " (code "syntax-rules") ").  The second line is the pattern that is matched against this input â with two pattern variables that match the second subexpression and the sequence of expressions from the third and on.  (The first subexpression is matched against " (code "_") " which is a wild-card that matches anything without binding a pattern variable â the head part is often not needed, since it's just the macro name.)  The last line is the output, specified using " (code "syntax") ", which means that it's very similar to the previous version where everything is given the lexical context of the macro and the two pattern variables are replaced with the two matches (so " (code "body") " gets spliced into the resulting syntax).") (p "Now, say that you want an unhygienic user-visible piece of syntax.  For example, bind the always entertaining " (code "it") " thing to the test result.  This:" (blockquote (pre "(define-syntax (while stx)\n  (syntax-case stx ()\n    [(_ test body ...)\n     (syntax (let loop ()\n               (let ([it test])\n                 (when it\n                   body ...\n                   (loop)))))]))")) "won't work because " (code "it") " has the macro source â it's hygienic and therefore not visible.  Instead, you need to use " (code "datum-" ">" "syntax") " with the user syntax:" (blockquote (pre "(define-syntax (while stx)\n  (syntax-case stx ()\n    [(_ test body ...)\n     (let ([it (datum-" ">" "syntax stx 'it)])\n       (syntax (let loop ()\n                 (let ([it test])\n                   (when it\n                     body ...\n                     (loop))))))]))")) "But this doesn't really work since " (code "it") " needs to be bound as a pattern variable rather than a plain binding.  " (code "syntax-case") " can be used here again: " (code "(syntax-case " "<" "name" ">" " () [foo " "<" "body" ">" "])") " will match " (code "foo") " against the " (code "<" "name" ">") " syntax, and if it's a name then it will be bound as a pattern variable in the " (code "<" "body" ">") "." (blockquote (pre "(define-syntax (while stx)\n  (syntax-case stx ()\n    [(_ test body ...)\n     (syntax-case (datum-" ">" "syntax stx 'it) ()\n       [it (syntax (let loop ()\n                     (let ([it test])\n                       (when it\n                         body ...\n                         (loop)))))])]))")) "Note that since " (code "it") " is a pattern variable, it doesn't need to be unquoted â " (code "syntax") " will do that.") (p "Finally, there are some more conveniences.  First, " (code "with-syntax") " is a macro that binds pattern variables (by a similar translation to " (code "syntax-case") "):" (blockquote (pre "(define-syntax (while stx)\n  (syntax-case stx ()\n    [(_ test body ...)\n     (with-syntax ([it (datum-" ">" "syntax stx 'it)])\n       (syntax (let loop ()\n                 (let ([it test])\n                   (when it\n                     body ...\n                     (loop))))))]))")) "and there's the " (code "#'") " reader macro for " (code "syntax") ":" (blockquote (pre "(define-syntax (while stx)\n  (syntax-case stx ()\n    [(_ test body ...)\n     (with-syntax ([it (datum-" ">" "syntax stx 'it)])\n       #'(let loop ()\n           (let ([it test])\n             (when it\n               body ...\n               (loop)))))]))")) "and there are also " (code "#`") " and " (code "#,") " and " (code "#,@") " which are implemented by translating them to uses of " (code "with-syntax") ".") (p "Note that the last example uses the lexical context of the whole form for the new identifier, but that's not only the option.  You could use any other part of the macro input â for example, you could use the macro keyword:" (blockquote (pre "(define-syntax (while stx)\n  (syntax-case stx ()\n    [(hd test body ...) ; need the head now\n     (with-syntax ([it (datum-" ">" "syntax #'hd 'it)])\n       ... same ...)]))")) "or the test expression (use " (code "#'test") ").  Each of these choices has subtle differences that are especially important when you're composing macros (for example, using a second macro that " (em "expands") " to a " (code "while") ", where the test expression comes from that macro rather than the user code).  Demonstrating these things is a popular way to pass the time in some circles, but I'll avoid it here.  In fact, a great way to avoid this whole thing altogether is not create unhygienic bindings in the first place.  It sounds like doing so excludes cases where you " (em "really") " want to have a new binding visible in user code, but racket provides âsyntax parametersâ that can be used more conveniently (and less confusingly) â see " (a ((href "http://blog.racket-lang.org/2008/02/dirty-looking-hygiene.html")) "an earlier post") " for a description of that.  As a side note, these options are a good hint that a hygienic macro system is more expressive than a symbolic " (code "defmacro") " system, where no such choices exist.  Creating such macros using " (code "defmacro") " can appear easier simply because of this lack of choice â in the same way that CPP-style string-based macros are âsimplerâ than " (code "defmacro") " since they're less expressive (just appending lexical tokens, no structural information).") (p "There are other important aspects of the Racket macro system that are not covered here.  The most obvious of them is worth mentioning here: Racket separates the âruntime phaseâ from the âsyntax phaseâ.  For example, if you want to try these examples with â" (code "#lang racket/base") "â, you'll need to add " (code "(require (for-syntax racket/base))") " since the " (code "racket/base") " language doesn't have a full language in its syntax phase.") (p "Roughly speaking, this makes sure that source code is deterministically compilable by having each level live in its own world, limiting macros to deal only with the input syntax only and not runtime values.  (For example, a CLOS implementation in this system cannot check the value of an identifier bound to a class to determine how some macro should expand.)  This results in reliable compilations that do not depend on how things were loaded, or whatever happened on the REPL.") (p "The important bottom line here is that you get to write macros with the full language available â and phase separation means that Racket is explicitly designed to make running code at the macro level and using it by the compiler as robust as possible, so you don't have to worry about using any complex system as part of your macro.  You just need to keep in mind that the macro world is completely separate from the runtime, and the direct benefit of not worrying about weird interactions with compilation and file loading orders.")) (link ((href "http://blog.racket-lang.org/feeds/1248551246168499369/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=1248551246168499369") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1248551246168499369") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1248551246168499369") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/04/writing-syntax-case-macros.html") (rel "alternate") (title "Writing âsyntax-caseâ Macros") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_lx1aK_XwT-o/SxSPoMzJgLI/AAAAAAAAAA8/v5ASXddGsSc/s32-R/eli-small.jpg") (width "28")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2251597477702098360") (published "2011-03-19T10:58:00.001-04:00") (updated "2012-06-24T22:07:23.101-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "macros"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "tutorials"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "modules"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "pldi"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "academic"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "papers"))) (title ((type "text")) "Languages as Libraries, PLDI 2011") (post-content (p "We've just finished up the " (a ((href "http://bit.ly/langlib")) "final version") " of our " (a ((href "http://pldi11.cs.utah.edu/")) "PLDI 2011") " paper on language extension in Racket.  The paper describes how the module system and the syntax system work together to support new languages with new static semantics, such as Typed Racket.  Here's the abstract:") (blockquote (p "Programming language design benefits from constructs for extending the syntax and semantics of a host language.  While C's string-based macros empower programmers to introduce notational shorthands, the parser-level macros of Lisp encourage experimentation with domain-specific languages.  The Scheme programming language improves on Lisp with macros that respect lexical scope.") (p "The design of Racketâa descendant of Schemeâgoes even further with the introduction of a full-fledged interface to the static semantics of the language.  A Racket extension programmer can thus add constructs that are indistinguishable from ânativeâ notation, large and complex embedded domain-specific languages, and even optimizing transformations for the compiler backend.  This power to experiment with language design has been used to create a series of sub-languages for programming with first-class classes and modules, numerous languages for implementing the Racket system, and the creation of a complete and fully integrated typed sister language to Racket's untyped base language.") (p "This paper explains Racket's language extension API via an implementation of a small typed sister language.  The new language provides a rich type system that accommodates the idioms of untyped Racket. Furthermore, modules in this typed language can safely exchange values with untyped modules.  Last but not least, the implementation includes a type-based optimizer that achieves promising speedups.  Although these extensions are complex, their Racket implementation is just a library, like any other library, requiring no changes to the Racket implementation.")) (p "To learn how to implement your own new language in Racket, start with " (a ((href "http://docs.racket-lang.org/guide/languages.html")) "this documentation") ".")) (link ((href "http://blog.racket-lang.org/feeds/2251597477702098360/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=2251597477702098360") (rel "replies") (title "3 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2251597477702098360") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2251597477702098360") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/03/languages-as-libraries-pldi-2011.html") (rel "alternate") (title "Languages as Libraries, PLDI 2011") (type "text/html"))) (author (name "Sam Tobin-Hochstadt") (uri "https://www.blogger.com/profile/12049111326816937908") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "3")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2611063075276519104") (published "2011-02-14T22:52:00.000-05:00") (updated "2011-11-09T22:50:37.942-05:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "release"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Racket v5.1") (post-content "Racket version 5.1 is now available from" (pre "  " (a ((href "http://racket-lang.org/")) "http://racket-lang.org/")) (p "The most significant change in version 5.1 is a " (a ((href "http://blog.racket-lang.org/2010/12/racket-version-5.html")) "rewrite of the GUI library") ".  Unix/X users will see the biggest difference with this change, because DrRacket and all Racket GUI programs now take on the desktop theme for menus, buttons, and other GUI widgets.") (p "In the long run, Racket GUI programs on all platforms will improve as a result of the library rewrite.  In the short run, beware that this first release of a new library will inevitably include a new set of bugs.") (p "Version 5.1 changes in more detail:") (ul (li "The " (tt "racket/draw") " library" mdash "which implements the drawing half the GUI toolkit" mdash "can be used independent of the " (tt "racket/gui/base") " library and without a graphics display (e.g., without an X11 connection)." (br "The new library has one small incompatibility with the old GUI toolbox: 'xor drawing is no longer supported.  The new library has many additional features: rotation and general affine transformations, PDF and SVG drawing contexts, gradients, and alpha-channel bitmaps.")) (li "The GRacket executable is no longer strictly necessary for running GUI programs, because the " (tt "racket/gui/base") " library can be used from Racket.  To the degree that a platform distinguishes GUI and console applications, however, the GRacket executable still offers some additional GUI-specific functionality (e.g., single-instance support)." (br "The new " (tt "racket/gui/base") " library includes small incompatibilities with the old GUI toolbox: the " (tt "send-event") ", " (tt "current-ps-afm-file-paths") ", and " (tt "current-ps-cmap-file-paths") " functions have been removed.  The " (tt "racket/gui/base") " library re-exports " (tt "racket/draw") ", so it includes the same drawing functionality as before (except for 'xor drawing).")) (li "The new " (tt "racket/snip") " library can be used independently of " (tt "racket/gui/base") " to work with graphical editor content (e.g., images in student programs).  Like " (tt "racket/draw") ", the " (tt "racket/snip") " library is re-exported by " (tt "racket/gui/base") ".") (li "The Web Server includes a backwards incompatible change that prevents X-expressions and lists of bytes from being directly returned from servlets.  This change will increase performance for those types of responses and allow easier experimentation with response types.  Please see \"" (tt "collects/web-server/compat/0/README") "\" in the installation to learn about porting your servlets forward. Don't worry.  It's easy.") (li "The new " (tt "raco demodularize") " tool collapses a module's dependencies into a single module comprising the whole program.  This transformation currently provides no performance improvement, but is the basis for cross-module optimization and dead-code elimination tools to come.  The transformation is currently useful for static analysis of whole Racket programs.") (li "The picturing-programs teachpack, formerly installed via PLaneT, is now bundled with the standard distribution.  Use the teachpack with " (tt "(require picturing-programs)") " instead of " (tt "(require installed-teachpacks/picturing-programs)") ".  The old PLaneT-based installation procedure still works, but it now merely installs a stub that invokes the bundled version.") (li "Slideshow picts, " (tt "racket/draw") " bitmaps, and images created with " (tt "2htdp/image") " can now be used directly in Scribble documents.  More generally, the new " (tt "file/convertible") " protocol enables any value that is convertible to a PNG and/or PDF stream to be used as an image in a Scribble document.") (li "The Same game sports a new look and an improved scoring system.  (The current known high score is 12,429; can you beat that?)"))) (link ((href "http://racket-lang.org/") (rel "related") (title "Racket v5.1"))) (link ((href "http://blog.racket-lang.org/feeds/2611063075276519104/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=2611063075276519104") (rel "replies") (title "4 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2611063075276519104") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2611063075276519104") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/02/racket-v51.html") (rel "alternate") (title "Racket v5.1") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_lx1aK_XwT-o/SxSPoMzJgLI/AAAAAAAAAA8/v5ASXddGsSc/s32-R/eli-small.jpg") (width "28")))) (thr:total "4")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-149573500831144101") (published "2010-12-08T10:59:00.005-05:00") (updated "2012-06-24T21:48:08.310-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "code-stats"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "gui"))) (title ((type "text")) "Rebuilding Racketâs Graphics Layer") (post-content (p "Racket version 5.1, which is scheduled for release in early February, will look a little different on the outside. Unix/X users will see the biggest difference: DrRacket and all Racket GUI programs will take on the desktop theme for menus, buttons, and other GUI widgets. Text handling is also better than before on Unix/X, especially when printing. Windows and Mac OS X users will see smaller changes, such as better printing, better handling of mouse-wheel events, and support for 64-bit Windows and Mac OS X.") "\n\n\n" (p "On the inside, version 5.1 is the biggest single change in Racket (or PLT Scheme) history. Weâve reimplemented the GUI layer, which meant throwing out about 200,000 lines of C++ code that built on Xt, Win32, and Carbon. Weâve replaced that C++ code with about 30,000 lines of Racket code that builds on Gtk, Win32, Cocoa, Cairo, and Pango. This change modernizes Racket's graphics support while significantly reducing the cost of maintaining the GUI and drawing libraries.") "\n\n\n" (p "\nIn the space between the GUI implementation and the surface, there are many API improvements:") "\n\n" (ul (li " You can run GUI programs with just " (tt "racket") ", instead of having to use " (tt "gracket") ". Depending on how much your platform distinguishes between GUI and console applications, there may still be an advantage to using " (tt "gracket") " (i.e., to tell the OS that you mean to start a GUI application or that you want a single instance of the application), but the difference is minor.") "\n" (li "  Most of the drawing library has moved to " (tt "racket/draw") ", which you can use without the rest of the GUI library â and, in the case of Unix platforms, without an X-server connection. After detangling the graphics and GUIs libraries, the graphics library is now integrated in more places, such as adding pict support for Scribble documents. ") "\n" (li " The drawing library includes some new capabilities, such as rotation, affine transformations, and bitmaps with alpha channels.")) "\n\n" (p "Replacing hundreds of thousands of lines of C++ code with tens of thousands of lines of Racket code sounds like a no-brainer. The old library was implemented in C++ because we started in 1995 by gluing together a Scheme interpreter with a portable GUI library. Then the GUI code stayed in C++, because the interpreter wasnât fast enough and the foreign interface was too clumsy. Racket is now plenty fast and its foreign interface has improved a lot since then.") "\n\n" (p "Still, the reimplementation took about 18 months. Smoothly integrating cross-platform GUI support with a programming language can be more difficult than it sounds, and mating new libraries with a legacy API creates additional challenges. Finally, many Racket tools depend Racketâs âeventspaces,â which are multiple process-like entities in the same virtual machine, each with its own GUI event loop. Implementing eventspaces on top of modern GUI toolkits turns out to be tricky, because the toolkits insist on a single event-loop per process and they cannot tolerate event-loop actions during certain callbacks. Fortunately, delimited continuations can help work around those limitations.") "\n\n\n" (p "Cairo and Pango are the two big enablers of the Racket graphics rewrite. The old Racket graphics library depended on many toolkits (X11, Win32, QuickDraw, Quartz, PostScript, and more), and it had poor font handling. Again, the problem was that we chose the previous technology in 1995. Cairo and Pango have since solved the portable-graphics problem, and we were able to trade in 80,000 lines of C++ glue for about 8,000 lines of Racket glue. The code could be much less if we didnât have to match most of the old drawing API, but we're still very happy with the result.") "\n\n\n" (p "On the GUI side, the remaining 22,000 lines of Racket code replace similar C++ code that binds to three different toolkits. The set of underlying toolkits has changed, and a few eventspace tricks are new, but the approach is essentially the same as before. The code is nevertheless much more compact, because (no surprise) Racket is better than C++. Interestingly, the amount of toolkit-specific code is right around 6,500 lines for each toolkit, even though the way that a C programmer uses the different toolkits seems very different: Objective-C classes (Cocoa) versus signal callbacks with explicit wiring (Gtk) versus a single callback function for message handling (Win32). Maybe they're the same because we built a Racket mini-language for each toolkit that makes them all about equally convenient.") "\n\n\n" (p "The rewrite is not perfectly compatible with old code, and no doubt we have many bugs to find before the release. The process is well on track, though, and the new library implementations give a us a solid foundation to keep making Racket better.") "\n\n\n" (p "\nTo try out the current development version, visit") "\n\n" (div ((style "text-align: center;")) (a ((href "http://pre.racket-lang.org/installers")) "http://pre.racket-lang.org/installers\n"))) (link ((href "http://blog.racket-lang.org/feeds/149573500831144101/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=149573500831144101") (rel "replies") (title "13 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/149573500831144101") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/149573500831144101") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/12/racket-version-5.html") (rel "alternate") (title "Rebuilding Racketâs Graphics Layer") (type "text/html"))) (author (name "Matthew Flatt") (uri "https://www.blogger.com/profile/03369511886823036667") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "13")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6894296804689956913") (published "2010-11-07T01:33:00.000-04:00") (updated "2011-11-09T22:50:37.959-05:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "release"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Racket v5.0.2") (post-content "Racket version 5.0.2 is now available from" (pre "  " (a ((href "http://racket-lang.org/")) "http://racket-lang.org/")) (ul (li "Typed Racket's optimizer is now turned on by default; error messages have been simplified and clarified.") (li "Contracts: contracts on mutable containers allow functions or other higher order values, and contracts are checked when updating or dereferencing the containers.  The new contracts are slower than the old ones, so the old check-once functionality is still available." (br "A new dependent function contract combinator, " (tt "->i") ", properly assigns blame for contracts that violate themselves and the generated wrappers are more efficient than " (tt "->d") ".  (Although it does more checking so your contracts may be faster or slower)." (br "See the docs for " (tt "box/c") ", " (tt "hash/c") ", " (tt "vector/c") ", " (tt "vectorof") " and " (tt "->i") " for more details."))) (li "The " (tt "when") ", " (tt "unless") ", " (tt "cond") ", " (tt "case") ", and " (tt "match") " forms (in " (tt "racket/base") " and derived languages) now allow immediate internal definitions.") (li "Web server: the formlets library provides more HTML form elements; " (tt "make-xexpr-response") " supports a preamble for DTD declarations; " (tt "serve/servlet") " supports stateless servlets.") (li "New WebSocket implementation, see " (tt "net/websocket") " for details.") (li "The new " (tt "data") " collection contains implementations of several data structures, including growable vectors and order-based dictionaries.") (li (tt "racket/match") " is now significantly faster.") (li "The Racket documentations are built in parallel by default.") (li "The stepper is now compatible with programs using the Universe teachpack.") (li (tt "2htdp/image") ": pinholes are now supported in the library (if you don't use pinhole primitives you will not see them); a number of new triangle functions added; supports conversion of images to color lists and back.  Also, cropping has been improved for scenes; see the documentation section on the nitty-gritty of pixels for details.") (li "Signatures have been moved to ASL, BSL, BSL+, ISL, and ISL+ (HtDP teaching languages) no longer support checked signatures.") (li "Student languages: one-armed " (tt "check-error") " in all levels; ASL is extended with hash operations, and " (tt "define-datatype") ".") (li "DMdA languages: Checking for parametric signatures is now eager.  This catches errors earlier, but retains the asymptotic complexity properties; signatures for record types now have generators; " (tt "list-of") " and " (tt "any") " signatures are now provided."))) (link ((href "http://racket-lang.org/") (rel "related") (title "Racket v5.0.2"))) (link ((href "http://blog.racket-lang.org/feeds/6894296804689956913/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=6894296804689956913") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/6894296804689956913") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/6894296804689956913") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/11/racket-v502.html") (rel "alternate") (title "Racket v5.0.2") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_lx1aK_XwT-o/SxSPoMzJgLI/AAAAAAAAAA8/v5ASXddGsSc/s32-R/eli-small.jpg") (width "28")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1382320702984482359") (published "2010-10-03T00:57:00.000-04:00") (updated "2012-06-24T21:48:19.266-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "academic"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "papers"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "oopsla"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "web-server"))) (title ((type "text")) "The Two-State Solution: Native and Serializable Continuations Accord") (post-content (p "The Racket Web Server allows an expressive way of writing Web applications using first-class continuations to capture the control-flow of the server while it is waiting for the client to respond. For example:") "\n" (pre "\n#lang web-server/insta\n(define (get-number p)\n  (string->number\n   (extract-binding/single\n    'num\n    (request-bindings\n     (send/suspend\n      (Î» (k-url)\n        `(html \n          (body\n           (form ([action ,k-url])\n                 ,p nbsp (input ([name \"num\"]))\n                 (input ([type \"submit\"])))))))))))\n(define (start req)\n  (define how-many\n    (get-number \"How many numbers to add?\"))\n  (number->string\n   (foldr \n    + 0\n    (build-list \n     how-many\n     (Î» (i)\n       (get-number \n        (format \"Provide number: ~a\" \n                (add1 i))))))))\n") "\n\n" (p "This application creates a re-usable " (code "get-number") " interaction abstraction and uses it in a number of different contexts. In particular, it uses it in the higher-order context of " (code "build-list") ". This application also reuses useful third-party library functions like " (code "foldr") ", etc.") "\n\n" (p "Such an application would be complicated to write in a traditional Web programming environment because the continuation of each " (code "get-number") " invocation is considerably more complex than is typical. Yet, the first-class continuations in Racket ensure that this continuation is captured exactly, correctly, every time.") "\n\n" (p "Unfortunately, the native first-class continuations of Racket are not serializable, so they impose a per-session resource expenditure on the server. This can be alleviated through " (a ((href "http://docs.racket-lang.org/web-server/servlet.html#(part._managers)")) "expiration policies") ", but such policies are inherently unsound because continuations URLs are global roots.") "\n\n" (p "In the past, PLT has " (a ((href "http://cs.brown.edu/~sk/Publications/Papers/Published/mfgkf-web-restructuring-cps-journal/")) "provided tools") " that automatically restructure this kind of program into one that uses serializable continuations through an acronym soup of source transformations: CPS, lambda-lifting, defunctionalization, SPS, and so on. These tools effectively create automatically what most Web programmers write manually, except the tools don't mistakes.  But the tools also don't take into consideration what functions actually contribute to the interaction context and transform library functions like " (code "foldr") " (which is unnecessary in the continuation) the same as functions like " (code "build-list") " (which " (em "are") " necessary.)") "\n\n" (p "Our " (a ((href "http://faculty.cs.byu.edu/~jay/static/icfp065-mccarthy.pdf")) "past work") " (based on " (a ((href "http://cs.brown.edu/~sk/Publications/Papers/Published/pcmkf-cont-from-gen-stack-insp/")) "another PLT paper") ") alleviates this problem by only requiring functions like " (code "build-list") " to be transformed. From the perspective of a programmer, \"transformed\" is tantamount to \"rewritten\" because the source code for a third-party library may not be readily available. Programmers would have to program " (code "add-many-numbers.com") " as:") "\n" (pre "\n#lang web-server\n(require web-server/servlet-env)\n(define (get-number p)\n  (string->number\n   (extract-binding/single\n    'num\n    (request-bindings\n     (send/suspend\n      (Î» (k-url)\n        `(html \n          (body\n           (form ([action ,k-url])\n                 ,p nbsp (input ([name \"num\"]))\n                 (input ([type \"submit\"])))))))))))\n(define (build-list n f)\n  (for/list ([i (in-range n)])\n    (f i)))\n(define (start req)\n  (define how-many\n    (get-number \"How many numbers to add?\"))\n  (number->string\n   (foldr \n    + 0\n    (build-list\n     how-many\n     (Î» (i)\n       (get-number \n        (format \"Provide number: ~a\"\n                (add1 i))))))))\n; This requires a pre-release version\n; to run in an un-named DrRacket buffer\n(serve/servlet start #:stateless? #t)\n") "\n" (p "where " (code "build-list") " has been re-implemented, but functions like " (code "foldr") " have not. This application, despite its striking similarity to the first, requires absolutely no per-session server state, so it is considerably more scalable.") "\n\n" (p "Do we need to re-implement " (code "build-list") "? What if the third-party, higher-order function (" (code "build-list") ") that we use with a higher-order argument that causes Web interaction (" (code "get-number") ") is too complicated to re-implement?") "\n \n" (p "Naturally this blog post would not exist if we didn't solve this problem.") "\n\n" (p "Our new approach, dubbed " (cite "The Two-State Solution") ", allows the programmer to transparently use a very small amount of per-session server state to store " (em "just") " the part of the continuation inside functions like " (code "build-list") " while serializing everything else to the client.") "\n\n" (p "The key is to use " (a ((href "http://docs.racket-lang.org/reference/eval-model.html#(part._prompt-model)")) "delimited, composable continuations") " to isolate the appropriate part of the continuation. The programmer designates this piece of the continuation through the " (code "serial->native") " and " (code "native->serial") " annotations. The programmer can write the application as:") "\n" (pre "\n#lang web-server\n(require web-server/servlet-env)\n(define (get-number p)\n  (string->number\n   (extract-binding/single\n    'num\n    (request-bindings\n     (send/suspend\n      (Î» (k-url)\n        `(html \n          (body\n           (form ([action ,k-url])\n                 ,p nbsp (input ([name \"num\"]))\n                 (input ([type \"submit\"])))))))))))\n(define (start req)\n  (define how-many\n    (get-number \"How many numbers to add?\"))\n  (number->string\n   (foldr \n    + 0\n    (serial->native\n     (build-list\n      how-many\n      (Î» (i)\n        (native->serial\n         (get-number \n          (format \"Provide number: ~a\"\n                  (add1 i))))))))))\n; This requires a pre-release version\n; to run in an un-named DrRacket buffer\n(serve/servlet start #:stateless? #t)\n") "\n" (p "The important distinction here is that both the " (code "build-list") " and the " (code "get-number") " abstractions do not need to change. We simply mark the context as being a \"serial\" or \"native\" context through the annotation forms. This re-written version will be more scalable than a purely native version, but represents an easier to achieve step in the evolution of a program, because third-party, higher-order functions can be used as is.") "\n\n" (p "This work will be presented at " (a ((href "http://splashcon.org/index.php?option=com_content&amp;view=article&amp;id=122&amp;Itemid=91")) "OOPSLA 2010") ". It is also described in a paper with same name this blog post:" nbsp (a ((href "http://faculty.cs.byu.edu/~jay/static/oopsla026-mccarthy.pdf")) "The Two-State Solution: Native and Serializable Continuations Accord") ".")) (link ((href "http://faculty.cs.byu.edu/~jay/static/oopsla026-mccarthy.pdf") (rel "related") (title "The Two-State Solution: Native and Serializable Continuations Accord"))) (link ((href "http://blog.racket-lang.org/feeds/1382320702984482359/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=1382320702984482359") (rel "replies") (title "1 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1382320702984482359") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1382320702984482359") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/10/two-state-solution-native-and.html") (rel "alternate") (title "The Two-State Solution: Native and Serializable Continuations Accord") (type "text/html"))) (author (name "Jay McCarthy") (uri "https://plus.google.com/101670206687664104937") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh3.googleusercontent.com/-13KUDv8LhZw/AAAAAAAAAAI/AAAAAAAAAAA/7MdiB5POU5k/s32-c/photo.jpg") (width "32")))) (thr:total "1")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3502770032653104859") (published "2010-09-15T15:34:00.001-04:00") (updated "2012-06-24T22:23:35.332-04:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "new-feature"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "macros"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "typed-racket"))) (title ((type "text")) "Extending Typed Racket, Part 1") (post-content "The Typed Racket team is pleased to announce a number of new additions\nto our system.   We'll be writing a few blog posts about them, all of\nwhich you can read here.\n" (br) "\nThis post begins with the core of the Typed Racket type system.\nThe fundamental idea at the heart of Typed Racket is called " (i "occurrence\ntyping") ".  This is the technique that allows us to typecheck\nexisting Racket programs without requiring rewrites.  Here's a simple\nexample:\n" (br) "\n" (pre "(if (number? x) (add1 x) 0)\n") "\n\nThe typechecker can figure out from the use of " (code "number?") "\nthat the second " (i "occurrence") " of " (code "x") " is always going to be a\nnumber.  This simple form of occurrence typing is enough to take Typed\nRacket a long way.  But because we want to be able to handle all the\nsophisticated reasoning that programmers are already using to write\ntheir Racket programs, we have been working on extending the system\nfurther." (br) " \nThe new design of our system is described in a paper, " (a ((href "http://www.ccs.neu.edu/scheme/pubs/#icfp10-thf")) "Logical Types for Untyped Languages") ", in\nthe upcoming International Conference on Functional Programming.  The\nintroduction provides an overview that's acessible to any Racket\nprogrammer, but here's the key example:\n" (br) "\n" (pre "(cond\n  [(and (number? x) (string? y)) â 1 â]\n  [(number? x)                   â 2 â]\n  [else                          â 3 â])\n") "\n\nIn expression 1, we know that " (code "x") " is a number and\n" (code "y") " is a string.  In 2, we know that " (code "x") " is a\nnumber and " (code "y") " is " (emph "not") " a string, by the logical\nproperties of " (code "and") " and " (code "cond") ".  This form of\nlogical reasoning is enabled by the new foundation of the system, and\nmakes the entire system significantly more expressive.  \n" (br) "\nAll of these improvements are available in the current version of\nRacket.") (link ((href "http://blog.racket-lang.org/feeds/3502770032653104859/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=3502770032653104859") (rel "replies") (title "1 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/3502770032653104859") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/3502770032653104859") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/09/extending-typed-racket-part-1.html") (rel "alternate") (title "Extending Typed Racket, Part 1") (type "text/html"))) (author (name "Sam Tobin-Hochstadt") (uri "https://www.blogger.com/profile/12049111326816937908") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "1")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6909673633196173269") (published "2010-08-03T22:36:00.000-04:00") (updated "2011-11-09T22:50:37.963-05:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "release"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Racket v5.0.1") (post-content "Racket version 5.0.1 is now available from" (pre "  " (a ((href "http://racket-lang.org/")) "http://racket-lang.org/")) (ul (li "Datalog is a lightweight deductive database system with Racket integration.  It is now available in the " (tt "datalog") " collection and with " (tt "#lang datalog") ".") (li "Racklog provides Prolog-style logic programming in Racket, adapted from Dorai Sitaram's Schelog package.  It is available in the " (tt "racklog") " collection and now as " (tt "#lang racklog") ".") (li "By default " (tt "make install") " and " (tt "raco setup") " compile collections in parallel on all available processors.  (Use " (tt "raco setup -j 1") " to disable, if necessary.)") (li "Changes (as part of 5.0) in the " (tt "racket") " language compared to the " (tt "scheme") " language: constructor-style printing, a " (tt "struct") " alternative to " (tt "define-struct") " that fits more naturally with " (tt "match") " and constructor-style printing, bytecode-dependency management via SHA-1 hashes instead of just timestamps (where the " (tt "openssl/sha1") " library provides the SHA-1 hash function), a reorganization of " (tt "scheme/foreign") " into " (tt "ffi/unsafe") " and associated libraries, and new printing functions " (tt "eprintf") " and " (tt "displayln") ".  Also, a generator from " (tt "racket/generator") " is required to have the form " (tt "(generator () body ...)") ", which supports a planned extension to let a generator accept arguments.") (li "Changes to the " (tt "racket") " language (since 5.0): internal-definition positions allow mixing expressions with definitions, full continuations can escape past a continuation barrier, custodians can attempt to terminate subprocesses and subprocess groups (see " (tt "current-subprocess-custodian-mode") ", " (tt "subprocess-group-enabled") "), the JIT supports additional unboxing flonum operations and unsafe variants, " (tt "ffi/unsafe") " provides an asychronous-call mechanism to deal with foreign threads, a new \".\" modifier for format string directives (e.g., \"~.s\" and \"~.a\") limits the respective output to " (tt "(error-print-width)") " characters.") (li "The core type system of Typed Racket has been substantially revised.  In particular, Typed Racket can now follow significantly more sophisticated reasoning about the relationships between predicates.  Additionally, Typed Racket now allows variable arity types in more places, allowing programmers to specify variable-arity lists.") (li "We are working on an optimizing version of Typed Racket that takes advantage of type information for certain classes of programs. This project is a work in progress.  For those interested, see the documentation for " (tt "#:optimized") ".") (li "The " (tt "web-server/formlets") " library adds a " (tt "formlet*") " form that allows dynamic formlet construction, as opposed to " (tt "formlet") " which requires syntactic Xexprs and static formlets.  Several new library formlets are added.") (li "The " (tt "syntax/parse") " library has new support for matching literals at different phases using the " (tt "#:phase") " argument for literals and literal sets.") (li "RackUnit now includes a GUI test runner as " (tt "rackunit/gui") ".") (li "The " (tt "2htdp/image") " library now includes " (tt "flip-vertical") " and " (tt "flip-horizontal") " operations that mirror images (vertically and horizontally)."))) (link ((href "http://racket-lang.org/") (rel "related") (title "Racket v5.0.1"))) (link ((href "http://blog.racket-lang.org/feeds/6909673633196173269/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=6909673633196173269") (rel "replies") (title "2 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/6909673633196173269") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/6909673633196173269") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/08/racket-v501.html") (rel "alternate") (title "Racket v5.0.1") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_lx1aK_XwT-o/SxSPoMzJgLI/AAAAAAAAAA8/v5ASXddGsSc/s32-R/eli-small.jpg") (width "28")))) (thr:total "2")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8429284126611343134") (published "2010-06-07T14:50:00.004-04:00") (updated "2011-11-09T22:50:37.970-05:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "release"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Racket") (post-content "PLT is happy to announce the release of Racket, available from\n" (pre "  " (a ((href "http://racket-lang.org/")) (tt "http://racket-lang.org/"))) "\n" (p "With Racket, you can script command shells and web servers; you can quickly prototype animations and complex GUIs; regexps and threads are here to serve you.  To organize your systems, you can mix and match classes, modules or components.  Best of all, you start without writing down types.  If you later wish to turn your script into a program, equip your Racket modules with explicit type declarations as you wish.  And Racket doesn't just come as a typed variant; you can also write your modules in a purely functional and lazy dialect.") "\n" (p "Racket comes in so many flavors because Racket is much more than a standard scripting language or a plain programming language.  Racket supports language extensibility to an unequaled degree.  A Racket programmer knows that making up a new language is as easy as writing a new library.") "\n" (p "To help you start quickly, Racket includes batteries in all shapes and sizes, most importantly, extensive documentation and all kinds of libraries.") "\n" (p "Racket occupies a unique position between research and practice.  It inherits many major ideas from language research, among them type safety (when the type system says that x is a number, then at runtime it always is a number) and memory safety (when some memory is reclaimed by the garbage collector it is impossible to still have a reference to it).  At the same time, user demand governs rigid adherence to purely theoretical principles.") "\n" (p "Racket, formerly PLT Scheme, is a product of over 15 years of development.  Although Racket starts with a mature software base and an established user community, its new name reflects our view that this is just the beginning of Racket's evolution.")) (link ((href "http://racket-lang.org/") (rel "related") (title "Racket"))) (link ((href "http://blog.racket-lang.org/feeds/8429284126611343134/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=8429284126611343134") (rel "replies") (title "6 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/8429284126611343134") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/8429284126611343134") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/06/plt-is-happy-to-announce-release-of.html") (rel "alternate") (title "Racket") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_lx1aK_XwT-o/SxSPoMzJgLI/AAAAAAAAAA8/v5ASXddGsSc/s32-R/eli-small.jpg") (width "28")))) (thr:total "6")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2610566504959049790") (published "2010-04-02T21:51:00.001-04:00") (updated "2011-11-09T22:50:37.937-05:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "release"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "PLT Scheme v4.2.5") (post-content "PLT Scheme version 4.2.5 is now available from" (pre "  " (a ((href "http://plt-scheme.org/")) (tt "http://plt-scheme.org/"))) "\n" (ul (li "PLT now supports multi-core parallelism via futures.  Futures create tasks that run in parallel, as long as the tasks stay in the \"fast path\" of the runtime system.  For more information, see " (a ((href "http://docs.plt-scheme.org/guide/performance.html?q=future#%28part._effective-futures%29")) "the guide") ".") (li "Our unit testing framework, schemeunit, is now included in the distribution.  A graphical test runner is available via " (tt "schemeunit/gui") ".") (li "The support languages for the \"Programming Languages: Application and Interpretation\" textbook by Shriram Krishnamurthi are now part of PLT Scheme.  In addition the PLAI GC language comes with a random mutator generator (to help test collectors) and an improved heap visualizer.") (li "New Russian and Ukranian translations, thanks to Sergey Semerikov.") (li "A number of improvements to Redex's typesetting facilities.") (li "Typed Scheme users can now automatically generate predicates from types with " (tt "define-predicate") ".  Typed code can be inserted in untyped modules by requiring " (tt "with-type") " from " (tt "typed/scheme") ".") (li "The " (tt "scheme/class") " library now provides contract combinators for classes (" (tt "class/c") ") and objects (" (tt "object/c") ").  See the Reference and Guide for details.  Also, a backwards-compatible " (tt "object-contract") " version of " (tt "object/c") " has replaced the old " (tt "object-contract") " combinator.") (li "Writing new kinds of contracts is now easier with keyword-based constructors (" (tt "make-contract") " and " (tt "make-flat-contract") "), a simpler set of structure properties (" (tt "prop:contract") " and " (tt "prop:flat-contract") "), and the introduction of blame objects for tracking contract metadata.") (li "The Scheme-implemented bytecode reader fails less often.  This is used by \"mzc --decompile\".  The Scheme-implemented bytecode writer uses the compact bytecode format and fails less often.  This may be used in the future for Scheme-implement bytecode processors.") (li "The language dialog now suggests using \"#lang\" more strongly as the default language.  DrScheme no longer uses the term `Module language'."))) (link ((href "http://plt-scheme.org/") (rel "related") (title "PLT Scheme v4.2.5"))) (link ((href "http://blog.racket-lang.org/feeds/2610566504959049790/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=2610566504959049790") (rel "replies") (title "1 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2610566504959049790") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2610566504959049790") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/04/plt-scheme-v425.html") (rel "alternate") (title "PLT Scheme v4.2.5") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_lx1aK_XwT-o/SxSPoMzJgLI/AAAAAAAAAA8/v5ASXddGsSc/s32-R/eli-small.jpg") (width "28")))) (thr:total "1")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3811154831217235895") (published "2010-03-08T11:35:00.006-05:00") (updated "2012-06-24T21:49:44.553-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "code-stats"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "modules"))) (title ((type "text")) "Talk at Flourish") (post-content (a ((href "http://3.bp.blogspot.com/_gJUvnpacURg/S5UwRCtLiDI/AAAAAAAAAI0/9mdGDzmDD7k/s1600-h/langs.png") (onblur "try {parent.deselectBloggerImageGracefully();} catch(e) {}")) (img ((alt "") (border "0") (id "BLOGGER_PHOTO_ID_5446312393716762674") (src "http://3.bp.blogspot.com/_gJUvnpacURg/S5UwRCtLiDI/AAAAAAAAAI0/9mdGDzmDD7k/s400/langs.png") (style "float: right; margin: 0pt 0pt 10px 10px; cursor: pointer; width: 316px; height: 233px;")))) "\n" (p "\nThe image in this post shows a tree where the interior nodes represent directories and the leaf nodes represent files in the PLT source code. The leaves are colored based on the programming language used. (To avoid clutter, if there is more than one file in a given directory written in a particular language, that language only gets a single dot.)\n") "\n\n" (p "\nSome highlights: the blues are Scheme-like languages, the reds are langauges we use to write documentation (see " (a ((href "http://docs.plt-scheme.org/scribble/")) "Scribble") " for more about them), the greens are teaching languages, orange is the language we use to bootstrap new languages, and yellow is a language for metadata about nearby files.\n") "\n\n" (p "\nCurious about how we managed to write and use so many different languages?\nI'll be giving a talk at " (a ((href "http://www.flourishconf.com/flourish2010/")) "Flourish 2010") " next week (3/19 @11am, UIC in Chicago) explaining how. Come to learn more!\n")) (link ((href "http://blog.racket-lang.org/feeds/3811154831217235895/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=3811154831217235895") (rel "replies") (title "2 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/3811154831217235895") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/3811154831217235895") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/03/talk-at-flourish.html") (rel "alternate") (title "Talk at Flourish") (type "text/html"))) (author (name "Robby Findler") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (media:thumbnail ((height "72") (url "http://3.bp.blogspot.com/_gJUvnpacURg/S5UwRCtLiDI/AAAAAAAAAI0/9mdGDzmDD7k/s72-c/langs.png") (width "72") (xmlns:media "http://search.yahoo.com/mrss/"))) (thr:total "2")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8557185805751063148") (published "2010-02-28T20:16:00.006-05:00") (updated "2012-06-24T21:50:46.870-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "code-stats"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "experience-reports"))) (title ((type "text")) "DAGs vs Trees") (post-content (p "\nAs I wondering whether or not there is a better layout algorithm for the module browser window, I looked into " (a ((href "http://www.cs.umd.edu/hcil/treemap-history/")) "tree maps") ". Of course, the modules in a program form a DAG, not a tree, so I wondered just how big the tree would get if all of the shared structure in the DAG were replicated. Hey, I figured, if a tree map can handle showing me my entire filesystem, maybe that could work.\n") "\n\n" (p "\n... yeah, no. Turns out to be hopeless. In the spirit of a geeky take off on a jelly bean counting contest, lets see if you can guess just how big these things get. Consider the module graph from the program " (tt "#lang scheme") " (ie, the graph that just contains an empty program). This program loads 170 modules with 917 connections between modules (counting the main file that just contains the " (tt "#lang scheme") ").\n") "\n\n" (p "\nSo, the question: how many nodes are there in the unsharified tree? First one to come within 1 billion of the right answer gets all of the fame and glory that this blog brings to bear (har har). I'll post the answer in the comments in a few days (and no fair cheating, those of you that know enough to be able to get your hands on the DAG).\n")) (link ((href "http://blog.racket-lang.org/feeds/8557185805751063148/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=8557185805751063148") (rel "replies") (title "3 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/8557185805751063148") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/8557185805751063148") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/02/dags-vs-trees.html") (rel "alternate") (title "DAGs vs Trees") (type "text/html"))) (author (name "Robby Findler") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "3")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8793911366542740014") (published "2010-01-29T12:57:00.005-05:00") (updated "2012-06-24T21:50:59.595-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "benchmarks"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "code-stats"))) (title ((type "text")) "Benchmarks") (post-content "First, the usual disclaimer:\n\n" (div ((style "text-align: center;")) (a ((href "http://3.bp.blogspot.com/_KNUe0zbAbNc/S2MhtPN92xI/AAAAAAAAAAM/z7_pjgGoY4I/s1600-h/benchmark.jpg") (onblur "try {parent.deselectBloggerImageGracefully();} catch(e) {}")) (img ((alt "") (border "0") (id "BLOGGER_PHOTO_ID_5432222636601891602") (src "http://3.bp.blogspot.com/_KNUe0zbAbNc/S2MhtPN92xI/AAAAAAAAAAM/z7_pjgGoY4I/s320/benchmark.jpg") (style "margin: 0pt 10px 10px 0pt; display: block; cursor: pointer; width: 320px; height: 226px;")))) "\n") "That said, I've run the latest version of PLT Scheme on two sets of benchmarks:\n" (ul (li (a ((href "http://www.cs.utah.edu/%7Emflatt/benchmarks-20100126/log3/Benchmarks.html")) "Benchmarks in the PLT sources") " â vs. Bigloo, Chicken, Gambit, Guile, Ikarus, Larceny, MIT Scheme, and Scheme48; safe operations and generic arithmetic only\n")) (ul (li (a ((href "http://www.cs.utah.edu/%7Emflatt/benchmarks-20100126/log1/Gambit_20benchmarks.html")) "Benchmarks in the Gambit sources") " â vs. Bigloo and Gambit; generic vs. fixnum-/flonum-specific arithmetic, safe vs. unsafe operations")) "The second set is why I started running benchmarks. Fixnum-/flonum-specific arithmetic and unsafe operations are new in PLT Scheme 4.2.4. The benchmark results suggest that the new operations in PLT Scheme offer roughly the same performance benefits as in Bigloo and Gambit. There's room for improvement, but it's a good first cut.\n\n\nFor the other results: PLT Scheme is rarely the fastest implementation on a given benchmark. For most purposes, though, it's in the same ballpark â except for programs that spend all their time capturing and invoking continuations.\n\n\nIt's fun to run benchmarks occasionally. Now, back to working on language design, libraries, documentation, usability...") (link ((href "http://blog.racket-lang.org/feeds/8793911366542740014/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=8793911366542740014") (rel "replies") (title "5 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/8793911366542740014") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/8793911366542740014") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/01/benchmarks.html") (rel "alternate") (title "Benchmarks") (type "text/html"))) (author (name "Matthew Flatt") (uri "https://www.blogger.com/profile/03369511886823036667") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (media:thumbnail ((height "72") (url "http://3.bp.blogspot.com/_KNUe0zbAbNc/S2MhtPN92xI/AAAAAAAAAAM/z7_pjgGoY4I/s72-c/benchmark.jpg") (width "72") (xmlns:media "http://search.yahoo.com/mrss/"))) (thr:total "5")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8617297185333389454") (published "2010-01-28T21:40:00.001-05:00") (updated "2011-11-09T22:50:37.974-05:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "release"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "PLT Scheme v4.2.4") (post-content "PLT Scheme version 4.2.4 is now available from" (pre "  " (a ((href "http://plt-scheme.org/")) (tt "http://plt-scheme.org/"))) "\n" (ul (li "The " (tt "scheme/flonum") " and " (tt "scheme/fixnum") " libraries provide flonum- and fixnum-specific operations.  In the case of flonum-specific operations, the JIT compiler can recognize combinations of operations (including local bindings) and improve performance by \"unboxing\" intermediate results.") (li "The " (tt "scheme/unsafe/ops") " library provides arithmetic and other operations that are implemented without dynamic checks.  Avoiding checks can sometimes improve performance, but at the expense of safety.") (li (tt "2htdp/universe") ": We have severed the connection between universe and an image library and made a few other, minor changes.  Most programs will now have to change to require the " (tt "htdp/image") " library explicitly.  For the full details, see the new " (a ((href "http://docs.plt-scheme.org/teachpack/2htdphtdp-port.html")) "Porting World Programs") " section of the documentation.") (li "The " (tt "2htdp/image") " library continues to grow.  In this release, it is supported by " (tt "2htdp/universe") ", equality changed to be based on how the images are drawn, cropping and curves were added, and support for more kinds of pens were added.") (li (tt "htdp/world") ": The old world teachpack remains deprecated.  HtDP/2e exclusively uses the new 2htdp/universe library.  For backwards compatibility, the world teachpack will remain in the distribution until the coming summer.") (li "The " (tt "scheme/class") " library now provides " (tt "this%") ", which refers to the class of the current object (i.e. " (tt "this") ").") (li (tt "scheme/generator") " has convenient functions for infinite generators, and for converting a generator to a sequence for iteration.") (li "PLT Scheme's add-on directory can be customized by the " (tt "$PLTADDONDIR") " environment variable or " (tt "--addon") "/" (tt "-A") " command-line flags.  This controls where downloaded Planet packages and their compiled Scribble documentation are installed.") (li "Additional extensions include: saving " (tt "errno") " in foreign calls, much improved " (tt "sort") " speed, normalized results from " (tt "procedure-arity") ", and more."))) (link ((href "http://plt-scheme.org/") (rel "related") (title "PLT Scheme v4.2.4"))) (link ((href "http://blog.racket-lang.org/feeds/8617297185333389454/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=8617297185333389454") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/8617297185333389454") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/8617297185333389454") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/01/plt-scheme-v424.html") (rel "alternate") (title "PLT Scheme v4.2.4") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_lx1aK_XwT-o/SxSPoMzJgLI/AAAAAAAAAA8/v5ASXddGsSc/s32-R/eli-small.jpg") (width "28")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8205870831316099176") (published "2010-01-02T11:40:00.007-05:00") (updated "2012-06-24T21:51:29.644-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "videos"))) (title ((type "text")) "Scheme Videos (Lectures and Talks)") (post-content (span ((class "Apple-style-span") (style "  ;font-family:arial, sans-serif;font-size:small;")) (p ((style "font-weight: bold; ")) "Scheme Videos (Lectures and Talks)") (p) (p "(thanks to Geoffrey Knauth and Hari)") (p "Following a mailing-list request, it turns out that there are quite a lot of Scheme-related lectures and talks floating around out there in video format. The following list was compiled by Geoffrey Knauth, with contributions from Hari and Michael Sperber, and at least one insertion from me, right at the front.") (p) (p) (ul (li "My sequence of " (a ((href "http://www.youtube.com/playlist?list=PLD0EB7BC8D7CF739A")) "introductory videos on YouTube") ", recorded long after this post was made.")) (p) (ul (li "There's the SICP course Abelson " "&" " Sussman gave to [HP, I think] in the mid-1980s: " (a ((href "http://groups.csail.mit.edu/mac/classes/6.001/abelson-sussman-lectures/") (style "font-family: arial, sans-serif; color: rgb(0, 62, 168); ") (target "_blank") (x "y")) "http://groups.csail.mit.edu/mac/classes/6.001/abelson-sussman-lectures/"))) (p) (ul (li "MIT OCW / 6.001 using SICP, Spring 2005: " (a ((href "http://ocw.mit.edu/OcwWeb/Electrical-Engineering-and-Computer-Science/6-001Spring-2005/VideoLectures/index.htm") (style "font-family: arial, sans-serif; color: rgb(0, 62, 168); ") (target "_blank") (x "y")) "http://ocw.mit.edu/OcwWeb/Electrical-Engineering-and-Computer-Science/6-001Spring-2005/VideoLectures/index.htm"))) (p) (ul (li "All the ICFP 2009 videos (man this made my day!!): " (a ((href "http://vidiowiki.com/feature/list/fnu/ICFP_2009") (style "font-family: arial, sans-serif; color: rgb(0, 62, 168); ") (target "_blank") (x "y")) "http://") (a ((href "http://vidiowiki.com/feature/list/fnu/ICFP_2009") (style "font-family: arial, sans-serif; color: rgb(0, 62, 168); ") (target "_blank") (x "y")) "vidiowiki") (a ((href "http://vidiowiki.com/feature/list/fnu/ICFP_2009") (style "font-family: arial, sans-serif; color: rgb(0, 62, 168); ") (target "_blank") (x "y")) ".com/feature/list/") (a ((href "http://vidiowiki.com/feature/list/fnu/ICFP_2009") (style "font-family: arial, sans-serif; color: rgb(0, 62, 168); ") (target "_blank") (x "y")) "fnu") (a ((href "http://vidiowiki.com/feature/list/fnu/ICFP_2009") (style "font-family: arial, sans-serif; color: rgb(0, 62, 168); ") (target "_blank") (x "y")) "/") (a ((href "http://vidiowiki.com/feature/list/fnu/ICFP_2009") (style "font-family: arial, sans-serif; color: rgb(0, 62, 168); ") (target "_blank") (x "y")) "ICFP_2009"))) (p) (ul (li "Daniel P Friedman - A Celebration (this too!): " (a ((href "http://www.cs.indiana.edu/dfried_celebration.html") (style "font-family: arial, sans-serif; color: rgb(0, 62, 168); ") (target "_blank") (x "y")) "http://www.cs.indiana.edu/dfried_celebration.html"))) (p) (ul (li "DrScheme v4.0 Tour: " (a ((href "http://www.youtube.com/watch?v=vgQO_kHl39g&amp;fmt=18") (style "font-family: arial, sans-serif; color: rgb(0, 62, 168); ") (target "_blank") (x "y")) "http://www.youtube.com/watch?v=vgQO_kHl39g" "&" "fmt=18"))) (ul (li "Similar, if you understand Russian:") (li (a ((href "http://www.youtube.com/watch?v=wECY7s9k-V0") (style "font-family: arial, sans-serif; color: rgb(0, 62, 168); ") (target "_blank") (x "y")) "http://www.youtube.com/watch?v=wECY7s9k-V0")) (li (a ((href "http://www.youtube.com/watch?v=2CVJjqOT6WM") (style "font-family: arial, sans-serif; color: rgb(0, 62, 168); ") (target "_blank") (x "y")) "http://www.youtube.com/watch?v=2CVJjqOT6WM"))) (p) (ul (li "Matthias Felleisen - Programming at Northeastern: " (a ((href "http://www.savevid.com/video/matthias-felleisen-programming-at-northeastern-university.html") (style "font-family: arial, sans-serif; color: rgb(0, 62, 168); ") (target "_blank") (x "y")) "http://www.savevid.com/video/matthias-felleisen-programming-at-northeastern-university.html"))) (p) (ul (li "Matthew Flatt - Processes without Partitions: " (a ((href "http://www.researchchannel.org/prog/displayevent.aspx?rID=3892") (style "font-family: arial, sans-serif; color: rgb(0, 62, 168); ") (target "_blank") (x "y")) "http://www.researchchannel.org/prog/displayevent.aspx?rID=3892"))) (p) (ul (li "Shriram Krishnamurthi on WeScheme: " (a ((href "http://vidiowiki.com/watch/cydr9yk/") (style "font-family: arial, sans-serif; color: rgb(0, 62, 168); ") (target "_blank") (x "y")) "http://vidiowiki.com/watch/cydr9yk/"))) (p) (ul (li "Robby Findler - Macros Matter: " (a ((href "http://www.mefeedia.com/video/26348171") (style "font-family: arial, sans-serif; color: rgb(0, 62, 168); ") (target "_blank") (x "y")) "http://www.mefeedia.com/video/26348171"))) (p) (ul (li "Using PLT Scheme in the Game Industry: " (a ((href "http://www.youtube.com/watch?v=2CVJjqOT6WM") (style "font-family: arial, sans-serif; color: rgb(0, 62, 168); ") (target "_blank") (x "y")) "http://www.youtube.com/watch?v=2CVJjqOT6WM"))) (p) (ul (li "Stanford Lecture (Kawa): " (a ((href "http://www.youtube.com/watch?v=_cV8NWQCxnE") (style "font-family: arial, sans-serif; color: rgb(0, 62, 168); ") (target "_blank") (x "y")) "http://www.youtube.com/watch?v=_cV8NWQCxnE"))) (p) (ul (li "Bluetooth communication using PLT Scheme: " (a ((href "http://www.youtube.com/watch?v=pmR_dIXm6sY") (style "font-family: arial, sans-serif; color: rgb(0, 62, 168); ") (target "_blank") (x "y")) "http://www.youtube.com/watch?v=pmR_dIXm6sY"))) (p) (ul (li (span ((style " ;font-family:Helvetica;") (x "y")) "SICP at UCB: ") (a ((href "http://webcast.berkeley.edu/course_details.php?seriesid=1906978454") (style "font-family: Helvetica; color: rgb(0, 62, 168); ") (target "_blank") (x "y")) "http://webcast.berkeley.edu/course_details.php?seriesid=1906978454"))) (ul (li (span ((class "Apple-style-span") (style "  ;font-family:Helvetica;font-size:medium;")) (a ((href "http://www.aduni.org/courses/sicp/")) "http://www.aduni.org/courses/sicp/") " from ADUni by Holly Yanco. " (span ((class "Apple-style-span") (style " ;font-family:Helvetica;")) "It comes with pretty good lecture notes and problem sets.")))) (ul (li (span ((class "Apple-style-span") (style "font-family:Helvetica, sans-serif;")) (span ((class "Apple-style-span") (style "font-family: Helvetica; font-size: medium; ")) "Michael Sperber's DMdA lectures (in German, natch): " (a ((href "http://timms.uni-tuebingen.de/List/List01.aspx?rpattern=UT_200[89]_____00[12]_info1_000_")) "http://timms.uni-tuebingen.de/List/List01.aspx?rpattern=UT_200[89]_____00[12]_info1_000_") " ")))))) (link ((href "http://blog.racket-lang.org/feeds/8205870831316099176/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=8205870831316099176") (rel "replies") (title "2 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/8205870831316099176") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/8205870831316099176") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/01/scheme-videos-lectures-and-talks-thanks.html") (rel "alternate") (title "Scheme Videos (Lectures and Talks)") (type "text/html"))) (author (name "John Clements") (uri "https://www.blogger.com/profile/15701081040575095781") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "2")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2650374273353885414") (published "2009-12-07T13:18:00.002-05:00") (updated "2012-06-24T21:51:51.952-04:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "new-feature"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "parallelism"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "futures"))) (title ((type "text")) "Futures: Fine Grained Parallelism in PLT") (post-content (p "\nWe're pleased to announce the initial release of parallel futures, a\nconstruct for fine-grained parallelism in PLT. Roughly speaking, a\nprogrammer passes a thunk to 'future' and it gets run in parallel.\nThat \"roughly\" holds a few gotchas, partly because we're just getting\nstarted and partly due to the technique we're using. See the\ndocumentation for more details:\n") "\n\n" (center "\n" (a ((href "http://pre.plt-scheme.org/docs/html/futures/")) "http://pre.plt-scheme.org/docs/html/futures/") "\n") "\n\n" (p "\nIf you've got a multicore machine where you can't keep the cores busy\nor your office/machine room is a bit cold, try this program:\n\n" (pre "\n#lang scheme\n(require scheme/future)\n(define (loop) (loop))\n(for-each\n touch\n (for/list ([i (in-range 0 (processor-count))])\n  (future loop)))\n") "\n\nNote that you have to build mzscheme with futures; it isn't enabled by\ndefault, but see the docs above for how to do that. Beyond the above,\nwe've also gotten a few parallel kernels going and are seeing good\nscalability up to 8 cores (the biggest machine we have around for the\ntime being).\n")) (link ((href "http://blog.racket-lang.org/feeds/2650374273353885414/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=2650374273353885414") (rel "replies") (title "8 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2650374273353885414") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2650374273353885414") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/12/futures-fine-grained-parallelism-in-plt.html") (rel "alternate") (title "Futures: Fine Grained Parallelism in PLT") (type "text/html"))) (author (name "Robby Findler") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "8")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5329605548581881880") (published "2009-12-01T06:03:00.001-05:00") (updated "2011-11-09T22:52:20.931-05:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "release"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "PLT Scheme v4.2.3") (post-content "PLT Scheme version 4.2.3 is now available from" (pre "  " (a ((href "http://plt-scheme.org/")) (tt "http://plt-scheme.org/"))) (ul (li "The unit test framework for the teaching languages provides " (tt "check-member-of") " and " (tt "check-range") " for checking \"random functions\", i.e., \"functions\" that may produce several different results for one and the same argument.") (li "Added a new image library, " (tt "2htdp/image") ".  Significant changes from " (tt "htdp/image") ":" (ul (li "copying and pasting does not introduce jaggies") (li (tt "equal?") " comparisons are more efficient") (li "added rotation " "&" " scaling") (li "got rid of pinholes (new overlay, beside, above functions based on bounding boxes)"))) (li "The " (tt "scheme/vector") " library provides common vector operations (also reprovided by " (tt "scheme") ").") (li "The " (tt "scheme/promise") " library provides several new kinds of promises with alternatives execution strategies.") (li "New port-reading utilities: " (tt "in-port") ", " (tt "port-" ">" "list") ", " (tt "file-" ">" "list") ".") (li "A new require-macro, " (tt "path-up") ", for requiring a file that is higher in the directory tree."))) (link ((href "http://plt-scheme.org/") (rel "related") (title "PLT Scheme v4.2.3"))) (link ((href "http://blog.racket-lang.org/feeds/5329605548581881880/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=5329605548581881880") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/5329605548581881880") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/5329605548581881880") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/12/plt-scheme-v423.html") (rel "alternate") (title "PLT Scheme v4.2.3") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_lx1aK_XwT-o/SxSPoMzJgLI/AAAAAAAAAA8/v5ASXddGsSc/s32-R/eli-small.jpg") (width "28")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5667444686131365854") (published "2009-10-04T16:29:00.001-04:00") (updated "2011-11-09T22:52:20.935-05:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "release"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "PLT Scheme v4.2.2") (post-content "PLT Scheme version 4.2.2 is now available from" (pre "  " (a ((href "http://plt-scheme.org/")) (tt "http://plt-scheme.org/"))) (ul (li "DrScheme now, by default, compiles all of the files that are loaded when it runs a program and saves the compiled files in the filesystem.  This should lead to faster load times (not faster runtimes) since it avoids re-compiling files whose dependencies have not changed.") (li "New Scribble libraries and documentation make it easier to get started with Scribble, especially for uses other than PLT documentation.  DrScheme now has better indentation and syntax coloring support for Scribble languages (and generally all @-exp based languages).") (li "The new " (tt "syntax/keyword") " library provides support for macros with keyword options.  A new quick start guide has been added to the documentation for the " (tt "syntax/parse") " library.") (li "Added support for abstract contracts via the #:exists keywords.  This is an experiment to add support for data hiding to the contract system.") (li "Added " (tt "in-producer") ": a sequence expression makes it easy to iterate over producer functions (e.g., " (tt "read") ").  A new " (tt "scheme/generator") " library creates generators that can use a (parameterized) yield function.") (li "HtDP langs: several primitives now consume 0 and 1 arguments in ISL (and up), including " (tt "append") ", " (tt "+") " and " (tt "*") ".  In addition, " (tt "make-list") " was added to the primitives.") (li "The API to Universe has a number of new constructs.  All Universe programs should run unchanged.  The most important change is the addition of " (tt "animate") " as an alternative name for " (tt "run-simulation") ".  In addition, adding the clause " (tt "(state true)") " to a world description now pretty-prints the state of the world into a separate canvas.") (li "A number of changes were made to the DeinProgramm / DMdA language levels: The " (tt "check-property") " and " (tt "contract") " forms were added, " (tt "define-record-procedures-parametric") " has changed.  See the documentation for details.") (li "The test engine in the HtDP languages no longer warns programmers when the Definitions window has no tests.") (li "ProfessorJ (and related code) is no longer included in the PLT distributions.  It may re-appear in the future as a PLaneT package."))) (link ((href "http://plt-scheme.org/") (rel "related") (title "PLT Scheme v4.2.2"))) (link ((href "http://blog.racket-lang.org/feeds/5667444686131365854/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=5667444686131365854") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/5667444686131365854") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/5667444686131365854") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/10/plt-scheme-v422.html") (rel "alternate") (title "PLT Scheme v4.2.2") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_lx1aK_XwT-o/SxSPoMzJgLI/AAAAAAAAAA8/v5ASXddGsSc/s32-R/eli-small.jpg") (width "28")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6017258707048735589") (published "2009-09-21T07:23:00.007-04:00") (updated "2012-06-24T22:09:42.656-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "mutation"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "check-syntax"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "set"))) (title ((type "text")) "set! vs set-box! and unbox") (post-content "A few weeks ago I was chatting with some PLT folks and was surprised to hear them say that they avoided " (tt "set!") " because using " (tt "set-box!") " and " (tt "unbox") " was easier to see what was going on.\n" (br) "\nThis struck me as wrong since one might pass boxes around and then you can't be sure which box you're mutating, but you cannot pass variable references around and thus which variable you're using is always lexically apparent. (Of course, when you add " (tt "lambda") " into the mix that isn't really true, since you can capture a variable in a closure and pass that around.)\n" (br) "\nTheir point seemed to be that you had to write something special at each use of the box, unlike with " (tt "set!") " where you simply write a variable reference and it might be getting a changing quantity and it might not be. This made me realize I could do something to help, at least, and so I changed Check Syntax so that it colored " (tt "set!") "'d variables in red, like this:\n" (br) "\n" (a ((href "http://www.ece.northwestern.edu/~robby/tmp/cs-set.png") (onblur "try {parent.deselectBloggerImageGracefully();} catch(e) {}")) (img ((alt "") (border "0") (src "http://www.ece.northwestern.edu/%7Erobby/tmp/cs-set.png") (style "cursor: pointer; display: block; height: 348px; margin: 0px auto 10px; text-align: left; width: 725px;"))))) (link ((href "http://blog.racket-lang.org/feeds/6017258707048735589/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=6017258707048735589") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/6017258707048735589") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/6017258707048735589") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/09/set-vs-set-box-and-unbox.html") (rel "alternate") (title "set! vs set-box! and unbox") (type "text/html"))) (author (name "Robby Findler") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3859338948523565949") (published "2009-07-30T08:24:00.001-04:00") (updated "2011-11-09T22:52:20.918-05:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "release"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "PLT Scheme v4.2.1") (post-content "PLT Scheme version 4.2.1 is now available from\n" (pre "  " (a ((href "http://plt-scheme.org/")) (tt "http://plt-scheme.org/"))) "\n" (ul (li "This is the last release that includes ProfessorJ. As of the next release, Kathy Gray who created and maintained the Professor will move the code to planet and maintain only at a minimal level.") " " (li "Typed Scheme 2.0 extends the type system significantly, making it more expressive.  For example, predicates applied to selectors, such as (number? (car x)), are meaningful to the type system.") " " (li "Faster installation of Planet packages that trigger install of other Planet packages, because the documentation index is updated only once after a group of packages is installed.") " " (li "The " (tt "syntax/parse") " library provides macro writers with an enhanced syntax pattern matcher that reports errors based on the patterns' declared classes of syntax.") " " (li "Identifier mappings following the v4 dictionary interface and naming conventions are available from the " (tt "syntax/id-table") " library.") " " (li "Redex: added " (tt "define-relation") " and generalized patterns that appear in " "\"" "where" "\"" " clauses to use the full Redex pattern matcher. (This is a backwards incompatible change, but one often requested; see the Redex release notes for details.)") " " (li "The Web Server's serializable closures are now available for other purposes through the web-server/lang/serial-lambda library.") " " (li "Teachpacks: small changes to universe portion of the " "\"" "universe.ss" "\"" " API, plus the addition of a form for launching many (communicating) worlds simultaneously.  Bug fixes concerning conversion to strings.") " " (li "It is now possible to create custom scribble readers with a command characters different than " (tt "@") ", see " (tt "make-at-reader/inside") " and " (tt "make-at-reader")) " " (li "Note: this is likely to be the last release that includes a solaris distribution.  If you need these builds, or if you have access to a (Sparc) Solaris machine than can be used in PLT builds, then please let me know."))) (link ((href "http://plt-scheme.org/") (rel "related") (title "PLT Scheme v4.2.1"))) (link ((href "http://blog.racket-lang.org/feeds/3859338948523565949/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=3859338948523565949") (rel "replies") (title "1 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/3859338948523565949") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/3859338948523565949") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/07/plt-scheme-v421.html") (rel "alternate") (title "PLT Scheme v4.2.1") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_lx1aK_XwT-o/SxSPoMzJgLI/AAAAAAAAAA8/v5ASXddGsSc/s32-R/eli-small.jpg") (width "28")))) (thr:total "1")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6441102098879154048") (published "2009-06-23T12:02:00.003-04:00") (updated "2012-06-24T22:24:38.018-04:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "new-feature"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "macros"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "serialization"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "web-server"))) (title ((type "text")) "Serializable Closures in PLT Scheme") (post-content (p "PLT Scheme supports an extensible " (a ((href "http://docs.plt-scheme.org/reference/serialization.html")) "serialization") " system for structures. A structure is serializable if it has a " (code "prop:serializable") " property. There are many " (a ((href "http://docs.plt-scheme.org/search/index.html?q=prop%3A")) "properties") " in PLT Scheme for other extensions, such as " (a ((href "http://docs.plt-scheme.org/reference/procedures.html#(def._((lib._scheme/base..ss)._prop~3aprocedure))")) "applicable structures") " and " (a ((href "http://docs.plt-scheme.org/reference/booleans.html#(def._((quote._~23~25kernel)._prop~3aequal+hash))")) "custom equality predicates") ".") "\n\n" (p "The " (a ((href "http://docs.plt-scheme.org/web-server/index.html")) "PLT Web") " application development framework uses these features to provide " (a ((href "http://docs.plt-scheme.org/web-server/stateless.html#(part._.Serializable_.Continuations)")) "serializable continuations") " through a number of source transformations and a serializable closure structure.") "\n\n" (p (em "Warning: This remainder post refers to features only available in the latest SVN revision of PLT Scheme.")) "\n\n" (p "I've recently made these closures more accessible to non-Web programs through " (code "web-server/lang/serial-lambda") ". Here's a demo:") "\n" (pre "\n#lang scheme\n(require web-server/lang/serial-lambda\n         scheme/serialize)\n\n(define f\n  (let ([z 5])\n    (serial-lambda\n     (x y)\n     (+ x y z))))\n\n(define (test-it)\n  (printf \"~S~n\" (f 1 2))\n  (let ([fs (serialize f)])\n    (printf \"~S~n\" fs)\n    (let ([df (deserialize fs)])\n      (printf \"~S~n\" df)\n      (printf \"~S~n\" (df 1 2)))))\n\n" ">" " (test-it)\n8\n((2) 1 ((#\"/Users/jay/Dev/svn/plt/collects/web-server/exp/test-serial.ss\" . \"lifted.6\")) 0 () () (0 5))\n#(struct:7a410aca70b31e88b4c2f0fe77fa7ffe:0 #" (procedure ")\n8\n")) "\n\n" (p "Now, let's see how it is implemented. " (a ((href "http://svn.plt-scheme.org/plt/trunk/collects/web-server/lang/serial-lambda.ss")) (code "web-server/lang/serial-lambda")) " is thin wrapper around " (a ((href "http://svn.plt-scheme.org/plt/trunk/collects/web-server/lang/closure.ss")) (code "web-server/lang/closure")) ", which has two syntax transformer functions: " (code "define-closure!") " which defines the closure structure and " (code "make-closure") " which instantiates the closure. (The two tasks are separated to easily provide a user top-level definition syntax for named closures with different free identifires, rather than simply anonymous lambdas with fixed free identifiers.)") "\n\n" (p (code "make-closure") " does the following:") "\n" (ol "\n" (li "Expands the procedure syntax using " (a ((href "http://docs.plt-scheme.org/reference/stxtrans.html#(def._((quote._~23~25kernel)._local-expand))")) (code "local-expand")) ", so it can use " (a ((href "http://docs.plt-scheme.org/syntax/syntax-helpers.html#(def._((lib._syntax/free-vars..ss)._free-vars))")) (code "free-vars")) " to compute the free identifires.") "\n" (li "Uses " (code "define-closure!") " to define the structure and get the name for the constructor.") "\n" (li "Instantiates the closure with the current values of the free identifiers.") "\n") "\n\n" (p "The more interesting work is done by " (code "define-closure!") ". At a high-level, it needs to do the following:") "\n" (ol "\n" (li "Create a deserialization function.") "\n" (li "Create a serialization function that references the deserializer.") "\n" (li "Define the closure structure type that references the serializer.") "\n" (li "Provide the deserializer from the current module so that arbitrary code can deserialize instances of this closure type.") "\n") "\n\n" (p "These tasks are complicated in a few ways:") "\n" (ol "\n" (li "The deserializer needs the closure structure type definition to create instances and the serializer needs the closure structure type to access their fields.") "\n" (li "The serializer needs the syntactic identifier of the deserializer so that " (code "scheme/serialize") " can " (a ((href "http://docs.plt-scheme.org/reference/Module_Names_and_Loading.html#(def._((quote._~23~25kernel)._dynamic-require))")) (code "dynamic-require")) " it during deserialization.") "\n" (li "The deserializer must be defined at the top-level, so it may be provided.") "\n" (li "All this may occur in a syntactic expression context.") "\n") "\n\n" (p "Thankfully, the PLT Scheme " (a ((href "http://docs.plt-scheme.org/reference/Macros.html")) "macro system") " is powerful to support all this.") "\n" (ul "\n" (li (a ((href "http://docs.plt-scheme.org/reference/stxtrans.html#(def._((quote._~23~25kernel)._syntax-local-lift-expression))")) (code "syntax-local-lift-expression")) " allows a syntax transformer to lift an expression to the top-level of a module and returns the identifier it is bound to.") "\n" (li (a ((href "http://docs.plt-scheme.org/search/index.html?q=syntax-local-lift-values-expression")) (code "syntax-local-lift-values-expression")) " (added in 4.2.0.3) provides the same for expressions that return multiple values, such as " (a ((href "http://docs.plt-scheme.org/reference/creatingmorestructs.html#(def._((quote._~23~25kernel)._make-struct-type))")) (code "make-struct-type")) ", which is used to define structures.") "\n" (li (a ((href "http://docs.plt-scheme.org/search/index.html?q=syntax-local-lift-provide")) (code "syntax-local-lift-provide")) " (added in 4.2.0.4) allows a syntax transformer to lift a provide to the top-level.") "\n ") "\n\n" (p "The only complicated piece is allowing the deserializer and serializer to refer to the closure structure constructor and accessors. This is easily accomplished by first defining lifting boxes that will hold these values and initializing them when the structure type is defined. This is safe because all accesses to the boxes are under lambdas that are guaranteed not to be run before the structure type is defined.") "\n\n" (p (strong "An aside on the closure representation.") " The closure is represented as a structure with one field: the environment. The environment is represented as a thunk that returns " (em "n") " values, one for each of the free identifiers. This ensures that references that were under lambdas in the original syntax, remain under lambdas in the closure construction, so the serializable closures work correctly inside " (code "letrec") ". This thunk is applied by the serializer and the free values are stored in a vector. The closure also uses the " (code "prop:procedure") " structure property to provide an application function that simply invokes the environment thunk and binds its names, then " (code "apply") "s the original procedure syntax to the arguments.") "\n\n" (p (strong "An aside on the serializer.") " The deserializer is bound to lifted identifier which is represented in PLT Scheme as an unreadable symbol. Version 4.2.0.5 added support for (de)serializing these.")) (link ((href "http://blog.racket-lang.org/feeds/6441102098879154048/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=6441102098879154048") (rel "replies") (title "2 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/6441102098879154048") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/6441102098879154048") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/06/serializable-closures-in-plt-scheme.html") (rel "alternate") (title "Serializable Closures in PLT Scheme") (type "text/html"))) (author (name "Jay McCarthy") (uri "https://plus.google.com/101670206687664104937") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh3.googleusercontent.com/-13KUDv8LhZw/AAAAAAAAAAI/AAAAAAAAAAA/7MdiB5POU5k/s32-c/photo.jpg") (width "32")))) (thr:total "2")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-655377273386641529") (published "2009-06-01T14:41:00.001-04:00") (updated "2011-11-09T22:52:20.947-05:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "release"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "PLT Scheme v4.2") (post-content "PLT Scheme version 4.2 is now available from" (pre "  " (a ((href "http://plt-scheme.org/")) "http://plt-scheme.org/")) "\nInternally, this version includes a conversion from C++ to Scheme for part of the GUI toolbox --- specifically, 25k lines of code that implement the general text and pasteboard editor.  This conversion is a start on a larger reimplementation of the GUI toolbox.  Although we believe that this change will help make PLT Scheme better in the long run, we must expect bugs in the short term due to porting errors.  Users should therefore be aware of the change, even though the new implementation is meant to behave the same as previous versions.\n" (ul "\n" (li "A new statistical profiler is now available; see the \"profiler\" manual for more information.  Currently, the profiler supports only textual output, but future plans include a GUI interface and DrScheme integration.") "\n" (li "The " (tt "world") " teachpack is now deprecated.  Its replacement " (tt "universe") " has a new interface that uses strings instead of symbols and characters.") "\n" (li "Web-server: Native continuations in the stateless servlet language support capturing continuations from untransformed contexts; soft state library for stateless servlets.") "\n" (li "DrScheme's Stepper can now jump to a selected program expression.") "\n" (li "New in " (tt "scheme/base") ": " (tt "hash-has-key?") ", " (tt "hash-ref!") ", " (tt "in-sequences") ", " (tt "in-cycle") ".  New in " (tt "scheme") ": " (tt "count") ", " (tt "make-list") " (from " (tt "scheme/list") "), " (tt "const") " (from " (tt "scheme/function") ").") "\n" (li "Some performance improvements, including faster start-up for small programs. The latter is a result of delaying module invocations at higher phases (compile time, meta-compile time, etc.) until compilation is demanded at the next lower phase; this on-demand instantiation is per-phase, as opposed to per-module within a phase.") "\n") "\n\n[Note that mirror sites can take a while to catch up with the new downloads.]\n\nFeedback Welcome.") (link ((href "http://plt-scheme.org/") (rel "related") (title "PLT Scheme v4.2"))) (link ((href "http://blog.racket-lang.org/feeds/655377273386641529/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=655377273386641529") (rel "replies") (title "5 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/655377273386641529") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/655377273386641529") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/06/plt-scheme-v42.html") (rel "alternate") (title "PLT Scheme v4.2") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_lx1aK_XwT-o/SxSPoMzJgLI/AAAAAAAAAA8/v5ASXddGsSc/s32-R/eli-small.jpg") (width "28")))) (thr:total "5")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4636049989832884950") (published "2009-05-25T13:47:00.003-04:00") (updated "2012-06-24T22:23:35.337-04:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "new-feature"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "typed-racket"))) (title ((type "text")) "Typed Scheme 2.0") (post-content (p "Typed Scheme version 2.0 is now available from SVN.") "\n\n" (p "One persistent limitation of Typed Scheme has been that while this expression works as expected:") "\n\n" (p (code "(if (number? x) (add1 x) 7)")) "\n\n" (p "The simple transformation of making " (code "x") " a part of a structure breaks Typed Scheme's ability to reason about the code. So this expression doesn't typecheck:") "\n\n" (p (code "(if (number? (car x)) (add1 (car x)) 7)")) "\n\n" (p "With the newest version of Typed Scheme, now available in SVN, both of these will now work.  In general, Typed Scheme can now follow paths into arbitrary immutable structures, including pairs.") "\n\n" (p "This is part of a more general reworking of underlying mechanisms of the Typed Scheme typechecker, which makes it both simpler and more flexible.  I hope that it will be possible,  sing this new foundation to add additional features that make more programs easy to express in\nTyped Scheme.") "\n\n" (p "Of course, these changes mean that Typed Scheme may be more unstable, so if you notice any new bugs, please let us know.") "\n\n" (p "Unfortunately, this won't be available in the upcoming 4.2 release, but it will be in the release after that.") "\n\n" (p "If you have any questions or comments or feature requests for Typed Scheme, please let us know.")) (link ((href "http://blog.racket-lang.org/feeds/4636049989832884950/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=4636049989832884950") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/4636049989832884950") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/4636049989832884950") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/05/typed-scheme-20.html") (rel "alternate") (title "Typed Scheme 2.0") (type "text/html"))) (author (name "Sam Tobin-Hochstadt") (uri "https://www.blogger.com/profile/12049111326816937908") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1513383412261723218") (published "2009-05-24T03:17:00.004-04:00") (updated "2012-06-24T21:54:37.529-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "macros"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "tutorials"))) (title ((type "text")) "Explicit Renaming Macros; Implicitly") (post-content "It's been one too many times that I hear respectable Schemers talk about how they like explicit renaming macros " 8212 " not because they're more powerful, but because using them is close to using simple " (tt "defmacro") "s.  In this post I'll show how you can easily write ER-like macros in PLT, just so I won't need to explain the same thing once again.\n\nDisclaimers:" (ul (li "If you're not interested in ER-macros, then you shouldn't read this.") (li "I'm not claiming that ER macros are not respectable, I'm just surprised at the knee jerk reaction to " (tt "syntax-case") ".") (li "This is not an attempt at providing some portable library or even a PLT library. The intention is to show that " (tt "syntax-case") "-style macros are \"as convenient\" as ER macros, if you really want to get down to that level.") (li "This is also not an attempt at any kind of formal claim of equivalence in any direction, only a demonstration that you can get the same kind of convenience.") (li "The bottom line here should be just the convenience point, addressed at people who like ER macros for that, and who think that " (tt "syntax-case") " macros are somehow magical or that you lose the ability to play with S-expressions.")) "\n\nThe important fact here is that while PLT's " (tt "syntax-case") " macro system does not give you raw S-expressions, what you get is a simple wrapper holding them.  A macro is a syntax transformer: a function that consumes a syntax value and returns one.  For example:" (pre "  (define-syntax (foo stx)\n    #'123)") "is a macro that always expands to 123 (with " (tt "#'123") " being the usual shorthand for " (tt "(syntax 123)") ").\n\nA syntax object in PLT Scheme (the input to macro functions) is an S-expression, with some lexical information added " 8212 " this includes the lexical context (in an opaque form), source location, and a few more things.  To be more precise, a syntax value is a nested structure of wrappers holding lists and pairs, holding more wrappers, with identifiers at the leaves, where an identifier is a wrapper holding a symbol.  It's easy to strip off all wrappers using " (tt "syntax-" ">" "datum") " if you like to work with S-expressions, but you " (em "don't") " want to strip it off of identifiers, since that will lose the important gravy.  (In fact, the " (tt "defmacro") " library works by stripping off all information, even from identifiers, then reconstructing it by trying to match names in the output form with the original input.)\n\nInstead of throwing away all information, what we want to do is preserve identifiers.  We can use " (tt "syntax-" ">" "list") " for this: this is a function that takes a syntax value that contains a list, and strips off the top-level extra information leaving you with a list of syntaxes for the sub-expressions (returning " (tt "#f") " if the input syntax does not hold a list).  Once we have such a list, we can do the usual kind of processing with it, and when we're done turn the result back into a syntax using " (tt "datum-" ">" "syntax") " (which \"borrows\" the original input expression's information).  For example," (pre "  (define-syntax (add1 stx)\n    (let ([+ #'+])\n      (datum-" ">" "syntax stx `(,+ 1 ,@(cdr (syntax-" ">" "list stx))) stx)))") "That's a very simple example though; if you try something a little more complicated, you quickly find out that all this unwrapping is inconvenient:" (pre "  (define-syntax (mylet stx)\n    (let ([*lambda #'lambda])\n      (datum-" ">" "syntax\n       stx\n       `((,*lambda ,(map (lambda (x) (car (syntax-" ">" "list x)))\n                         (syntax-" ">" "list (cadr (syntax-" ">" "list stx))))\n                   ,@(cddr (syntax-" ">" "list stx)))\n         ,@(map (lambda (x) (cadr (syntax-" ">" "list x)))\n                (syntax-" ">" "list (cadr (syntax-" ">" "list stx)))))\n       stx)))") "(Note also the " (tt "*lambda") " that is used to avoid the " (tt "lambda") " expressions used in the meta-code.)\n\nWhat can help here is some helper function that receive a syntax value as its input, and turn all wrapped lists into real lists recursively, but will leave identifiers intact:" (pre "  (begin-for-syntax\n    (define (strip stx)\n      (let ([maybe-list (syntax-" ">" "list stx)])\n        ;; syntax-" ">" "list returns #f if the syntax is not a list\n        (if maybe-list (map strip maybe-list) stx))))") "But as long as we're writing a syntax utility, we can make it do a litte more work: feed the resulting tree to " (em "your") " transformer, grab its result, and do the necessary " (tt "datum-" ">" "syntax") " voodoo on it:" (pre "  (begin-for-syntax\n    (define (er-like-transformer transformer)\n      (define (strip stx)\n        (let ([maybe-list (syntax-" ">" "list stx)])\n          ;; syntax-" ">" "list returns #f if the syntax is not a list\n          (if maybe-list (map strip maybe-list) stx)))\n      (lambda (stx)\n        (datum-" ">" "syntax stx (transformer (strip stx)) stx))))") "\n\nWith this utility defined, the above macro becomes much easier to deal with:" (pre "  (define-syntax mylet\n    (er-like-transformer\n     (lambda (exp)\n       (let ((vars  (map car (cadr exp)))\n             (inits (map cadr (cadr exp)))\n             (body  (cddr exp)))\n         `((,(syntax lambda) ,vars ,@body)\n           ,@inits)))))") "...and this is almost identical to the explicit renaming version of the macro; for example, compare it with the sample code in the " (a ((href "http://groups.csail.mit.edu/mac/projects/scheme/documentation/scheme_3.html#SEC49")) "MIT-Scheme manual") ".  The only change is that " (tt "(rename 'lambda)") " is replaced with " (tt "(syntax lambda)") ".\n\nObviously, this is very close, but doesn't show intentional captures.  So I just grabbed the " (tt "loop") " example from the same page, and did the same change " 8212 " only this time I used " (tt "#'foo") " instead of " (tt "(syntax foo)") " (and I also changed the one-sided " (tt "if") " to a " (tt "when") ").  The resulting macro works fine:" (pre "  (define-syntax loop\n    (er-like-transformer\n     (lambda (x)\n       (let ((body (cdr x)))\n         `(,#'call-with-current-continuation\n           (,#'lambda (exit)\n            (,#'let ,#'f () ,@body (,#'f))))))))\n  \n  (define-syntax while\n    (syntax-rules ()\n      ((while test body ...)\n       (loop (when (not test) (exit #f))\n             body ...))))\n  \n  (let ((x 10))\n    (while (" ">" " x 0)\n      (printf \"~s\\n\" x)\n      (set! x (- x 1))))") "\n\nThis is pretty close to a library, and indeed, as I was writing this text I found " (a ((href "http://www.mail-archive.com/larceny-users@lists.ccs.neu.edu/msg00097.html")) "a post by Andre van Tonder") " on the Larceny mailing list that uses a very similar approach and " (em "does") " make a library out of it.  This is done by adding two arguments to the expected ER-transformation function " 8212 " one is a " (tt "rename") " function (since the above method uses " (tt "syntax") " it is limited to immediate identifiers), and the other is always passed as " (tt "free-identifier=?") ".  Such a compatibility library is, however, not the purpose of this post.\n\nFinally, there is still a minor issue with this " 8212 " PLT has an implicit " (tt "#%app") " which is used wherever there are parentheses that stand for a function application " 8212 " and in this code they are used unhygienically.  This is usually not a noticeable problem, and if it is, you can add explicit " (tt "#%app") "s.  It might also be possible to find a more proper solution (e.g., use a hash table to keep track of lists that were disassembled by the client transformer), but at this point it might be better to just use the more natural " (tt "syntax-case") " anyway.") (link ((href "http://blog.racket-lang.org/feeds/1513383412261723218/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=1513383412261723218") (rel "replies") (title "4 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1513383412261723218") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1513383412261723218") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/05/explicit-renaming-macros-implicitly.html") (rel "alternate") (title "Explicit Renaming Macros; Implicitly") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_lx1aK_XwT-o/SxSPoMzJgLI/AAAAAAAAAA8/v5ASXddGsSc/s32-R/eli-small.jpg") (width "28")))) (thr:total "4")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6629705111318307010") (published "2009-05-18T16:48:00.000-04:00") (updated "2009-05-18T16:50:22.523-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "macros"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "delimited continuations"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "serialization"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "continuations"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "web-server"))) (title ((type "text")) "The Two State Solution: Native and Serializable Continuations in the PLT Web Server") (post-content (p "One of the annoyance of the " (a ((href "http://docs.plt-scheme.org/web-server/stateless.html")) "stateless Web application") " language that comes with the PLT Web Server is that you can't call " (em "third-party higher-order library procedures with arguments that try to capture serializable continuations") ". (I know, you try to do that all the time.) For example:") "\n\n" (pre "\n(build-list\n 3\n (lambda (i)\n   (call-with-serializable-current-continuation\n    (lambda (k) (serialize k)))))\n") "\n\n" (p "The problem is that the stateless language performs a transformation on your program to extract the continuations into a serializable representation. If you really need to do this, we've developed a compromise called \"The Two State Solution\": one state on the client and the other on the server. Only the third-party parts of the continuation (in this case, the code inside " (code "build-list") ") are stored on the server; everything else is shipped to the client. You just need to annotate your code slightly to indicate where the transition is:") "\n\n" (pre "\n(serial->native\n (build-list\n  3\n  (lambda (i)\n    (native->serial\n     (call-with-serializable-current-continuation\n      (lambda (k) (serialize k)))))))\n") "\n\n" (p (code "serial->native") " signals the transition to the third-party and " (code "native->serial") " signals the transition back.") "\n\n" (p "It is still a little annoying to find when you've called these " (em "third-party higher-order library procedures with arguments that try to capture serializable continuations") ", so there's a simple macro that provides a transitioning wrapper for you:") "\n\n" (pre "(define-native (build-list/native _ ho) build-list)") "\n\n" (p "expands to:") "\n\n" (pre "\n(define (build-list/native fst snd)\n  (serial->native\n   (build-list\n    fst\n    (lambda args\n      (native->serial\n       (apply snd args))))))\n") "\n\n" (p "This new feature is documented in the " (a ((href "http://faculty.cs.byu.edu/~jay/plt-doc/web-server/stateless.html#(part._.Serializable_.Continuations)")) "online manual") ", of course.")) (link ((href "http://blog.racket-lang.org/feeds/6629705111318307010/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=6629705111318307010") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/6629705111318307010") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/6629705111318307010") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/05/two-state-solution-native-and.html") (rel "alternate") (title "The Two State Solution: Native and Serializable Continuations in the PLT Web Server") (type "text/html"))) (author (name "Jay McCarthy") (uri "https://plus.google.com/101670206687664104937") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh3.googleusercontent.com/-13KUDv8LhZw/AAAAAAAAAAI/AAAAAAAAAAA/7MdiB5POU5k/s32-c/photo.jpg") (width "32")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4752160555167530543") (published "2009-05-18T16:47:00.000-04:00") (updated "2012-06-24T22:25:16.630-04:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "soft-state"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "web-server"))) (title ((type "text")) "Soft State in the PLT Web Server") (post-content "Many Web applications and network protocols have values in the continuation that are necessary to complete the computation, but that may be recomputed if they are not available. This is \"soft state\"." (br) "\nFor example, a Web application may cache a user's preferences from a database and deliver it to a Web browser as a hidden value; when the value is returned to the application in subsequent steps, it is used to customize the display. However, if the preferences were not available (or were corrupted in some way), the application could retrieve them from the database." (br) "\nWhen using the PLT Web Server's native continuations, this roughly corresponds to the use of a " (em "weak box") ": a box that the GC is allowed to erase the contents of. When using the PLT Web Server's serializable continuations it roughly corresponds to a weak box and a " (em "weak hash table") " (that holds its keys weakly) to give the box a serializable value as an identifier." (br) "\nThis programming pattern is a bit difficult to get right. So, a library that implements it is now provided with PLT Scheme: " (a ((href "http://faculty.cs.byu.edu/~jay/plt-doc/web-server/stateless.html#(part._.Soft_.State)")) (code "web-server/lang/soft")) "." (br) "\nHere's a trivial example:" (br) "\n" (pre "#lang web-server\n\n(provide interface-version start)\n(define interface-version 'stateless)\n\n(define softie\n  (soft-state\n   (printf \"Doing a long computation...~n\")\n   (sleep 1)))\n\n(define (start req)\n  (soft-state-ref softie)\n  (printf \"Done~n\")\n  (start\n   (send/suspend\n    (lambda (k-url)\n      `(html (body (a ([href ,k-url]) \"Done\")))))))\n")) (link ((href "http://blog.racket-lang.org/feeds/4752160555167530543/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=4752160555167530543") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/4752160555167530543") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/4752160555167530543") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/05/soft-state-in-plt-web-server.html") (rel "alternate") (title "Soft State in the PLT Web Server") (type "text/html"))) (author (name "Jay McCarthy") (uri "https://plus.google.com/101670206687664104937") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh3.googleusercontent.com/-13KUDv8LhZw/AAAAAAAAAAI/AAAAAAAAAAA/7MdiB5POU5k/s32-c/photo.jpg") (width "32")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1921164854547299677") (published "2009-05-18T13:10:00.002-04:00") (updated "2012-06-24T21:55:18.429-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "scheme-workshop"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "academic"))) (title ((type "text")) "Scheme Workshop: deadline NOT extended!") (post-content (p "We're holding the line on our submission deadline; it's still June 5, so that gives you about three weeks to write something awesome.") "\n\n" (p "Re-posting the entire CfP on a blog seems a bit tacky, so instead I'll just post the link:") "\n\n" (p (a ((href "http://blog.plt-scheme.org/2009/01/cfp-scheme-workshop-2009.html")) "\nhttp://blog.plt-scheme.org/2009/01/cfp-scheme-workshop-2009.html")) "\n\n" (p "We look forward to your submissions!")) (link ((href "http://blog.plt-scheme.org/2009/01/cfp-scheme-workshop-2009.html") (rel "related") (title "Scheme Workshop: deadline NOT extended!"))) (link ((href "http://blog.racket-lang.org/feeds/1921164854547299677/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=1921164854547299677") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1921164854547299677") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1921164854547299677") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/05/scheme-workshop-deadline-not-extended.html") (rel "alternate") (title "Scheme Workshop: deadline NOT extended!") (type "text/html"))) (author (name "John Clements") (uri "https://www.blogger.com/profile/10401643794201938443") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2334413198277409498") (published "2009-05-06T08:58:00.001-04:00") (updated "2009-05-06T09:00:14.107-04:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "channels"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "continuations"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "threads"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "web-server"))) (title ((type "text")) "What is send/suspend?") (post-content (p "I often ponder what " (a ((href "http://docs.plt-scheme.org/web-server/servlet.html#(def._((lib._web-server/servlet/web..ss)._send/suspend))")) (code "send/suspend")) " really is. It is a lot like " (code "call/cc") ", but has the curious property that the continuation escapes in a single way and is only called in a particular context. I often wonder if there is something weaker than " (code "call/cc") " that implements " (code "send/suspend") ".") "\n\n" (p "Today I wrote a little dispatcher that uses threads to implement " (code "send/suspend") ". In this implementation, " (em "send") "ing truly " (em "suspend") "s the computation.") "\n\n" (p "Here's the code: " (a ((href "http://www.copypastecode.com/codes/view/5003")) "http://www.copypastecode.com/codes/view/5003")) "\n\n" (p "The trick is to have channels for communicating responses and requests. When you run this example, you should be able to add two numbers. But, in contrast to the normal " (code "send/suspend") ", all the URLs are one-shots, because once the computation is resumed, it moves forward... it is never saved.") "\n\n" (p "This implementation technique also precludes clever implementations of " (code "send/suspend/dispatch") ", like:") "\n" (pre "\n(define (send/suspend/dispatch mk-page)\n  (let/cc k0\n    (send/back\n     (mk-page\n      (lambda (handler)\n        (let/ec k1 \n          (k0 (handler (send/suspend k1)))))))))\n")) (link ((href "http://blog.racket-lang.org/feeds/2334413198277409498/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=2334413198277409498") (rel "replies") (title "1 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2334413198277409498") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2334413198277409498") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/05/what-is-sendsuspend.html") (rel "alternate") (title "What is send/suspend?") (type "text/html"))) (author (name "Jay McCarthy") (uri "https://plus.google.com/101670206687664104937") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh3.googleusercontent.com/-13KUDv8LhZw/AAAAAAAAAAI/AAAAAAAAAAA/7MdiB5POU5k/s32-c/photo.jpg") (width "32")))) (thr:total "1")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8595329905636585805") (published "2009-03-29T13:03:00.004-04:00") (updated "2012-06-24T22:24:10.071-04:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "drracket"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "tools"))) (title ((type "text")) "the DrScheme repl isn't the one in Emacs") (post-content "Dear old Lisper,\n\n" (div (p "You have found drscheme and it is almost like your old Lisp machine.\nIt is easy to program in it, it has things that nobody else has, and\nwe all love parentheses. But after some initial enthusiasm you\nare wondering why in the world, we decided not to provide\ncommands for sending individual definitions and expressions\nfrom the Definitions window to the Interactions window, aka,\nREPL.") "\n\n" (div (p "It wasn't an accident. It was by design after some difficult\nexperiences. I am personally a product of the Emacs world that you are describing below,\nand my advisor Dan Friedman was called the \"Lispman\" on his door\nsign at Indiana.") "\n\n" (p "When I first discovered the idea of sending individual expressions\nand definitions from a buffer to a repl, it was a near-religious\nrevelation to me. I wanted everyone to know this trick and use it.\nWhen I started teaching the freshman course at Rice, I told our\nchairman so and he asked \"why\". I was shocked, awed, and I failed\nto explain to him how it mattered. He was a mathematician and I\nwrote it off. They don't know.") "\n\n" (p "Then I started watching my sophomores and juniors at Rice in lab.\nNow that was a true disappointment. Few if any used this trick and\nwhen they did, they more often tripped up and got the repl into a\nstate where they didn't know what was going on.") "\n\n" (p "In the mid 90s, I wrote some more Little books with Dan, and boy,\ntime and again, I watched him stumble across the state of the repl.\nI even watched him re-start the repl and load the whole buffer more\noften than not.") "\n\n" (p "Why? In the presence of macros and higher-order functions and\nother beasts, it is difficult for masters of the universe with 30\nyears of experience to keep track of things. What do you think\nstudents with 10 or 20 days worth of experience will do? Is it\nreally such a deep principle of computing to create the objects\nincrementally in the repl as opposed to thinking systematically\nthrough the design of a program?") "\n\n" (p "I decided not and asked Robby to make DrScheme's repl transparent.\nThat is, it re-starts the repl and re-loads the buffer every time.\nI consider this behavior a suitable compromise: have a repl but\ndon't confuse yourself with send-defs and send-exprs. This is\nespecially true in an age when sending an entire buffer takes as\nmuch time as sending an individual expression or definition.\nSoon we'll get \"compilation behind your back\" so that only the\ncurrent buffer is re-interpreted. It'll start things even faster.") "\n\n" (p "Even though I had used the incremental mode for more than a decade\nwhen I switched from Emacs to DrScheme in 1998, I have hardly ever\nlooked back. I miss a few other things but the incremental repl\nis one of those rituals old Lispers acquired and never questioned\n... but it isn't fundamental and critical to anything. (Note\nthere is no qualifying clauses, no when no if no but. I really mean\nthis last sentence the way I spelled it.)")))) (link ((href "http://blog.racket-lang.org/feeds/8595329905636585805/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=8595329905636585805") (rel "replies") (title "30 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/8595329905636585805") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/8595329905636585805") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html") (rel "alternate") (title "the DrScheme repl isn't the one in Emacs") (type "text/html"))) (author (name "matthias") (uri "https://www.blogger.com/profile/00000181081270224360") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.ccs.neu.edu/home/matthias/Images/felleisen1.jpg") (width "23")))) (thr:total "30")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-109123988427683012") (published "2009-03-22T01:29:00.001-04:00") (updated "2011-11-09T22:52:20.886-05:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "release"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "PLT Scheme v4.1.5") (post-content "PLT Scheme version 4.1.5 is now available from\n" (pre "  " (a ((href "http://plt-scheme.org/")) "http://plt-scheme.org/")) "\n" (ul (li "Web Server:" (ul (li "new URL-based dispatching library " (tt "web-server/dispatch") ",") (li "customizable continuation serialization policies for the stateless web language " (tt "web-server/stuffers") ",") (li "abstraction of serve/servlet to build simpler dispatchers " (tt "web-server/servlet-env") ",") (li "HTTP Digest authentication support " (tt "web-server/http/digest-auth") ",") (li "built-in cookie support in " (tt "web-server/http/cookie") " and " (tt "web-server/http/cookie-parse") ",") (li "highlighting and pretty-printing of errors in Xexpr constructions,") (li "load control dispatcher for limit concurrent sessions " (tt "web-server/dispatchers/limit") "."))) "\n" (li "Scribble:" (ul (li "Literate programming is now available using the new " (tt "scribble/lp") " language.") (li "A new " (tt "at-exp") " language makes it convenient to use the scribble reader's @-expressions for general code.") (li "The " (tt "scribble/text") " preprocessor language has been extended to deal with indentation and other formatting issues.") (li "The \"scribble\" command-line tool accepts a " (tt "--pdf") " flag to render PDFs (via pdflatex)."))) "\n" (li "DrScheme now provides feedback when PLaneT downloads and installs new packages.") "\n" (li "Units " "&" " Contracts:" (ul (li "Elements of unit signatures can now be associated with contracts via the " (tt "contracted") " signature form.") (li "A contract combinator for units, " (tt "unit/c") ", has been added.") (li "The new " (tt "with-contract") " form provides a nestable submodule contract boundary, protecting a group of definitions from the surrounding code with contracts.") (li "The " (tt "define/contract") " form has been reworked and new define forms have been added: " (tt "define-struct/contract") " and " (tt "define-unit/contract") "."))) "\n" (li "Language levels and teachpacks from the DeinProgramm project for the German textbook \"Die Macht der Abstraktion\" by Herbert Klaeren and Michael Sperber have been added.") "\n" (li "Misc:" (ul (li "Typed Scheme now comes with several more pre-wrapped libraries, found in the " (tt "typed") " collection.") (li "The " (tt "xml") " and " (tt "html") " collections are now contracted.") (li "Binding parsing in net/cgi now interacts with " (tt "net/uri-codec") "'s configuration parameters.") (li "DrScheme captures logging output.") (li "Check syntax: it is now possible to tack arrows crossing the currently selected text.") (li "New " (tt "bitwise-bit-field") " function."))) "\n" (li "The usual pile of bugfixes.  (Notable: " (tt "scheme/package") " works, " (tt "deflate") " compression fixed, DrScheme language dialog issue resolved, " (tt "match") " fixes, Windows networking, and much more.)") "\n") "\n\n[Note that mirror sites can take a while to catch up with the new downloads.]\n\nFeedback Welcome.") (link ((href "http://plt-scheme.org/") (rel "related") (title "PLT Scheme v4.1.5"))) (link ((href "http://blog.racket-lang.org/feeds/109123988427683012/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=109123988427683012") (rel "replies") (title "3 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/109123988427683012") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/109123988427683012") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/03/plt-scheme-v415.html") (rel "alternate") (title "PLT Scheme v4.1.5") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_lx1aK_XwT-o/SxSPoMzJgLI/AAAAAAAAAA8/v5ASXddGsSc/s32-R/eli-small.jpg") (width "28")))) (thr:total "3")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7043792165582137178") (published "2009-03-12T16:35:00.030-04:00") (updated "2009-03-13T17:22:06.108-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "scribble"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "planet"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "documentation"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "self-reference"))) (title ((type "text")) "Maintaining self-references in Planet packages") (post-content (p "\n" (a ((href "http://docs.plt-scheme.org/planet/index.html")) "PLaneT packages") " may refer to themselves (i.e. include " (a ((href "http://docs.plt-scheme.org/guide/module-paths.html")) "module paths") " referring to some part of the same package) for a number of reasons. One module may " (a ((href "http://docs.plt-scheme.org/reference/require.html#%28form._%28%28lib._scheme/base..ss%29._require%29%29")) (span ((style "font-family:courier new;")) "require")) " another. " (a ((href "http://docs.plt-scheme.org/scribble/index.html")) "Scribble") " documentation traces " (a ((href "http://docs.plt-scheme.org/reference/require.html#%28form._%28%28lib._scheme/base..ss%29._for-label%29%29")) (span ((style "font-family:courier new;")) "for-label")) " imports to construct hypertext links. DrScheme " (a ((href "http://docs.plt-scheme.org/tools/adding-languages.html")) "language levels") " may " (a ((href "http://docs.plt-scheme.org/tools/drscheme_language.html#%28meth._%28%28%28lib._drscheme/tool-lib..ss%29._drscheme%7E3alanguage%7E3asimple-module-based-language%7E3c%7E25%7E3e%29._get-module%29%29")) "provide a module path") " for an initial " (a ((href "http://docs.plt-scheme.org/guide/eval.html#%28part._namespaces%29")) "namespace") ".\n") (p "\nIn each of these cases, we want the module path to refer to the " (a ((href "http://docs.plt-scheme.org/planet/Using_PLaneT.html#%28part._.Fine-.Grained_.Control_.Over_.Package_.Imports%29")) "same version") " of the same package that it occurs in. On the other hand, we do not want to have to manually search and replace the version number every time we update. Before I solved this problem I would often release some new version x.0 of a package, only to find some lingering dependency on y.0 that my search/replace had not caught. Of course, then I had to go back and replace all occurrences of both x.0 " (i "and") " y.0 with x.1 and release again. To avoid this headache, we need a way to express self-referential module paths with precise, implicit version numbers.\n") (p "\nThe built-in module paths don't quite support this. The relevant forms are PLaneT paths with version numbers, PLaneT paths without version numbers, and relative paths:\n") "\n" (blockquote (pre "\n(planet my/package:1:0/dir/file)\n(planet my/package/dir/file)\n\"../dir/file.ss\"\n")) "\n" (p "\nPLaneT paths with version numbers suffer from the search and replace problem: they become obsolete, and must be changed with every new release.\n") (p "\nPLaneT paths " (i "without") " version numbers \"upgrade\" with a new release: they automatically refer to the latest version of a package.  Unfortunately, this means they aren't really \"self\"-references.  As soon as version 2.0 is released, every version-free reference to the package refers to 2.0.  Even the references in version 1.0 get implicitly updated, and become forward references rather than self-references.\n") (p "\nRelative paths are precise, in that they always refer to the same version of the same package. However, because they implicitly refer to the directory containing the source code, they are only valid within a single file.  They cannot be reliably passed to DrScheme for a language level namespace, traced for documentation links by Scribble, or used by other such external tools.\n") (p "\nNone of these options provides precise, stable, externally comprehensible, self-referential module paths.\n") (p "\nTo fill this need, I have released " (span ((style "font-family:courier new;")) "(planet " (a ((href "http://planet.plt-scheme.org/package-source/cce/scheme.plt/4/1/planet-docs/main/planet.html")) "cce/scheme:4:1/planet") ")") ". This module provides PLaneT package authors with several macros that construct references to the current package in require imports, Scribble documentation, and dynamic values.  The self-referential modules paths are constructed automatically at compile time based on the " (a ((href "http://docs.plt-scheme.org/reference/stxops.html")) "source location") " of the macro use and the " (a ((href "http://docs.plt-scheme.org/planet/search-order.html#%28part._.Acceptable_.Local_.Package%29")) "local PLaneT package database") ".  Their expanded form always includes an explicit package name and version number (both major and minor).  Here I will summarize their use, with " (span ((style "font-family:courier new;")) "(planet my/package:1:0/dir/file)") " as a running example.  For full details, see the " (a ((href "http://planet.plt-scheme.org/package-source/cce/scheme.plt/4/1/planet-docs/main/index.html")) "online documentation") " or install the " (a ((href "http://planet.plt-scheme.org/display.ss?package=scheme.plt&amp;owner=cce")) "package") ".\n") (p "\nTo import a module from within a PLaneT package, use the " (span ((style "font-family:courier new;")) "this-package-in") " require transformer.  To re-export bindings from a module imported this way, use the " (span ((style "font-family:courier new;")) "this-package-out") " provide transformer, or use " (span ((style "font-family:courier new;")) "require/provide/this-package") " in place of both.\n") (p "\nFor example, you might want to import and re-export bindings from " (span ((style "font-family:courier new;")) "dir/file") ":\n") "\n" (blockquote (pre "\n(require (planet my/package:1:0/dir/file))\n(provide (all-from-out (planet my/package:1:0/dir/file)))\n")) "\n" (p "\nYou can leave out the package name and version number, thus making the code invariant across upgrades, by writing:\n") "\n" (blockquote (pre "\n(require (this-package-in dir/file))\n(provide (this-package-out dir/file))\n")) "\n" (p "\nOr, you can further simplify it:\n") "\n" (blockquote (pre "\n(require/provide/this-package dir/file)\n")) "\n" (p "\nAll three of the above are equivalent (in version 1.0).\n") (p "\nIn Scribble documentation, a module often refers to itself via " (a ((href "http://docs.plt-scheme.org/scribble/doc-modules.html#%28form._%28%28lib._scribble/manual..ss%29._defmodule%29%29")) (span ((style "font-family:courier new;")) "defmodule")) ", " (a ((href "http://docs.plt-scheme.org/scribble/doc-modules.html#%28form._%28%28lib._scribble/manual..ss%29._declare-exporting%29%29")) (span ((style "font-family:courier new;")) "declare-exporting")) ", or " (a ((href "http://docs.plt-scheme.org/scribble/scribble_manual_code.html#%28form._%28%28lib._scribble/manual..ss%29._schememodname%29%29")) (span ((style "font-family:courier new;")) "schememodname")) ". I provide the extensions " (span ((style "font-family:courier new;")) "defmodule/this-package") ", " (span ((style "font-family:courier new;")) "declare-exporting/this-package") ", and " (span ((style "font-family:courier new;")) "schememodname/this-package") ", respectively. These macros allow the user to supply a path such as " (span ((style "font-family:courier new;")) "dir/file") ", or to omit one to refer to the package as a whole (or its main module). In positions where the original macros allow a sequence of module paths, these forms allow two sequences, one for self-referential module paths and one for other paths.\n") (p "\nTo document an entire module, one might first write:\n") "\n" (blockquote (pre "\n(defmodule (planet my/package:1:0))\n")) "\n" (p "\nThe automatic self-reference version is simply:\n") "\n" (blockquote (pre "\n(defmodule/this-package)\n")) "\n" (p "\nIn more complicated cases, one might document a sub-part of a package or present bindings from multiple sources:\n") "\n" (blockquote (pre "\n(defmodule (planet my/package:1:0/dir/file)\n  #:use-sources\n  [(planet my/package:1:0/private/impl) somewhere/else])\n")) "\n" (p "\nThese self-references can still be automated:\n") "\n" (blockquote (pre "\n(defmodule/this-package dir/file\n  #:use-sources\n  [private/impl]\n  [somewhere/else])\n")) "\n" (p "\nFinally, I provide " (span ((style "font-family:courier new;")) "this-package-version-symbol") " for constructing PLaneT package symbols as runtime values. This macro is analogous to " (a ((href "http://docs.plt-scheme.org/planet/Utility_Libraries.html#%28form._%28%28lib._planet/util..ss%29._this-package-version%29%29")) (span ((style "font-family:courier new;")) "this-package-version")) " from the " (a ((href "http://docs.plt-scheme.org/planet/Utility_Libraries.html#%28mod-path._planet/util%29")) (span ((style "font-family:courier new;")) "planet/util")) " collection, but it constructs a symbol rather than an s-expression. You can use this symbol to construct a module path for a DrScheme language level, or escape it with " (span ((style "font-family:courier new;")) "unsyntax") " in Scribble's " (a ((href "http://docs.plt-scheme.org/scribble/scribble_manual_code.html#%28form._%28%28lib._scribble/manual..ss%29._schemeblock%29%29")) (span ((style "font-family:courier new;")) "schemeblock")) " typesetting to create self-referential example code.\n") (p "\nThis list of utilities may not be complete. Users may need to write new macros for self-referential PLaneT packages. To that end, " (span ((style "font-family:courier new;")) "(planet " (a ((href "http://planet.plt-scheme.org/package-source/cce/scheme.plt/4/1/planet-docs/main/syntax.html")) "cce/scheme:4:1/syntax") ")") " provides " (span ((style "font-family:courier new;")) "syntax-source-planet-package") ". This function is analogous to " (a ((href "http://docs.plt-scheme.org/planet/Utility_Libraries.html#%28form._%28%28lib._planet/util..ss%29._this-package-version%29%29")) (span ((style "font-family:courier new;")) "this-package-version")) ", but operates on " (a ((href "http://docs.plt-scheme.org/guide/stx-obj.html")) "syntax objects") " and is designed to be used in " (a ((href "http://docs.plt-scheme.org/guide/proc-macros.html")) "macro transformers") ". There are also " (span ((style "font-family:courier new;")) "-owner") ", " (span ((style "font-family:courier new;")) "-name") ", " (span ((style "font-family:courier new;")) "-major") ", " (span ((style "font-family:courier new;")) "-minor") ", and " (span ((style "font-family:courier new;")) "-symbol") " versions following the same analogy.\n") (p "\nI find these tools useful for maintaining my PLaneT packages, and I hope other authors will too.  If you do give them a try, please send " (a ((href "http://planet.plt-scheme.org/trac/newticket")) "feedback") " on what does or doesn't work, or what might be improved.  I would eventually like to add a refined version to the PLT Scheme collections once we get enough experience to know that these tools are fairly complete and usable.\n")) (link ((href "http://planet.plt-scheme.org/package-source/cce/scheme.plt/4/1/planet-docs/main/planet.html") (rel "related") (title "Maintaining self-references in Planet packages"))) (link ((href "http://blog.racket-lang.org/feeds/7043792165582137178/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=7043792165582137178") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/7043792165582137178") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/7043792165582137178") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/03/maintaining-self-references-in-planet.html") (rel "alternate") (title "Maintaining self-references in Planet packages") (type "text/html"))) (author (name "Carl Eastlund") (uri "https://www.blogger.com/profile/00965085482378134816") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7760681962699675417") (published "2009-02-24T16:06:00.004-05:00") (updated "2012-06-24T22:23:35.339-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "hacking"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "typed-racket"))) (title ((type "text")) "Call for Participation: Writing Typed Scheme wrapper modules") (post-content (p "Typed Scheme is a language for writing PLT Scheme programs that are statically checked for type errors.  Right now, Typed Scheme handles a large portion of the PLT Scheme language.  However, to use Typed Scheme effectively, we need libraries that work with it.  For this task, we're looking for help.\n") "\n\n" (p "\nWe'd like volunteers for writing wrapper modules that adapt untyped libraries to Typed Scheme. This task is very easy for the smallest libraries, but can be  much more complicated for larger, complex libraries.\n") "\n\n" (p "\nThere's a preliminary guide for conversion " (a ((href "http://www.ccs.neu.edu/home/samth/adapt/")) "here") " and a list of modules to adapt, and their current status is available " (a ((href "http://www.ccs.neu.edu/home/samth/adapt/Current_Status.html")) "here") ".\n") "\n\n" (p "\nQuestions about this project, and about developing with Typed Scheme in general, can be asked on " (a ((href "mailto:plt-dev@list.cs.brown.edu")) "plt-dev@list.cs.brown.edu") " , and questions or comments can be sent directly to me.\n") "\n\n" (p "\nWe hope to continue making Typed Scheme into a useful tool for PLT Scheme programmers.\n") "\n\n" (p "\nThanks," (br) "\nSam, Stevie, and Matthias")) (link ((href "http://blog.racket-lang.org/feeds/7760681962699675417/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=7760681962699675417") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/7760681962699675417") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/7760681962699675417") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/02/call-for-participation-writing-typed.html") (rel "alternate") (title "Call for Participation: Writing Typed Scheme wrapper modules") (type "text/html"))) (author (name "Sam Tobin-Hochstadt") (uri "https://www.blogger.com/profile/12049111326816937908") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3951894341706705897") (published "2009-02-18T10:49:00.003-05:00") (updated "2012-06-24T21:57:06.114-04:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "meta"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Steering Scheme") (post-content (p "Election time is here again. A couple more days and the Scheme community\nwill have a set of new steer-ers.\n\n" (p (span ((style "font-weight:bold;")) "What should we want from a steering committee? ") "\n\n" (p "I have argued at this place before that good language design needs a\nfeedback loop. Language designers write down specs; language implementers\ntranslate those specs into compilers and interpreters; programmers use\nthese implementations to produce useful software. The loop comes in when\nimplementers inform designers of flaws, inconsistencies, mistakes, errors,\nand other internal consistency problems in the specs. This is clearly\nhappening with R6RS, and it is good. Implementers are a biased bunch,\nhowever. After all, they work on just one kind of program, and in a highly\nspecialized domain that has been mined for a long time. How can you trust\nthem? [*]\n\n" (p "The loop becomes truly useful when people write large software systems (not\njust compilers, because they really are special cases!)  and find that the\nlanguage fails them in some way. Such failures can come in a number of\nflavors. For a document such as R6RS, we should hope that programmers can\ndiscover problems with porting systems that are apparently due to\nambiguities, flaws, mistakes, roaches in the actual document (as opposed to\na specific implementation). \n\n" (p (span ((style "font-weight:bold;")) "So what does this have to do with the steering committee? ") "\n\n" (p "The last thing we want from a steering committee is a radical commitment to\nchange (whatever it may be); a prejudice concerning R6RS; a closed\nmind about the size of \"Scheme\" (it's too large, it's too small); a\nwillingness to steer without making observations. A steering committee\nof overbearing curmudgeons is " (em "not") " what we want. \n\n" (p "What we do want is a committee that is willing to figure out how the\nlistening is going to happen; how we can possibly finance a systematic way\nof listening (writing NSF grants, anyone?); how the feedback is best\nchanneled into language design. \n\n" (p "Let's hope we get such a  steering committee. The Scheme community deserves it. \n\n" (hr " \n\n[*] No I am not naive enough to think that language implementers don't\ndesign languages, and that implementers don't program systems other than\nimplementations. I am just skeptical that it is easy for them to separate\nout their various roles in an objective manner, even if many of them are\nable to think at several different levels about programs.")))))))))) (link ((href "http://blog.racket-lang.org/feeds/3951894341706705897/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=3951894341706705897") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/3951894341706705897") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/3951894341706705897") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/02/steering-scheme.html") (rel "alternate") (title "Steering Scheme") (type "text/html"))) (author (name "matthias") (uri "https://www.blogger.com/profile/00000181081270224360") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.ccs.neu.edu/home/matthias/Images/felleisen1.jpg") (width "23")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8477303771310449675") (published "2009-02-14T23:35:00.010-05:00") (updated "2012-06-24T21:57:20.352-04:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "new-feature"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "units"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "contracts"))) (title ((type "text")) "New Contract-Related Features") (post-content (p "In SVN I've added three new major features that involve contracts. One allows for more fine-grained control of contracts, and the other two allow for the use of contracts with signatures and units.") (h4 "Contract Regions") (p (em "Contract regions") " allow the programmer to protect a region of code with a contract boundary.  In addition to the wrapped code, the programmer also provides a name for the region which is used in blame situations and a list of exported variables which can either be protected with contracts or unprotected.  The region provides a true contract boundary, in that uses of contracted exports within the region are unprotected.  Contract regions are specified with the " (code "with-contract") " form.  The following contract region defines two mutually recursive functions:") (blockquote (pre "(with-contract region1\n ([f (-> number? boolean?)]\n  [g (-> number? boolean?)])\n (define (f n) (if (zero? n) #f (g (sub1 n))))\n (define (g n) (if (zero? n) #t (f (sub1 n)))))\n")) (p "The internal calls to " (code "f") " and " (code "g") " are uncontracted, but calls to " (code "f") "and " (code "g") " outside this region would be appropriately contracted.  First-order checks are performed at the region, so the\nfollowing region:") (blockquote (pre "(with-contract region2\n ([n number?])\n (define n #t))\n")) (p "results in the following error:") (blockquote (code "(region region2) broke the contract number? on n; expected " "<" "number?" ">" ", given: #t")) (p "Notice that the blame not only gives the name of the region, but describes what type of contract boundary was involved.") (p "For contracting a single definition, there is the " (code "define/contract") " form which has a similar syntax to define, except that it takes a\ncontract before the body of the definition.  To compare the two forms, the following two definitions are equivalent:") (blockquote (pre "(with-contract fact\n ([fact (-> number? number?)])\n (define (fact n)\n   (if (zero? n) 1 (* n (fact (sub1 n))))))\n\n(define/contract (fact n)\n (-> number? number?)\n (if (zero? n) 1 (* n (fact (sub1 n)))))\n")) (p "First order checks are similarly performed at the definition for\n" (code "define/contract") ", so") (blockquote (pre "(define/contract (fact n)\n (-> number?)\n (if (zero? n) 1 (* n (fact (sub1 n)))))\n")) (p "results in") (blockquote (code "(function fact) broke the contract (-> number?) on fact; expected a procedure that accepts no arguments without any keywords, given: #" "<" "procedure:fact" ">")) (h4 "Signature Contracts") (p "In addition to contract regions, units are also now contract boundaries.  One way to use contracts with units is to add contracts to unit signatures via the contracted " (code "signature") " form.") (blockquote (pre "(define-signature toy-factory^\n ((contracted\n   [build-toys (-> integer? (listof toy?))]\n   [repaint    (-> toy? symbol? toy?)]\n   [toy?       (-> any/c boolean?)]\n   [toy-color  (-> toy? symbol?)])))\n")) (p "Notice that contracts in a signature can use variables listed in the signature.") (p "Now if we take the following implementation of that signature:") (blockquote (pre "(define-unit simple-factory@\n (import)\n (export toy-factory^)\n  \n (define-struct toy (color) #:transparent)\n  \n (define (build-toys n)\n   (for/list ([i (in-range n)])\n     (make-toy 'blue)))\n  \n (define (repaint t col)\n   (make-toy col)))\n")) (p "We get the appropriate contract checks on those exports:") (blockquote (pre "> (define-values/invoke-unit/infer simple-factory@)\n> (build-toys 3)\n(#(struct:toy blue) #(struct:toy blue) #(struct:toy blue))\n> (build-toys #f)\ntop-level broke the contract (-> integer? (listof toy?))\n on build-toys; expected " (integer ">, given: #f\n") ">")) (p "As before, uses of contracted exports inside the unit are not checked.") (p "Since units are contract boundaries, they can be blamed appropriately.  Take the following definitions:") (blockquote (pre "(define-unit factory-user@\n (import toy-factory^)\n (export)\n (let ([toys (build-toys 3)])\n   (repaint 3 'blue)))\n\n(define-compound-unit/infer factory+user@\n (import) (export)\n (link simple-factory@ factory-user@))\n")) (p "When we invoke the combined unit:") (blockquote (pre "> (define-values/invoke-unit/infer factory+user@)\n(unit factory-user@) broke the contract\n (-> toy? symbol? toy?)\non repaint; expected " (toy ">, given: 3\n") ">")) (h4 "Unit Contracts") (p "However, we may not always be able to add contracts to signatures.  For example, there are many already-existing signatures in PLT Scheme that one may want to implement, or a programmer may want to take a unit value and add contracts to it after the fact.") (p "To do this, there is the " (code "unit/c") " contract combinator.  It takes a list of imports and exports, where each signature is paired with a list of variables and their contracts for each signature.  So if we had the uncontracted version of the toy-factory^ signature:") (blockquote (pre "(define-signature toy-factory^\n (build-toys repaint toy? toy-color))\n")) (p "the following contracts would be appropriate for a unit that imports nothing and exports that signature:") (blockquote (pre "(unit/c (import) (export))\n(unit/c (import) (export toy-factory^))\n(unit/c\n (import)\n (export (toy-factory^\n          [toy-color (-> toy? symbol?)])))\n(unit/c\n (import)\n (export (toy-factory^\n          [build-toys (-> integer? (listof toy?))]\n          [repaint    (-> toy? symbol? toy?)]\n          [toy?       (-> any/c boolean?)]\n          [toy-color  (-> toy? symbol?)])))\n")) (p "Unit contracts can contain a superset of the import signatures and a subset of the export signatures for a given unit value.  Also, variables that are not listed for a given signature are left alone when the contracts are being added.") (p "Since the results of applying " (code "unit/c") " is a new unit, then adding a contract can cause link inference to fail.  For example, if we change the definition of " (code "simple-factory@") " above to") (blockquote (pre "(define/contract simple-factory@\n (unit/c\n  (import)\n  (export (toy-factory^\n           [build-toys (-> integer? (listof toy?))]\n           [repaint    (-> toy? symbol? toy?)]\n           [toy?       (-> any/c boolean?)]\n           [toy-color  (-> toy? symbol?)])))\n (unit\n   (import)\n   (export toy-factory^)\n  \n   (define-struct toy (color) #:transparent)\n  \n   (define (build-toys n)\n     (for/list ([i (in-range n)])\n       (make-toy 'blue)))\n  \n   (define (repaint t col)\n     (make-toy col))))\n")) (p "Then when we try to combine it with the " (code "factory-user@") " unit, we\nget:") (blockquote (code "define-compound-unit/infer: not a unit definition in: simple-factory@")) (p "One way to solve this is to use " (code "define-unit-binding") " to set up the static information for the new contracted value.  Another possibility for unit definitions is to use " (code "define-unit/contract") ":") (blockquote (pre "(define-unit/contract simple-factory@\n (import)\n (export (toy-factory^\n          [build-toys (-> integer? (listof toy?))]\n          [repaint    (-> toy? symbol? toy?)]\n          [toy?       (-> any/c boolean?)]\n          [toy-color  (-> toy? symbol?)]))\n\n (define-struct toy (color) #:transparent)\n\n (define (build-toys n)\n   (for/list ([i (in-range n)])\n     (make-toy 'blue)))\n\n (define (repaint t col)\n   (make-toy col)))")) (p "More about these features can be found in the Reference, and a short section about signature and unit contracts has been added to the Guide.")) (link ((href "http://blog.racket-lang.org/feeds/8477303771310449675/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=8477303771310449675") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/8477303771310449675") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/8477303771310449675") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/02/new-contract-related-features.html") (rel "alternate") (title "New Contract-Related Features") (type "text/html"))) (author (name "Stevie") (uri "https://www.blogger.com/profile/08950188991093066574") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8396356645755951671") (published "2009-01-29T01:58:00.003-05:00") (updated "2012-06-24T21:57:31.678-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "scheme-workshop"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "academic"))) (title ((type "text")) "CfP: Scheme Workshop 2009!") (post-content (hr "\n" (h2 ((align "center")) "SCHEME AND FUNCTIONAL PROGRAMMING WORKSHOP 2009") "\n" (h3 ((align "center")) "Cambridge, Massachusetts") "\n" (h3 ((align "center")) " August 22, 2009") "\n" (h3 ((align "center")) "call for papers") "\n" (h3 ((align "center")) (a ((href "http://www.schemeworkshop.org/2009/")) "http://www.schemeworkshop.org/2009/")) "\n" (hr "\n\n\n" (p "The Scheme and Functional Programming Workshop\nshowcases research and experience related to Scheme,\nand more broadly to all aspects of functional\nprogramming.") "\n\n" (p "Areas of interest include:") "\n\n" (ul "\n" (li "Language Design, Type Systems, Theory") "\n" (li "Program Development Environments, Education") "\n" (li "Agile Methodologies, Lightweight Software Engineering") "\n" (li "Applications, Implementation, and Experience") "\n" (li "SRFIs!") "\n") "\n\n" (p "In addition to technical papers on matters of\nprogramming-language research, we encourage submissions\nthat present experience or innovation with a particular\nproject. The key criterion for any paper--technical or\nnot--is that it makes a contribution from which other\npractitioners can benefit.") "\n\n" (h4 "Dates:") "\n\n" (p "Dates are firm, and will not be extended.  Please plan\naccordingly.") "\n\n" (ul "\n  " (li "Submission Deadline: June 5, 2009 (FIRM)") "\n  " (li "Author Notification: June 26, 2009") "\n" (li "Final Papers Due: July 24, 2009") "\n" (li "Workshop: August 22, 2009") "\n") "\n\n" (h4 "Program Committee:") "\n\n" (ul "\n" (li "John Clements, Cal Poly State University (organizer " "&" " chair)") "\n" (li "Dominique Boucher, Nu Echo") "\n" (li "Abdulaziz Ghuloum, Indiana University") "\n" (li "David Herman, Northeastern University") "\n" (li "Shriram Krishnamurthi, Brown University") "\n" (li "Matthew Might, University of Utah") "\n" (li "David Van Horn, Northeastern University") "\n") "\n\n" (h4 "Publication Policy:") "\n\n" (p "Submitted papers must have content that has not\npreviously been published in other conferences or\nrefereed venues, and simultaneous submission to other\nconferences or refereed venues is unacceptable.") "\n\n" (p "Publication of a paper at this workshop is not intended\nto replace conference or journal publication, and does\nnot preclude re-publication of a more complete or\nfinished version of the paper at some later conference\nor in a journal.") "\n\n" (h4 "Submission Instructions:") "\n\n" (p "Your submissions should be no longer than 12 pages,\nincluding bibliography and appendices. Papers may be\nshorter than this limit, and the Program Committee\nencourages authors to submit shorter papers where\nappropriate.") "\n\n" (p "The conference web page (URL above) contains detailed\nformatting instructions and LaTeX support files.") "\n\n" (p "Submit your papers using the Continue 2.0 submission\nserver, at the URL:") "\n\n" (p (a ((href "http://continue2.cs.brown.edu/scheme2009/")) "http://continue2.cs.brown.edu/scheme2009/")) "\n\n" (p "We look forward to reading your papers!")))) (link ((href "http://schemeworkshop.org/2009/") (rel "related") (title "CfP: Scheme Workshop 2009!"))) (link ((href "http://blog.racket-lang.org/feeds/8396356645755951671/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=8396356645755951671") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/8396356645755951671") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/8396356645755951671") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/01/cfp-scheme-workshop-2009.html") (rel "alternate") (title "CfP: Scheme Workshop 2009!") (type "text/html"))) (author (name "John Clements") (uri "https://www.blogger.com/profile/10401643794201938443") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-619826297249082925") (published "2009-01-21T02:20:00.000-05:00") (updated "2011-11-09T22:52:20.938-05:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "release"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text"))) (post-content "PLT Scheme version 4.1.4 is now available from\n" (pre "  " (a ((href "http://plt-scheme.org/")) "http://plt-scheme.org/")) "\n" (ul (li "New libraries include `scheme/package' (for nestable static modules) and `ffi/objc' (support for Objective-C).") "\n" (li "New teaching support includes a \"universe.ss\" teachpack for connecting \"worlds\" over a network.") "\n" (li "Redex now supports automatic test-case generation.  Specify a predicate that should hold of your reduction system, and Redex will attempt to falsify it.  See 'redex-check' in the manual for more details.") "\n" (li "Improvements to the run-time system include better and more reliable memory-limit tracking, function contracts that preserve tail recursion in many cases, native debugging backtraces on x86_64, and performance improvements.") "\n" (li "Improved libraries include enhancements to `scheme/sandbox', better handling of zero-sized matches by `regexp-split' and friends, an `equal" (|| ">' interface for specifying equality on class instances (and more general support for attaching properties to interfaces), equality (via `equal" (|| ">') for image objects, and refinements to `scheme/foreign' to support atomic operations and function-pointer conversions.")))) "\n\n[Note that mirror sites can take a while to catch up with the new downloads.]\n\nFeedback Welcome.") (link ((href "http://blog.racket-lang.org/feeds/619826297249082925/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=619826297249082925") (rel "replies") (title "5 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/619826297249082925") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/619826297249082925") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/01/plt-scheme-version-4.html") (rel "alternate") (title "") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_lx1aK_XwT-o/SxSPoMzJgLI/AAAAAAAAAA8/v5ASXddGsSc/s32-R/eli-small.jpg") (width "28")))) (thr:total "5")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7007357599951577374") (published "2008-11-24T17:19:00.019-05:00") (updated "2012-06-24T22:12:26.533-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "experience-reports"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "tools"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "planet"))) (title ((type "text")) "Simple GnuPLoTting") (post-content (a ((href "http://www.gnuplot.info/")) "gnuplot") " is a very powerful and widely used interactive data plotting  program. It can generate two-dimenational and three-dimensional surface plots, either on screen  or print to files with a wide-array of supported formats. If you are not familiar with it, you can get an idea of its capabilities " (a ((href "http://gnuplot.sourceforge.net/demo/")) "here") " " (br) "\nA new package, " (a ((href "http://planet.plt-scheme.org/display.ss?package=gnuplot.plt&amp;owner=vyzo")) "gnuplot.plt") ", is now available on planet which allows you to programmatically interact with gnuplot processes and generate plots on the fly. The package provides a simple interface that abstracts gnuplot's quirky syntax and takes care of data marshalling using temporary files." (br) "\nWithout further ado, here is to every computer scientist's favorite growth curves:\n" (br) "\n" (div ((class "scheme")) "\n" (pre "(" (span ((class "keyword")) "require") " (" (span ((class "variable")) "planet") " " (span ((class "variable")) "vyzo/gnuplot") "))\n(" (span ((class "keyword")) "define") " " (span ((class "variable")) "gplot") " (" (span ((class "variable")) "gnuplot-spawn") "))\n(" (span ((class "keyword")) "define") " " (span ((class "variable")) "data") " \n  (" (span ((class "variable")) "gnuplot-data") "\n   (" (span ((class "variable")) "build-list") " " (span ((class "selfeval")) "90") "\n     (" (span ((class "keyword")) "lambda") " (" (span ((class "variable")) "x") ") \n       (" (span ((class "keyword")) "let") " ((" (span ((class "variable")) "x") " (" (span ((class "builtin")) "add1") " (" (span ((class "builtin")) "/") " " (span ((class "variable")) "x") " " (span ((class "selfeval")) "10.") "))))\n         (" (span ((class "builtin")) "list") " " (span ((class "variable")) "x") " (" (span ((class "builtin")) "log") " " (span ((class "variable")) "x") ") (" (span ((class "builtin")) "*") " " (span ((class "variable")) "x") " (" (span ((class "builtin")) "log") " " (span ((class "variable")) "x") ")) (" (span ((class "builtin")) "expt") " " (span ((class "variable")) "x") " " (span ((class "selfeval")) "2") ") (" (span ((class "builtin")) "expt") " " (span ((class "selfeval")) "2") " " (span ((class "variable")) "x") ")))))))\n" (span ((class "comment")) ";; png output options\n") "(" (span ((class "keyword")) "define") " " (span ((class "variable")) "png") " " (span ((class "keyword")) "'") "(" (span ((class "variable")) "png") " " (span ((class "variable")) "enhanced") " " (span ((class "variable")) "transparent") " " (span ((class "variable")) "font") " (" (span ((class "variable")) "str") " " (span ((class "variable")) "arial") ")))\n" (span ((class "comment")) ";; on screen plot\n") "(" (span ((class "variable")) "gnuplot-set") " " (span ((class "variable")) "gplot") " " (span ((class "keyword")) "'") "(" (span ((class "variable")) "title") " (" (span ((class "variable")) "str") " " (span ((class "selfeval")) "\"growth curves\"") ")))\n(" (span ((class "variable")) "gnuplot-plot") " " (span ((class "variable")) "gplot") " \n  " (span ((class "variable")) "#:range") " " (span ((class "keyword")) "'") "(() (" (span ((class "selfeval")) "1") " " (span ((class "selfeval")) "1000") "))\n  (" (span ((class "variable")) "gnuplot-item") " " (span ((class "variable")) "data") " " (span ((class "keyword")) "'") "(" (span ((class "variable")) "using") " (" (span ((class "variable")) "seq:") " " (span ((class "selfeval")) "1") " " (span ((class "selfeval")) "1") ") " (span ((class "variable")) "title") " (" (span ((class "variable")) "str") " " (span ((class "selfeval")) "\"x\"") ") " (span ((class "variable")) "with") " " (span ((class "variable")) "line") "))\n  (" (span ((class "variable")) "gnuplot-item") " " (span ((class "variable")) "data") " " (span ((class "keyword")) "'") "(" (span ((class "variable")) "using") " (" (span ((class "variable")) "seq:") " " (span ((class "selfeval")) "1") " " (span ((class "selfeval")) "2") ") " (span ((class "variable")) "title") " (" (span ((class "variable")) "str") " " (span ((class "selfeval")) "\"log(x)\"") ") " (span ((class "variable")) "with") " " (span ((class "variable")) "line") "))\n  (" (span ((class "variable")) "gnuplot-item") " " (span ((class "variable")) "data") " " (span ((class "keyword")) "'") "(" (span ((class "variable")) "using") " (" (span ((class "variable")) "seq:") " " (span ((class "selfeval")) "1") " " (span ((class "selfeval")) "3") ") " (span ((class "variable")) "title") " (" (span ((class "variable")) "str") " " (span ((class "selfeval")) "\"xlog(x)\"") ") " (span ((class "variable")) "with") " " (span ((class "variable")) "line") "))\n  (" (span ((class "variable")) "gnuplot-item") " " (span ((class "variable")) "data") " " (span ((class "keyword")) "'") "(" (span ((class "variable")) "using") " (" (span ((class "variable")) "seq:") " " (span ((class "selfeval")) "1") " " (span ((class "selfeval")) "4") ") " (span ((class "variable")) "title") " (" (span ((class "variable")) "str") " " (span ((class "selfeval")) "\"x^2\"") ") " (span ((class "variable")) "with") " " (span ((class "variable")) "line") "))\n  (" (span ((class "variable")) "gnuplot-item") " " (span ((class "variable")) "data") " " (span ((class "keyword")) "'") "(" (span ((class "variable")) "using") " (" (span ((class "variable")) "seq:") " " (span ((class "selfeval")) "1") " " (span ((class "selfeval")) "5") ") " (span ((class "variable")) "title") " (" (span ((class "variable")) "str") " " (span ((class "selfeval")) "\"2^x\"") ") " (span ((class "variable")) "with") " " (span ((class "variable")) "line") ")))\n" (span ((class "comment")) ";; replot to png\n") "(" (span ((class "variable")) "gnuplot-hardcopy") " " (span ((class "variable")) "gplot") " " (span ((class "selfeval")) "\"/tmp/grow.png\"") " " (span ((class "variable")) "#:term") " " (span ((class "variable")) "png") ")\n" (span ((class "comment")) ";; redo with logscale\n") "(" (span ((class "variable")) "gnuplot-set") " " (span ((class "variable")) "gplot") " " (span ((class "keyword")) "'") "(" (span ((class "variable")) "logscale") " " (span ((class "variable")) "y") "))\n(" (span ((class "variable")) "gnuplot-replot") " " (span ((class "variable")) "gplot") ")\n(" (span ((class "variable")) "gnuplot-hardcopy") " " (span ((class "variable")) "gplot") " " (span ((class "selfeval")) "\"/tmp/loggrow.png\"") " " (span ((class "variable")) "#:term") " " (span ((class "variable")) "png") ")\n") "\n") "\n" (table (tbody "\n" (tr "\n" (td (a ((href "http://1.bp.blogspot.com/_z9qlvFJLavM/SSs-MWx-soI/AAAAAAAAAAM/Q390WvIaCYQ/s1600-h/grow.png") (onblur "try {parent.deselectBloggerImageGracefully();} catch(e) {}")) (img ((alt "") (border "0") (id "BLOGGER_PHOTO_ID_5272376170761859714") (src "http://1.bp.blogspot.com/_z9qlvFJLavM/SSs-MWx-soI/AAAAAAAAAAM/Q390WvIaCYQ/s200/grow.png") (style "cursor: hand; cursor: pointer; height: 150px; width: 200px;")))) "\n") "\n" (td (a ((href "http://3.bp.blogspot.com/_z9qlvFJLavM/SSs-Mc58DXI/AAAAAAAAAAU/OisUht4uV5I/s1600-h/loggrow.png") (onblur "try {parent.deselectBloggerImageGracefully();} catch(e) {}")) (img ((alt "") (border "0") (id "BLOGGER_PHOTO_ID_5272376172405853554") (src "http://3.bp.blogspot.com/_z9qlvFJLavM/SSs-Mc58DXI/AAAAAAAAAAU/OisUht4uV5I/s200/loggrow.png") (style "cursor: hand; cursor: pointer; height: 150px; width: 200px;")))) "\n") "\n") "\n"))) (link ((href "http://blog.racket-lang.org/feeds/7007357599951577374/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=7007357599951577374") (rel "replies") (title "3 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/7007357599951577374") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/7007357599951577374") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/11/simple-gnuplotting.html") (rel "alternate") (title "Simple GnuPLoTting") (type "text/html"))) (author (name "vyzo") (uri "https://www.blogger.com/profile/11156244128400372973") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (media:thumbnail ((height "72") (url "http://1.bp.blogspot.com/_z9qlvFJLavM/SSs-MWx-soI/AAAAAAAAAAM/Q390WvIaCYQ/s72-c/grow.png") (width "72") (xmlns:media "http://search.yahoo.com/mrss/"))) (thr:total "3")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7126646559691060317") (published "2008-11-21T11:04:00.001-05:00") (updated "2011-11-09T22:52:20.960-05:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "release"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "PLT Scheme v4.1.3") (post-content "PLT Scheme version 4.1.3 is now available from\n" (pre "  " (a ((href "http://plt-scheme.org/")) "http://plt-scheme.org/")) "\nThis is a bug-fix release.\n\nNotable changes:\n\n" (ul (li "Web Server:" (ul (li "Documentation rewritten to separate servlet APIs and server extension APIs") (li "HTTPS supported on the \"plt-web-server\" command-line with \"--ssl\" option") (li "Stateless servlets supported in default configuration through 'stateless interface-version") (li "`web-server/servlet-env' supports top-level servlets through #:servlet-path") (li "Servlets are served from anywhere in the htdocs directory by default") (li "A template system based on the Scribble syntax has been added, see web-server/templates in the documentation")) "And many other internal modifications to make extension easier!")) "\n\n[Note that mirror sites can take a while to catch up with the new downloads.]\n\nFeedback Welcome.") (link ((href "http://plt-scheme.org/") (rel "related") (title "PLT Scheme v4.1.3"))) (link ((href "http://blog.racket-lang.org/feeds/7126646559691060317/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=7126646559691060317") (rel "replies") (title "2 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/7126646559691060317") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/7126646559691060317") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/11/plt-scheme-v413.html") (rel "alternate") (title "PLT Scheme v4.1.3") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_lx1aK_XwT-o/SxSPoMzJgLI/AAAAAAAAAA8/v5ASXddGsSc/s32-R/eli-small.jpg") (width "28")))) (thr:total "2")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2682339340541125231") (published "2008-10-28T14:29:00.001-04:00") (updated "2011-11-09T22:52:20.914-05:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "release"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text"))) (post-content "PLT Scheme version 4.1.2 is now available from\n" (pre "  " (a ((href "http://plt-scheme.org/")) "http://plt-scheme.org/")) "\nThis is a bug-fix release.\n\n[Note that mirror sites can take a while to catch up with the new downloads.]\n\nFeedback Welcome.") (link ((href "http://blog.racket-lang.org/feeds/2682339340541125231/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=2682339340541125231") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2682339340541125231") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2682339340541125231") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/10/plt-scheme-version-4.html") (rel "alternate") (title "") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_lx1aK_XwT-o/SxSPoMzJgLI/AAAAAAAAAA8/v5ASXddGsSc/s32-R/eli-small.jpg") (width "28")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2747116959164987330") (published "2008-10-06T15:33:00.006-04:00") (updated "2012-06-24T22:24:10.062-04:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "drracket"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "tutorials"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "continuations"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "documentation"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "web-server"))) (title ((type "text")) "Web Application Development in PLT Scheme") (post-content (p "Many users often post to the " (code "plt-scheme") " mailing list asking for introductions to Web application development in PLT Scheme. They've heard of the continuation-based PLT Web Server and want a gentle introduction. Unfortunately, there has been a distinct lack of good documentation and tutorials for the server. Taking the cue from two users: " (a ((href "http://www.scheme.dk/blog/2007/01/introduction-to-web-development-with.html")) "Jens Axel Soegaard") " and " (a ((href "http://alwaysmovefast.com/category/plt-scheme/")) "David Reynolds") ", we've written a tutorial with Danny Yoo.") "\n\n" (p "The tutorial is available at " (a ((href "http://docs.plt-scheme.org/continue/index.html")) "http://docs.plt-scheme.org/continue/index.html") ". It walks through the creation of a blog application, introducing features slowly and culminates in an SQL-backed database for the posts. Of particular interest, is the " (a ((href "http://docs.plt-scheme.org/web-server/insta.html")) "fast start servlet setup") " based on the Instaservlet package from " (a ((href "http://www.untyped.com/")) "Untyped") ".") "\n\n" (p "Please take a look and pass along this as a pointer to those who may be interested in PLT Scheme.")) (link ((href "http://docs.plt-scheme.org/continue/index.html") (rel "related") (title "Web Application Development in PLT Scheme"))) (link ((href "http://blog.racket-lang.org/feeds/2747116959164987330/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=2747116959164987330") (rel "replies") (title "2 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2747116959164987330") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2747116959164987330") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/10/web-application-development-in-plt.html") (rel "alternate") (title "Web Application Development in PLT Scheme") (type "text/html"))) (author (name "Jay McCarthy") (uri "https://plus.google.com/101670206687664104937") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh3.googleusercontent.com/-13KUDv8LhZw/AAAAAAAAAAI/AAAAAAAAAAA/7MdiB5POU5k/s32-c/photo.jpg") (width "32")))) (thr:total "2")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6517702731644563759") (published "2008-10-05T16:34:00.001-04:00") (updated "2011-11-09T22:52:20.944-05:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "release"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "PLT Scheme v4.1.1") (post-content "PLT Scheme version 4.1.1 is now available from\n" (pre "  " (a ((href "http://plt-scheme.org/")) "http://plt-scheme.org/")) "Notable changes:" (ul (li "web-server: New servlet development tutorial; quick launching of servlets from DrScheme via the `web-server/insta' language; new form abstraction through formlets.") (li "misc: mzc can \"decompile\" bytecode files; `#lang' lines wired to the top of DrScheme's definition window; improved searching in DrScheme; some foreign interface extensions.")) "[Note that mirror sites can take a while to catch up with the new downloads.]\n\nFeedback Welcome.") (link ((href "http://plt-scheme.org/") (rel "related") (title "PLT Scheme v4.1.1"))) (link ((href "http://blog.racket-lang.org/feeds/6517702731644563759/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=6517702731644563759") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/6517702731644563759") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/6517702731644563759") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/10/plt-scheme-v411.html") (rel "alternate") (title "PLT Scheme v4.1.1") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_lx1aK_XwT-o/SxSPoMzJgLI/AAAAAAAAAA8/v5ASXddGsSc/s32-R/eli-small.jpg") (width "28")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7293458638491379663") (published "2008-08-12T16:32:00.002-04:00") (updated "2011-11-09T22:52:20.964-05:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "release"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "PLT Scheme v4.1") (post-content "PLT Scheme version 4.1 is now available from\n" (pre "  " (a ((href "http://plt-scheme.org/")) "http://plt-scheme.org/")) (ul (li "DrScheme changes:" (ul (li "The Module language now has an automatically inserted " (tt "#lang") " declaration, so the interactions window is available right away for new windows.") (li "Searching is now interactive (see the manual for details).") (li "Memory limits are now enabled by default."))) (li "Typed Scheme supports a novel type checking mechanism for homogeneous and heterogeneous variable-arity function definitions and applications.") (li "Redex (a domain-specific language for testing operational semantics) is now included in the distribution. See also " (tt (a ((href "http://redex.plt-scheme.org/")) "redex.plt-scheme.org")) ".") (li "Lots of improvement to the documentation, including: better searching, table-of-contents, and language-sensitive help (in the teaching languages).") (li "The world.ss teachpack no longer supports " (tt "end-of-time") ", only " (tt "stop-when") ".") (li "MzScheme has now a logging facility, search the documentationfor \"logger\" for more details.") (li "Bug fixes:" (ul (li (tt "begin") " in R5RS (and derived languages),") (li (tt "#lang planet") ",") (li (tt "eval") " works with phases.")))) "Feedback Welcome.") (link ((href "http://blog.racket-lang.org/feeds/7293458638491379663/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=7293458638491379663") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/7293458638491379663") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/7293458638491379663") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/08/plt-scheme-v41.html") (rel "alternate") (title "PLT Scheme v4.1") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_lx1aK_XwT-o/SxSPoMzJgLI/AAAAAAAAAA8/v5ASXddGsSc/s32-R/eli-small.jpg") (width "28")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3416142740906973366") (published "2008-07-29T18:10:00.011-04:00") (updated "2012-06-24T22:24:10.064-04:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "drracket"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "keybindings"))) (title ((type "text")) "Search in DrScheme") (post-content (a ((href "http://bp2.blogger.com/_gJUvnpacURg/SI-cUBJB31I/AAAAAAAAADw/k434suYJVQI/s1600-h/Picture+5.png") (onblur "try {parent.deselectBloggerImageGracefully();} catch(e) {}")) (img ((alt "") (border "0") (id "BLOGGER_PHOTO_ID_5228569560118058834") (src "http://bp2.blogger.com/_gJUvnpacURg/SI-cUBJB31I/AAAAAAAAADw/k434suYJVQI/s320/Picture+5.png") (style "margin: 0pt 0pt 10px 10px; float: right; cursor: pointer;")))) "\nI've just overhauled search in DrScheme. Instead of popping up a dialog box and asking you for a search string, you get a new editor along the bottom of the DrScheme window where you can type a search string and DrScheme responds by circling (in purple) all of the occurrences of the search string in the file, both in the main window and in the contour window.\n\n" (p "\nFrom there, you can use the new menu shortcuts to navigate forwards and backwards through the hits, optionally replacing occurrences of the search string with the replace strings (see the Edit menu).\n") "\n\n" (p "\nWith the default settings, typing a search string does not move around in the main window. Specifically (unlike Emacs, Safari, or Firefox), you don't move immediately to the first occurrence of the search string. You have to hit return or one of the search keys (in the Edit menu) for that to happen. But you can enable this in the General pane\nof the Editing tab in the preferences dialog. Click on \"Search using anchors\". Now, when you search for a string, DrScheme will whizz you right to it and when you edit the search string, DrScheme will shift the insertion point based on the search string. In order for you to keep track of where edits will go, you'll see a funny looking little red dongle in your text. That's where the insertion point was when you\nstarted your search, and that's where DrScheme starts all of these implicit searches from.\n") "\n" (p "\nTry it out and let us know what you think! In particular, is the anchor-based search or the non-anchor-based search more intuitive for you?\n")) (link ((href "http://blog.racket-lang.org/feeds/3416142740906973366/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=3416142740906973366") (rel "replies") (title "1 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/3416142740906973366") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/3416142740906973366") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/07/search-in-drscheme.html") (rel "alternate") (title "Search in DrScheme") (type "text/html"))) (author (name "Robby Findler") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (media:thumbnail ((height "72") (url "http://bp2.blogger.com/_gJUvnpacURg/SI-cUBJB31I/AAAAAAAAADw/k434suYJVQI/s72-c/Picture+5.png") (width "72") (xmlns:media "http://search.yahoo.com/mrss/"))) (thr:total "1")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1280588230791861473") (published "2008-07-04T21:05:00.002-04:00") (updated "2011-11-09T22:52:20.890-05:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "release"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text"))) (post-content "PLT Scheme version 4.0.2 is now available from\n\n" (pre "  " (a ((href "http://plt-scheme.org/")) "http://plt-scheme.org/")) "\nThis release fixes a bug that caused PLaneT packages to install abnormally slow in 4.0.1.\n\n[ For those that use the nightly builds, subversion, or 4.0.1tsrj2008, you already have this fix (and even more fixes). You do not need to upgrade.  The version in svn is now 4.0.2.3 to minimize confusion. ]\n\nFeedback Welcome.") (link ((href "http://blog.racket-lang.org/feeds/1280588230791861473/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=1280588230791861473") (rel "replies") (title "1 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1280588230791861473") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1280588230791861473") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/07/plt-scheme-version-4.html") (rel "alternate") (title "") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_lx1aK_XwT-o/SxSPoMzJgLI/AAAAAAAAAA8/v5ASXddGsSc/s32-R/eli-small.jpg") (width "28")))) (thr:total "1")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2394879006392807599") (published "2008-06-22T23:49:00.001-04:00") (updated "2011-11-09T22:52:20.902-05:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "release"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "PLT Scheme v4.0.1") (post-content "PLT Scheme version 4.0.1 is now available from\n\n  " (tt (a ((href "http://plt-scheme.org/")) "http://plt-scheme.org/")) "\n\nThis release fixes a number of bugs.  Most noteworthy, the \"Internal Error\" message when requiring a PLaneT package has been fixed and user-defined teachpacks now work properly.\n\nFeedback Welcome.") (link ((href "http://blog.racket-lang.org/feeds/2394879006392807599/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=2394879006392807599") (rel "replies") (title "1 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2394879006392807599") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2394879006392807599") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/06/plt-scheme-v401.html") (rel "alternate") (title "PLT Scheme v4.0.1") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_lx1aK_XwT-o/SxSPoMzJgLI/AAAAAAAAAA8/v5ASXddGsSc/s32-R/eli-small.jpg") (width "28")))) (thr:total "1")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4036024601885652110") (published "2008-06-12T02:11:00.002-04:00") (updated "2011-11-09T22:52:20.922-05:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "release"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text"))) (post-content "PLT Scheme version 4.0 is now available from\n" (blockquote (tt (a ((href "http://plt-scheme.org/")) "http://plt-scheme.org/"))) "\nThis major new release offers many improvements over version 372, and we encourage everyone to upgrade.\n" (ul "\n" (li "The PLT Scheme language now provides better syntax for modules, better support for optional and keyword arguments to functions, a more complete syntax for structure types, new syntax for list comprehensions and iterations, a more complete and consistent set of list operations, a more complete set of string operations, and streamlined hash-table operations.") "\n" (li "The documentation has been re-organized and re-written.  New tutorials and overviews offer a clearer introduction to Scheme and PLT Scheme.") "\n" (li "New documentation tools help programmers create and install documentation for libraries and Planet packages.  All installed documentation can be read though the user's web browser, and even searching within the browser works on local files." (br "\nThe language for writing documentation is an extension of Scheme, and document sources are linked to implementations through the module system.  The module connection allows, for example, reliable automatic hyperlinking of identifiers mentioned in documentation to their specifications in other documentation.")) "\n" (li "R6RS programs are supported in two ways: though the " (tt "plt-r6rs") " executable and through the " (tt "#!r6rs") " prefix.  The latter allows an R6RS library or program to serve as a PLT Scheme module.") "\n" (li "Legacy R5RS support is improved, partly through a separate " (tt "plt-r5rs") " executable.") "\n" (li "Pairs are immutable within the PLT Scheme language; mutable pairs (which are the same as R6RS and R5RS pairs) are provided as a separate datatype. For more information, see " ldquo (a ((href "http://blog.plt-scheme.org/2007/11/getting-rid-of-set-car-and-set-cdr.html")) "Getting rid of " (tt "set-car!") " and " (tt "set-cdr!")) rdquo) "\n" (li "ProfessorJ uses a new and improved parser, it evaluates programs faster, and it includes a Java-specific indenter.") "\n" (li "Testing frameworks for the HtDP and HtDC (ProfessorJ) teaching languages have been unified. Both support systematic unit testing in a comprehensive fashion. When programs lack tests, students are asked to add test cases.  When all tests succeed, a simple message says so; otherwise, a pop-up window (dockable) displays URLs to the failed test cases and explains why the cases failed.") "\n" (li "Typed Scheme, a statically typed dialect of Scheme, is now included with PLT Scheme.  While Typed Scheme is still in its early stages of development, it supports modular programming with types and full interaction with existing untyped code.  Safe interactions between typed and untyped modules are enforced via contracts.  Typed Scheme also features a novel type system designed to accommodate Scheme programming idioms.  For more information, see the " (a ((href "http://www.ccs.neu.edu/~samth/typed-scheme/")) "Typed Scheme") " page.") "\n") "\n" (i "Feedback Welcome.")) (link ((href "http://blog.racket-lang.org/feeds/4036024601885652110/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=4036024601885652110") (rel "replies") (title "16 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/4036024601885652110") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/4036024601885652110") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-4.html") (rel "alternate") (title "") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_lx1aK_XwT-o/SxSPoMzJgLI/AAAAAAAAAA8/v5ASXddGsSc/s32-R/eli-small.jpg") (width "28")))) (thr:total "16")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6087611645085889801") (published "2008-06-06T21:40:00.002-04:00") (updated "2012-06-24T22:24:10.067-04:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "drracket"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "tutorials"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "videos"))) (title ((type "text")) "The Tour in Video") (post-content (p "\nPutting behind its stodgy textual past, the DrScheme tour is now\n" (a ((href "http://www.youtube.com/watch?v=vgQO_kHl39g")) "in video") "!\nIt's rather preliminary, and can use lots of improvement, but now\nwe're really taking it to the kids.\n")) (link ((href "http://blog.racket-lang.org/feeds/6087611645085889801/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=6087611645085889801") (rel "replies") (title "1 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/6087611645085889801") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/6087611645085889801") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/06/tour-in-video.html") (rel "alternate") (title "The Tour in Video") (type "text/html"))) (author (name "Shriram Krishnamurthi") (uri "https://www.blogger.com/profile/02956763366608000839") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "1")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-266784924007072869") (published "2008-06-03T18:03:00.003-04:00") (updated "2011-11-09T22:52:20.910-05:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "release"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "PLT Scheme version 4.0 is Coming Soon") (post-content (p "PLT Scheme is now 13 years old. The initial version was little more than glue code between a few open-source libraries, which seemed to offer the quickest solution to our modest goals. Modest success leads to bigger goals, however, and then continued success leads to ever more ambitious goals. Before you know it, a mass of users, co-developers, libraries, and documentation rely on design decisions that were made for a much smaller project years before.") "\n\n" (p "Naturally, many of those early design decisions turn out to be a poor fit for the project" rsquo "s eventual role. Starting from scratch isn" rsquo "t usually practical, so you gradually adjust the infrastructure to meet new needs. That was precisely the story for the version 300 series of releases for PLT Scheme. The biggest gap between our original and current goals was in run-time performance, so we replaced bytecode interpretation with a just-in-time native-code compiler, and we replaced a memory manager based on " ldquo "conservative" rdquo " estimates of pointer usage with one that uses precise information.") "\n\n" (p "Performance improves a bit more with version 4.0, but mostly we" rsquo "ve moved on to a bigger mismatch between the original and current goals: the way that PLT Scheme presents itself to users. PLT Scheme was originally conceived as R5RS Scheme with some extensions to make it practical, and with useful tools (notably an IDE) and libraries (notably a GUI library) built on that core. Our documentation and web pages reflected that architecture " ndash " which now seems completely upside-down.") "\n\n" (p "Version 4.0 is a fresh start in the way that we present PLT Scheme. It" rsquo "s a new language. PLT Scheme is a dialect of Scheme, certainly, but it" rsquo "s not merely a superset of R5RS, R6RS, or other standards, and those standards are not really the best place to start understanding PLT Scheme. At the same time, the unique extensibility features of the PLT Scheme language and tools allow them to support other languages easily, including R5RS (though a new " (tt "plt-r5rs") " executable), R6RS, and more.") "\n\n" (p "Improvements to the PLT Scheme language include better syntax for modules, better support for optional and keyword function arguments, more expressive syntax for structure types, streamlined hash-table operations, new syntax for list comprehensions and iterations, a more complete and consistent set of list and string operations, and reduced dependence on mutable pairs. To current users of PLT Scheme, these changes will seem like the big ones behind version 4.0, but they" rsquo "re small compared to the overall re-organization and the accompanying documentation effort.") "\n\n" (p "We wrote hundreds of pages of new documentation, including much more tutorial and overview information. We ported hundreds of pages of existing documents to new a system that produces cleaner, better organized, more consistent output. We will replace the old tangle of web pages (that try to explain a confusing federation of tools) with a simple page about " ldquo "PLT Scheme." rdquo " We have even streamlined the command-line flags for the main virtual machine.") "\n\n" (p "The development of PLT Scheme version 4.0 took about one year of hard work. In retrospect, that doesn" rsquo "t sound too bad, considering the scale of the existing code base, the number of things that we improved, and the total size of the documentation (about 2000 pages in PDF form). Still, you can imagine how happy we are to arrive at a stable release, and we hope that the improvements in PLT Scheme version 4.0 work as well for everyone else as they do for us.") "\n\n" (p "For a preview, see " (a ((href "http://pre.plt-scheme.org/")) "http://pre.plt-scheme.org/") ". The final version 4.0 release is just days away.")) (link ((href "http://blog.racket-lang.org/feeds/266784924007072869/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=266784924007072869") (rel "replies") (title "13 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/266784924007072869") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/266784924007072869") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-40-is-coming-soon.html") (rel "alternate") (title "PLT Scheme version 4.0 is Coming Soon") (type "text/html"))) (author (name "Matthew Flatt") (uri "https://www.blogger.com/profile/03369511886823036667") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "13")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-903780350920969233") (published "2008-02-23T01:20:00.002-05:00") (updated "2012-06-24T21:59:43.125-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "macros"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "tutorials"))) (title ((type "text")) "Dirty Looking Hygiene") (post-content "With the recent release of " (a ((href "http://arclanguage.com/")) "Arc") ", there has been some discussion over hygienic macros.  Yes, hygienic macros are usually very convenient, but they can become messy in some " lsquo "corner" rsquo " cases.  People who learn about macros in Scheme usually start with " (code "syntax-rules") ", and being the limited tool that it is, they often get the impression that for advanced uses (like a macro that captures an identifier) you need to use " (code "syntax-case") " which is this " ldquo "really obscure thing" rdquo ".\n\nFor example, say that we want to implement an " (code "if") " form that is similar to Arc's " (code "if") ".  This is pretty easy using " (code "syntax-rules") ":" (pre "  (define-syntax if*\n    (syntax-rules ()\n      [(if*) (void)]\n      [(if* X) X]\n      [(if* C X more ...) (if C X (if* more ...))]))") "But more important than being easy to write: it is also easy to read. In fact, the nice thing about " (code "syntax-rules") " is that you write more or less the specification of your transformation.  Compare this to the specification of Arc's " (code "if") ", which appears in a comment before the definition of " (code "ac-if") " in " ldquo (tt "ac.scm") rdquo ":" (pre "  ; (if) -> nil\n  ; (if x) -> x\n  ; (if t a ...) -> a\n  ; (if nil a b) -> b\n  ; (if nil a b c) -> (if b c)") "(Except that the comment mixes up the syntactic specification and the semantic evaluation.)\n\nAs a side note, now that we have this definition, it is easy to construct a new language that is just like MzScheme, except for its " (code "if") " that behaves like the above:" (pre "  (module arc-like mzscheme\n    (define-syntax if* ..." (em "the above definition") "...)\n    (provide (all-from-except mzscheme if)\n             (rename if* if)))") "You can now write code that uses " (code "\"arc-like.scm\"") " as its language, using the new " (code "if") ".  There is no problem in accommodating two languages with two different " (code "if") "'s: the new form is compiled to the old one, and there is no confusion in which version you use in any module.\n\nBack to the macro issue: as I said above, you run into problems if you want to capture names, right?  For example, if you want to implement Arc's " (code "aif") ".  The usual " (code "syntax-case") " solution is to construct an identifier that has the lexical context of the input syntax.  It's easy to abstract over all this " mdash " I posted a " (a ((href "http://www.arclanguage.org/item?id=841")) "message") " on the Arc forum showing how to define a " (a ((href "http://tmp.barzilay.org/defmac.ss")) "defmac") " macro that has the simplicity of " (code "syntax-rules") " with the added convenience of specifying keywords and captured names.  This works for " (em "some") " cases, but there are still some " (a ((href "http://download.plt-scheme.org/doc/372/html/mzscheme/mzscheme-Z-H-12.html#node_sec_12.2.1.1")) "subtle corner cases") ".\n\nBut there's a better solution in PLT Scheme, one that follows Paul Graham's intuition when he " (a ((href "http://www.arclanguage.org/item?id=2526")) "says") ":" (blockquote ldquo "captured symbols are kind of freaky" rdquo) "The basic idea is a change of perspective: instead of (unhygienically) binding individual occurrences of " (code "it") " whenever " (code "aif") " is used, you define " (code "it") " once as a thing in its own right " mdash " a special context-dependant piece of syntax. Outside of an " (code "aif") " form, " (code "it") " has no meaning: we simply make it throw a syntax error.  Uses of " (code "aif") " provide a meaning for " (code "it") " by locally changing its meaning (its expansion) to something useful: the binding that holds the result of evaluating the condition expression.  (" ldquo "Locally" rdquo " means within a piece of syntax, so the new meaning is valid in a lexical-scope.)\n\nIn PLT Scheme, the " ldquo "special context-dependant piece of syntax" rdquo " are " (em "syntax parameters") ", and you change them locally with " (code "syntax-parameterize") ".\n\nTo continue the above example, here's how we make our " (code "if*") " anaphoric:\n" (ul (li "require the " (code "(lib \"stxparam.ss\" \"mzlib\")") " library,") (li "define " (code "it") " as a syntax using " (code "define-syntax-parameter") ", and have it raise an error by default,") (li "bind a temporary variable to the result of evaluating the condition,") (li "wrap the positive branch with " (code "syntax-parameterize") ", using " (code "make-rename-transformer") ", which is a convenient way to make a macro that behaves like the new variable.")) "The implementation looks like this:" (pre "\n  (require (lib \"stxparam.ss\" \"mzlib\"))\n  (define-syntax-parameter it\n    (lambda (stx)\n      (raise-syntax-error #f \"can only be used inside `if'\" stx)))\n  (define-syntax if*\n    (syntax-rules ()\n      [(if*) (void)]\n      [(if* X) X]\n      [(if* C X more ...)\n       (let ([b C])\n         (if b\n           (syntax-parameterize ([it (make-rename-transformer #'b)]) X)\n           (if* more ...)))]))") "The resulting macro does not break hygiene.  For example, " (code "(let ([it 3]) (if #t it))") " evaluates to " (code "3") ", because it shadows the global " (code "it") " that " (code "if") " changes.  This is a change from a real unhygienic macro " mdash " but that's the whole point: we (the macro author) do not interfere with scopes in the user code.\n\nNote that " (code "(if 1 (if 2 it))") " still evaluates to " (code "2") ", because the outer " (code "if") " does not really bind " (code "it") " " mdash " it is not captured, just changed locally " mdash " so the inner " (code "if") " changes it again.  Also, " (code "(if #f it it)") " raises the usual context error, since our macro changes " (code "it") " only in the positive branch.") (link ((href "http://blog.racket-lang.org/feeds/903780350920969233/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=903780350920969233") (rel "replies") (title "2 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/903780350920969233") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/903780350920969233") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/02/dirty-looking-hygiene.html") (rel "alternate") (title "Dirty Looking Hygiene") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_lx1aK_XwT-o/SxSPoMzJgLI/AAAAAAAAAA8/v5ASXddGsSc/s32-R/eli-small.jpg") (width "28")))) (thr:total "2")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3376141267131043957") (published "2008-01-14T15:21:00.001-05:00") (updated "2012-06-24T22:00:17.832-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "experience-reports"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "web-server"))) (title ((type "text")) "A Privacy Flaw, Thwarted") (post-content (p "\nMy student Brendan Hickey recently identified the following security\nhole.\n") "\n\n" (p "\nA university (let's call it Orange University) wants to let its\ngraduating students vote on their graduation speaker.  They used to do\nit by paper; catching up with the times, they now do it on the Web.\n") "\n\n" (p "\nThey used to have a box into which you could type the name of your\nnominee.  But that is surely problematic: people misspell names, you\nhave to argue about how to count ambiguous votes, someone will vote\nfor their pet bonobo, etc.  Better (perhaps) to give them the names of\nall the students and let them choose.  [Alert: if Orange U adopts a\nsimple naming scheme for email addresses, a student can immediately\nscreen-scrape a pretty plum list to sell a spammer.  Brendan and I\nnoticed this in a femtosecond; I don't know why this didn't occur to\nthe university.]\n") "\n\n" (p "\nAnyway, now you have a Web page where people are going to choose, and\nthe software that processes the responses must distinguish between\nthese choices.  You have to associate a key with each student.  You've\nalready got a key for each candidate: their student ID number.  So you\nuse that as your key.  Now anyone viewing the page source can\nimmediately see which student ID number goes with which student name.\nSo much for confidentiality.\n") "\n\n" (p "\nWhoops.\n") "\n\n" (p "\nI'd like to point out that Pete Hopkins's\n" (code "send/suspend/dispatch") ", and the improved version of it by\nJay McCarthy, identify and solve just this code structuring problem in\na way that the privacy leak can never occur.  For the most up-to-date\npresentation of it, read section 3.2 and section 4 of\n" (a ((href "http://www.cs.brown.edu/~sk/Publications/Papers/Published/khmgpf-impl-use-plt-web-server-journal/")) "our\npaper") ".\n") "\n\n" (p "\nMaybe Orange U should be using Scheme.\n")) (link ((href "http://blog.racket-lang.org/feeds/3376141267131043957/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=3376141267131043957") (rel "replies") (title "2 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/3376141267131043957") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/3376141267131043957") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/01/privacy-flaw-thwarted.html") (rel "alternate") (title "A Privacy Flaw, Thwarted") (type "text/html"))) (author (name "Shriram Krishnamurthi") (uri "https://www.blogger.com/profile/02956763366608000839") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "2")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-103836778351212601") (published "2007-12-29T15:49:00.000-05:00") (updated "2012-06-24T22:03:53.827-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "teaching"))) (title ((type "text")) "The Design of Extended Exercises") (post-content (p "\nOne of the highlights of the TeachScheme! method is to create Extended\nExercises.  Several of these pepper " (cite "How to Design\nPrograms") ", and even more have been created since to deal with a\nvariety of interesting problem scenarios (e.g., illustrating graphics\nvia t-shirt design, explaining networking by having machines play\nroles in a theatrical play, demonstrating communication with foreign\nsites by processing data from a microfinance institution, etc).\nThrough an Extended Exercise a student learns about how computer\nscience connects to domains, develops practice building programs\nincrementally, learns to build earlier assignments that later\nassignments can depend on, and so forth.\n") "\n\n" (p "\nHere is a preliminary articulation of some principles that I think\ngovern a good Extended Exercise, with an emphasis on their " ldquo "form\nfactor" rdquo ".\n") "\n\n" (ul "\n\n" (li "\nPick a domain.  Whether the domain looks inward (a computing\nactivity such as networking) or outward (such as social networking)\ndoesn't matter.  If it does look inward, try to make it more\napplicable through the judicious use of data (the same exercise can\nlook very dry or very applied depending on what data you choose).  For\ninstance, our networking exercises is presented in terms of\nShakespeare's " (cite "Hamlet") ".\n") "\n\n" (li "\nIf necessary, write a Teachpack.  A domain almost certainly needs a\nTeachpack to reduce the programming burden on students.  For instance,\nthe microfinance exercise uses a Teachpack to hide the ugly details of\nscreen-scraping (which in turn need to be constantly updated by a\nvigilant maintainer).\n") "\n\n" (li "\nTry to provide a non-trivial dataset in the Teachpack.  Good data can\nmake an assignment more enjoyable" mdash "e.g., our networking example\nprovides an excerpt from Act 2, Scene 2 of " (cite "Hamlet") "\n(" ldquo "What a piece of work is man!" rdquo ")" mdash "and in cases where\nthe exercise depends on connecting to an external site (e.g., the\nmicrofinance example), the data may be essential.\n") "\n\n" (li "\nStructure the assignment to have five to eight questions: not much\nfewer (too few steps) nor much more (too much to grasp).\n") "\n\n" (li "\nTry to decompose the problem using good principles of stepwise\nrefinment, using your own wisdom in these matters.  By showing\nstudents several such examples, we hope for them to build up an\nintuition for the process.  Your decomposition may not be strictly\nlinear; that's okay.  But it should be progressive.\n") "\n\n" (li "\nPerhaps the most important point: At every step, try to have a full,\nworking application.  That means the Teachpack may need to export\nseveral interfaces, each one taking more parameters and accepting more\nfunctionality than the previous one.  Otherwise the student needs to\nhave all the parts working before they can understand whether even one\nworks in context, leading to a frustrating learning experience and\nencouraging wanton hacking as they try (and invariably fail) to\nquickly get to a working system.\n") "\n\n" (li "\nDesign interfaces carefully to make judicious use of first-class\nfunctions.  It is inevitable that students will need to provide\nfunctions (not just flat data) to what your Teachpack exports.  Show\nthem the invocations of your Teachpack in terms of named functions\n(that they define).\n") "\n\n" (li "\nTry to provide a few extra-credit routes for ambitious students.\nOptions include letting students peel back even more of the Teachpack,\nor adding interesting features.\n") "\n\n")) (link ((href "http://blog.racket-lang.org/feeds/103836778351212601/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=103836778351212601") (rel "replies") (title "1 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/103836778351212601") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/103836778351212601") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/12/design-of-extended-exercises.html") (rel "alternate") (title "The Design of Extended Exercises") (type "text/html"))) (author (name "Shriram Krishnamurthi") (uri "https://www.blogger.com/profile/02956763366608000839") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "1")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-21355758042095400") (published "2007-12-29T01:00:00.000-05:00") (updated "2011-11-09T22:52:20.894-05:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "release"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "PLT Scheme v372") (post-content (div ((align "left")) "PLT Scheme version 372 is now available from\n" (a ((href "http://download.plt-scheme.org/")) (span ((style "font-family:courier new;")) "http://download.plt-scheme.org/"))) (div ((align "left")) "This is mostly a bug-fix release.") (div ((align "left")) "\nChanges:") (ul (li "DrScheme now supports name completion via Ctl-/ (Windows and X) or Cmd-/ (Mac OS X). Completion is sensitive to the current language in DrScheme, but it is not sensitive to lexical bindings.") (li "DrScheme's stepper now supports the \"" (span ((style "font-family:courier new;")) "check-expect") "\", \"" (span ((style "font-family:courier new;")) "check-within") "\", and \"" (span ((style "font-family:courier new;")) "check-error") "\" forms of the " (span ((style "font-family:courier new;")) "testing.ss") " teachpack.") (li "A number of bug fixes and small improvements for ProfessorJ. The grammar for the current release slightly differs from the one in HtDC.")) (p "Feedback Welcome.") (p)) (link ((href "http://download.plt-scheme.org/") (rel "related") (title "PLT Scheme v372"))) (link ((href "http://blog.racket-lang.org/feeds/21355758042095400/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=21355758042095400") (rel "replies") (title "2 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/21355758042095400") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/21355758042095400") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/12/plt-scheme-v372.html") (rel "alternate") (title "PLT Scheme v372") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_lx1aK_XwT-o/SxSPoMzJgLI/AAAAAAAAAA8/v5ASXddGsSc/s32-R/eli-small.jpg") (width "28")))) (thr:total "2")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1126871850288180624") (published "2007-12-19T17:11:00.000-05:00") (updated "2012-06-24T22:24:10.058-04:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "drracket"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "hacking"))) (title ((type "text")) "Your security hole is my fun hack, or: computing factorial in DrScheme with a click-powered loop.") (post-content (p "\nOne of the many changes in v4.0 is to close a security hole in DrScheme. Specifically, DrScheme v371 lets the program in the definitions window get a hold of the editor containing said program and manipulate it programmatically. There are lots of bad things one might do with this fact, like circumventing DrScheme's protections and cause it to crash, or even spontaneously exit.\n") "\n\n" (p "\nBut, we can do something even more fun. Put the following program into a DrScheme window (in v371) and set the language to the mzscheme/textual language. Change \"input\" to whatever number you wish to compute the factorial of and then hit the Run button until your program transforms itself into the final result.\n") "\n\n" (pre "\n(define input 10)\n(require (lib \"mred.ss\" \"mred\") (lib \"class.ss\"))\n(let* ([ed (let-syntax ([m (Î» (stx) (with-syntax ([x (syntax-source stx)]) #'x))])\n             (m))]\n       [mth (regexp-match \n             #rx\"^; ([0-9]+) ([0-9]+)\" \n             (send ed get-text 0 \n                   (send ed paragraph-end-position 0)))]\n       [lckd (send ed is-locked?)])\n  (send ed begin-edit-sequence)\n  (send ed lock #f)\n  (if mth\n      (let ([n (string->number (list-ref mth 1))]\n            [acc (string->number (list-ref mth 2))])\n        (send ed delete 0 (send ed paragraph-end-position 0))\n        (if (= n 1)\n            (begin (send ed delete 0 (send ed paragraph-end-position 0))\n                   (send ed insert (format \"~a\\n#|\" acc) 0)\n                   (send ed insert \"\\n|#\" (send ed last-position)))\n            (begin (send ed delete 0 (send ed paragraph-end-position 0))\n                   (send ed insert (format \"; ~a ~a\" (- n 1) (* n acc)) 0 0))))\n      (send ed insert (format \"; ~a 1\\n\" input) 0))\n  (send ed lock lckd)\n  (send ed end-edit-sequence))\n")) (link ((href "http://blog.racket-lang.org/feeds/1126871850288180624/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=1126871850288180624") (rel "replies") (title "2 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1126871850288180624") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1126871850288180624") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/12/your-security-hole-is-my-fun-hack-or.html") (rel "alternate") (title "Your security hole is my fun hack, or: computing factorial in DrScheme with a click-powered loop.") (type "text/html"))) (author (name "Robby Findler") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "2")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1842888151218385802") (published "2007-11-12T07:53:00.000-05:00") (updated "2012-06-24T22:14:12.126-04:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "new-feature"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "mutation"))) (title ((type "text")) "Getting rid of set-car! and set-cdr!") (post-content (p (b "Functional is Beautiful")) "\n\n" (p "Scheme is a âmostly functionalâ language. Although Schemers donât hesitate to use " (tt "set!") " when mutation solves a problem best, Scheme programmers prefer to think functionally. Purely functional programs are easier to test, they make better and more reliable APIs, and our environments, compilers, and run-time systems take advantage of functional style.") "\n\n" (p "A Schemerâs functional bias is especially strong when writing programs that process and produce lists. The " (tt "map") " function, which does both, is a thing of beauty:") "\n" (pre "\n  (define (map f l)\n   (cond\n     [(null? l) '()]\n     [else (cons (f (car l)) (map f (cdr l)))]))\n") (p "The " (tt "map") " function is most beautiful when the given " (tt "f") " is functional. If " (tt "f") " has side-effects, the the above implementation over-specifies " (tt "map") ", which is traditionally allowed to process the list in any order that it wants (though PLT Scheme guarantees left-to-right order, as above). Arguably, when some other Schemer provides a non-functional " (tt "f") ", then itâs their problem; they have to deal with the consequences (which may well be minor compared to some benefits of using mutation).") "\n\n" (p "The " (tt "map") " function might also receive a non-list, but the " (tt "map") " implementor can guard against such misuse of " (tt "map") " by wrapping it with a check,") "\n\n" (pre "\n  (define (checked-map f l)\n    (if (list? l)\n        (map f l)\n        (error 'map \"not a list\")))\n") "\n\n" (p "and then exporting " (tt "checked-map") " instead of the raw " (tt "map") ". This kind of checking gives nicer error messages, and it helps hide implementation details of " (tt "map") ". We could further also imagine that the raw " (tt "map") " is compiled without run-time checks on " (tt "car") " and " (tt "cdr") ".\n") "\n\n" (p (b "The Problem with Mutable Pairs")) "\n\n" (p "What if someone calls " (tt "checked-map") " like this?:") "\n" (pre "\n  (define l (list 1 2 3 4 5))\n  (checked-map (lambda (x)\n                 (set-cdr! (cddr l) 5))\n               l)\n") (p "The " (tt "f") " provided to " (tt "map") " in this case is not purely functional. Moreover, it uses mutation in a particularly unfortunate way: the" (tt " list?") " test in " (tt "checked-map") " succeeds, because the argument is" (i " initially") " a list, and the mutation is ultimately discovered by a call to " (tt "cdr") " --- but only if checks haven't been disabled.") "\n\n" (p "If youâre a Schemer, then unless youâve seen this before, or unless you thought a bit about the title of this section, then you probably didn't think of the above test case for " (tt "map") ". A Schemerâs view of lists is so deeply functional that it's hard to make this particular leap.") "\n\n" (p "Furthermore, this example is not contrived. If you have either Chez Scheme version 6.1 or a pre-200 MzScheme sitting around, calling " (tt "map") " as above leads to a seg fault or an invalid memory access:") "\n\n" (pre "\n  Chez Scheme Version 6.1\n  Copyright (c) 1998 Cadence Research Systems\n\n  > (define l (list 1 2 3 4 5))\n  > (map (lambda (x) (set-cdr! (cddr l) 5)) l)\n\n  Error: invalid memory reference.\n  Some debugging context may have been lost.\n") "\n\n" (p "The " (tt "map") " example illustrates how mutable pairs can break a Schemerâs natural and ingrained model of programming. Of course, if optimizing and providing friendly error messages for " (tt "map") " were the only issues with mutable pairs, then it wouldnât matter; Scheme implementors are smart enough to (eventually) get this right. Unfortunately, the underlying problem is more pervasive.") "\n\n" (p "In the API for a typical Scheme library, lists can be used for many kinds of input and output. Flags for options might be provided in a list. A function might provide information about the current configuration (e.g., the current items in a GUI list box) in a list. Procedures or methods that deal gracefully with list mutation are few and far between. In most cases, the result of unexpected mutation is merely a bad error message; sometimes, however, unexpected mutation of a list can break the libraryâs internal invariants. In the worst case, the library whose internal invariants are broken plays some role in a systemâs overall security.") "\n\n" (p "Mutable lists also interfere with the languageâs extensibility. The PLT Scheme contract system, for example, offers a way to wrap an exported function with a contract that constrains its input and outputs, which are optionally (in principle) enforced by run-time checks. Higher-order contracts, such as âa list of functions that consume and produce numbersâ, require wrappers on sub-pieces, and these wrappers can be installed only by copying the enclosing list. Copying a mutable list changes the semantics of a program, however, whereas contracts are supposed to enforce invariants without otherwise changing the program. Copying an immutable list creates no such problem.") "\n\n" (p "Finally, mutable lists make the languageâs specification messy. The R6RS editors spent considerable energy trying to pin down the exception-raising guarantees of " (tt "map") "; the possibility of mutable pairs made it difficult to provide much of a guarantee. The standard says that implementations " (span ((style "font-style: italic;")) "should") " check that the lists provided to" (tt " map") " are the same length, but itâs not worth much to require that check, since an argumentâs length as a list can change via mutation to the listâs pairs.") "\n\n" (p (b "Switching to Immutable Pairs")) "\n\n" (p "The designers of PLT Scheme long ago recognized the problems of mutable pairs, and we introduced functions like " (tt "cons-immutable") " and" (tt " list-immutable") " to support programming with immutable lists.  These additions solved some problems --- but only in the cases where we were careful to use immutable lists. The R6RS editors also recognized the problems of mutable pairs, so that " (tt "set-car!") " and " (tt "set-cdr!") " were banished to their own library --- but programmers are still free to use that library.") "\n\n" (p "While these are worthwhile steps for many reasons, they do not solve the underlying problem. Library implementors who deal in lists must still either set up elaborate guards against mutation, pretend that the problem doesn't matter, or require the use of a special immutable-list datatype that is incompatible with libraries whose authors set up elaborate guards or ignore the problem.") "\n\n" (p "Why all this hassle? If most Scheme code really does use and expect pairs in a functional way, can't we just switch to immutable pair? Most Scheme code will still work, untold security holes will have been closed, specifications will become instantly tighter, and language extensions like contracts will work better.") "\n\n" (p "Schemers have been reluctant to make this leap, because it has never been clear just how much code relies on mutable pairs. We donât know how much the switch will cost in porting time and long-term incompatibility, and we donât really know how much we will gain. We won't know until we try it.") "\n\n" (p "For PLT Scheme v4.0, weâre going to try it. In our main dialects of Scheme (such as the " (tt "mzscheme") " language), " (tt "cons") " will create immutable pairs, and " (tt "pair?") " and " (tt "list?") " will recognize only immutable pairs and lists. The " (tt "set-car!") " and " (tt "set-cdr") " procedures will not exist. A new set of procedure " (tt "mcons") ", " (tt "mcar") ", " (tt "mcdr") ", " (tt "set-mcar!") ", and " (tt "set-mcdr!") " will support mutable pairs. (A related v4.0 change is that" (tt " define-struct") " by default creates immutable structure types.)") "\n\n" (p "Of course, PLT Scheme v4.0 will support an R5RS language where " (span ((style "font-family:monospace;"))) (tt "cons") " is " (tt "mcons") ", and so on, so many old programs can still run easily in the new version. The difference is that interoperability between R5RS libraries and PLT Scheme libraries will be less direct than before.") "\n\n" (p (b "Experience So Far")) "\n\n" (p "PLT Scheme v3.99.0.2 exists already in a branch of our SVN repository, and it will soon move to the SVN trunk. That is, we have already ported at least a half million lines of Scheme code to a dialect without " (tt "set-car!") " and " (tt "set-cdr!") ".") "\n\n" (p "The conversion took about eight hours. Obviously, relatively little code had to change. The following are the typical porting scenarios:" (p "\n\n" (ul (li (p "The " (tt "reverse!") " and " (tt "append!") " functions were frequently used for âlinear updatesâ by performance-conscious implementors. As our underlying Scheme implementation has improved, however, the performance benefits of these functions has become less. All uses could be replaced with " (tt "reverse") " and " (tt "append") ".") "\n\n") (li (p "The " (tt "set-cdr!") " operation was often used to implement an internal queue. Such internal queues were easily changed to use " (tt "mcons") "," (tt " mcar") ", " (tt "mcdr") ", and " (tt "set-mcdr!") ".") "\n\n") (li (p "An association-list mapping was sometimes updated with " (tt "set-cdr!") " when a mapping was present, otherwise the list was extended. Since the extension case was supported, it was easy to just update the list functionally. (The relevant lists were short; if the lists were long, the right change would be to use a hash table instead of a list.)") "\n\n") (li " " (p "A pair was sometime used for an updatable mapping where a distinct structure type is better. The quick solution was to throw in a mutable box in place of the value.") "\n")) "\n\n" (p "The PLT Scheme code might be better positioned for the switch than arbitrary Scheme code. Most of it was written by a handful of people who understood the problems of mutable pairs, and who might therefore shy away from them. However, the PLT Scheme code base includes a lot of code that was not written specifically for PLT Scheme, including Slatex, Tex2page, and many SRFI reference implementations. With the exception of SRFI-9, which generalizes " (tt "set!") " to work with pairs, the SRFI implementations were remarkably trouble free. (Thanks to Olin Shivers for making mutation optional in the âlinear updateâ functions like " (tt "reverse!") " from SRFIs 1 and 32.)") "\n\n" (p "In addition, we looked at a number of standard Scheme benchmarks, which can be found here:") "\n\n" (p (a ((href "http://svn.plt-scheme.org/plt/trunk/collects/tests/mzscheme/benchmarks/common/")) "   http://svn.plt-scheme.org/plt/trunk/collects/tests/mzscheme/benchmarks/common/")) "\n\n" (p "Of the 28 benchmarks, eight of them mutate pairs. Four of those are trivially converted to functional programs, along the lines of the scenarios above. One, " (tt "destruct") ", is designed specifically to test mutation performance, so it makes no sense to port. Another, " (tt "sort1") ", is a sorting algorithm that inherently relies on mutation; a functional sort is obviously possible, but that would be a different benchmark. The " (tt "conform") " benchmark uses mutable pairs for tables in a relatively non-local way; as a modern Scheme program, it would probably be written\nwith structures, but itâs not trivial to port. The " (tt "peval") " benchmark uses pairs to represent Scheme programs, and it partially evaluates the program by mutating it, so it is not trivial to port. To summarize, out of 28 old, traditional benchmark programs, only two represent interesting programs that are not easily adapted to immutable pairs. (They run in PLT Schemeâs R5RS language, of course.)\n") "\n\n" (p "Finally, we selected a useful third-party library that is not included with PLT Scheme. We checked the generic SSAX implementation (not the PLT Scheme version), and we found a couple of uses of " (tt "set-car!") " and " (tt "set-cdr!") ". Again, they fall into the above queue and association-list categories that are easily and locally converted.") "\n\n" (p "Meanwhile, as we start to use v3.99 to run scripts in our day-to-day work, immutable pairs have so far created no difficulty at all.  So far, then, our optimism in trying immutable pairs seems to be justified; it just might work.") "\n\n" (p (b "But It") (span ((style "font-weight: bold;")) "â") (b "s Lisp Tradition!")) "\n\n" (p "A typical response to news of the demise of mutable pairs is that it will create lot of trouble, because mutable pairs are Scheme tradition, and surely lots of useful old code exploits them in lots of places.") "\n\n" (p "Weâre eager to hear whether anyone has such code. Our initial hypothesis is that practically all old code falls into one of two categories:") "\n\n" (ul (li " " (p "The code is easily ported to immutable pairs, along the same lines as above (i.e., local queues and small association lists).") "\n\n") (li " " (p "The code so old and generic that it can be run as an R5RS program.  It wonât call into the large PLT Scheme set of libraries that will expect immutable pairs, and it can easily be used as a library with wrappers that convert mutable pairs back and forth with immutable pairs.") "\n")) "\n\n" (p "Frankly, weâre not so eager to hear opinions based on guesswork about existing code and how it might get used. Download v3.99 from SVN or as a nightly build when it becomes available; let us know your guesses about how running your old code would go, but then let us know what" (i " actually") " happens.") "\n\n" (p "The immutable-pairs plan for v4.0 is not set in stone, but we wonât make the decision based on guesswork. More libraries (other than R5RS) to aid compatibility may be useful, but so far we donât have a tangible need for them. In any case, weâll revert to mutable pairs only if significant experience with the pre-release version demonstrates that it really wonât work.")))) (link ((href "http://blog.racket-lang.org/feeds/1842888151218385802/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=1842888151218385802") (rel "replies") (title "32 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1842888151218385802") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1842888151218385802") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html") (rel "alternate") (title "Getting rid of set-car! and set-cdr!") (type "text/html"))) (author (name "Matthew Flatt") (uri "https://www.blogger.com/profile/03369511886823036667") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "32")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8762291102712481013") (published "2007-09-14T17:56:00.000-04:00") (updated "2012-06-24T22:14:27.370-04:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "meta"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Don't say \"abstract\" (instead say \"general\")") (post-content "The word \"abstract\" is common in computer science.  An abstract thing is one where some part of the whole is unspecified.  For instance, the expression \"3*x + 3\" is an abstraction of the expression \"3*4+3\", because the \"x\" is unspecified. Likewise, a function is an abstraction over some set of values, supplied when the function is called." (br) "\nThe word \"general\" is not at all common in computer science.  In non-computer-science use, the word \"general\" is used to describe things that may be applied to more than one thing or situation.  For instance, a \"more general solution\" is one that applies not just to the problem at hand, but instead to a larger set of problems." (br) "\nFrom a computer science perspective, things that are abstract are also general.  Things that are general are also abstract.  Substituting the word \"general\" for the word \"abstract\" would not be a terrible hurdle." (br) "\nFrom a non-computer-science perspective, however, \"general\" and \"abstract\" have very different implications.  Something that is general is better: it is more useful, it applies more frequently.  Something that is abstract, though, is worse: it is lacking detail, it is non-concrete." (br) "\nThis is one difference--the major difference?--between computer science (and of course mathematics) and the real world: " (i "the abstract is no less concrete") ". We can abstract over expressions using functions, and we can even abstract over syntactic things, using hygienic macros.  The result of such abstraction is a perfectly well-defined element in our universe of expressions." (br) "\nIn computer science, then, the pejorative sense of the word \"abstract\" is misleading, and the use of the terms \"abstract\" and \"abstraction\" merely provides ammunition for those who wish that we could all still be writing assembly language." (br) "\nI suggest instead the use of the word \"general.\"" (br) "\nJohn \"purveyor of barbarous neologisms\" Clements") (link ((href "http://blog.racket-lang.org/feeds/8762291102712481013/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=8762291102712481013") (rel "replies") (title "4 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/8762291102712481013") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/8762291102712481013") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/09/dont-say-abstract-instead-say-general.html") (rel "alternate") (title "Don't say \"abstract\" (instead say \"general\")") (type "text/html"))) (author (name "John Clements") (uri "https://www.blogger.com/profile/10401643794201938443") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "4")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1723323722672477302") (published "2007-09-09T20:54:00.001-04:00") (updated "2012-06-24T22:24:10.060-04:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "drracket"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "tools"))) (title ((type "text")) "Completions in DrScheme (finally)") (post-content (a ((href "http://bp3.blogger.com/_gJUvnpacURg/RuSWwE8Za5I/AAAAAAAAAA8/KMW42c1uU2g/s1600-h/Picture+2.png") (onblur "try {parent.deselectBloggerImageGracefully();} catch(e) {}")) "\n" (img ((alt "") (border "0") (id "BLOGGER_PHOTO_ID_5108373630049938322") (src "http://bp3.blogger.com/_gJUvnpacURg/RuSWwE8Za5I/AAAAAAAAAA8/KMW42c1uU2g/s400/Picture+2.png") (style "float:right; margin:0 0 10px 10px;cursor:pointer; cursor:hand;")))) "\n" (p "\nDrScheme now supports a language- sensitive (but not lexical- scope sensitive) completion feature. Type " "<" "menukey" ">" "-/ and see what names are available to finish off the word you're typing. \n") "\n" (p "\nThanks to " (a ((href "http://www.cs.uchicago.edu/~jacobm/")) "Jacob") " (and do follow that link; we all need a little more love in our lives) and " (a ((href "http://turingcompletewasteoftime.blogspot.com/")) "Mike") " for taking the initiative to actually implement what is probably the most requested feature in DrScheme at the moment.\n")) (link ((href "http://blog.racket-lang.org/feeds/1723323722672477302/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=1723323722672477302") (rel "replies") (title "2 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1723323722672477302") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1723323722672477302") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/09/completions-in-drscheme-finally.html") (rel "alternate") (title "Completions in DrScheme (finally)") (type "text/html"))) (author (name "Robby Findler") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (media:thumbnail ((height "72") (url "http://bp3.blogger.com/_gJUvnpacURg/RuSWwE8Za5I/AAAAAAAAAA8/KMW42c1uU2g/s72-c/Picture+2.png") (width "72") (xmlns:media "http://search.yahoo.com/mrss/"))) (thr:total "2")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2026851843466892876") (published "2007-09-06T10:30:00.000-04:00") (updated "2012-06-24T22:15:35.756-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "code-stats"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "hacking"))) (title ((type "text")) "How many occurrences of car in the PLT source code?") (post-content "Lets play a guessing game. See who can guess:\n" (br) "\n" (ul "\n" (li " How many occurrences of the identifier 'car' there are in the PLT tree (when using 'read' and just counting the symbols that come out)? ") "\n" (li " Where does 'car' rank on the list of the most commonly used identifiers?\n") "\n" (li " What is the most common identifier, and how many occurrences of it are there?") "\n") "\nUPDATE: The two files " (tt "raw-hattori") " and " (tt "raw-kajitani.ss") " are generated files containing solutions to " (a ((href "http://en.wikipedia.org/wiki/Nonogram")) "Paint by Numbers") " problems and about 30,000 occurrences of " (tt "x") " and " (tt "o") ". Discounting them, this is the list of the top ten identifiers and the number of occurrences:\n\n" (br) "\n" (pre "((define 25294)\n (quote 24101)\n (lambda 18883)\n (let 14796)\n (send 14349)\n (x 11877)\n (if 11118)\n (... 8474)\n (car 7610)\n (syntax 6537))\n") "\nThe identifier " (tt "cdr") " ranks 21st with 5,259 occurrences, " (tt "let*") " has 3,066 which, when combined with " (tt "let") " comes out at 17,862, still not enough to pass " (tt "lambda") ". Speaking of combining, " (tt "Î»") " has 2,271 occurrences, which is also not enough to move " (tt "lambda") ". Finally " (tt "map") " comes in 32nd with 3,853 occurrences and " (tt "foldl") " beats out " (tt "foldr") " (1168th place with 75 occurrences vs 1451st place with 58 occurrences).") (link ((href "http://blog.racket-lang.org/feeds/2026851843466892876/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=2026851843466892876") (rel "replies") (title "17 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2026851843466892876") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2026851843466892876") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/09/how-many-occurrences-of-car-in-plt.html") (rel "alternate") (title "How many occurrences of car in the PLT source code?") (type "text/html"))) (author (name "Robby Findler") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "17")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8001080601289810210") (published "2007-09-03T18:26:00.001-04:00") (updated "2012-06-24T22:24:10.069-04:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "drracket"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Birthday Easter Eggs in DrScheme") (post-content (p "\nDrScheme has five birthday easter eggs in it, one for each of the main contributers to the PLT Scheme infrastructure (" (a ((href "http://www.ccs.neu.edu/%7Ematthias/")) "Matthias") ", " (a ((href "http://www.cs.utah.edu/%7Emflatt/")) "Matthew") ", " (a ((href "http://www.barzilay.org/")) "Eli") ", " (a ((href "http://www.cs.brown.edu/%7Esk/")) "Shriram") ", and " (a ((href "http://www.cs.uchicago.edu/%7Erobby/")) "me") "). I put four of them in there, and mostly concentrated on making them fun. Matthew added mine and the best part of that one is figuring out on earth it shows up (it is quite tricky to find the code that actually makes that one appear).\n") "\n\n" (p "\nI don't want to ruin the fun of searching for the Easter Eggs yourself, but just to get you started, do have a look at " (a ((href "http://svn.plt-scheme.org/plt/trunk/collects/framework/private/bday.ss")) (tt "plt/collects/framework/private/bday.ss") " ") "\nfor Matthias, Matthew, Shriram, and Eli's birthdays. Mine is July 2nd.") "\n\n" (p "\nHappy Hunting!\n")) (link ((href "http://blog.racket-lang.org/feeds/8001080601289810210/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=8001080601289810210") (rel "replies") (title "1 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/8001080601289810210") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/8001080601289810210") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/09/birthday-easter-eggs-in-drscheme.html") (rel "alternate") (title "Birthday Easter Eggs in DrScheme") (type "text/html"))) (author (name "Robby Findler") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "1")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5223454205316278555") (published "2007-08-22T21:54:00.001-04:00") (updated "2012-06-24T22:24:10.065-04:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "drracket"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "new-feature"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "New Debugger Features") (post-content (a ((href "http://bp3.blogger.com/_K_e8C0ioWW4/Rs4dcbbe8ZI/AAAAAAAAAAM/SFyArWI5JrA/s1600-h/multi-debug.png") (onblur "try {parent.deselectBloggerImageGracefully();} catch(e) {}")) (img ((alt "") (border "0") (id "BLOGGER_PHOTO_ID_5102047802093924754") (src "http://bp3.blogger.com/_K_e8C0ioWW4/Rs4dcbbe8ZI/AAAAAAAAAAM/SFyArWI5JrA/s400/multi-debug.png") (style "float:right; margin:0 0 10px 10px;cursor:pointer; cursor:hand;")))) "\n" (p "\nAs Eli mentioned, v371 introduces support for debugging several files at a time, as well as new buttons for stepping " (span ((style "font-style: italic;")) "Over") " and " (span ((style "font-style: italic;")) "Out") " of expressions in the debugger.\n") "\n\n" (p "\nDebugging across multiple files is easy.  Start by opening the \"main\" file that you want to debug and all of the files it requires (directly or indirectly) that you want to debug along with it.  Then click Debug in the main file's frame.  For example, if I wanted to see what the FrTime dataflow engine (in " (span ((style "font-family:courier new;")) "frp-core.ss") ") does when a particular program (say " (span ((style "font-family:courier new;")) "demo-module.ss") ") runs, I would open these two files and click Debug in the frame for " (span ((style "font-family:courier new;")) "demo-module.ss") ".\n") "\n\n" (p "\nAs each required file loads, DrScheme offers the option of debugging it.  If you choose \"yes\", then the file is included in the debugging session, so you can set breakpoints and step into it.  (Note that this will make the code in the file run more slowly, and single-stepping at calls to its functions will bring you into it.)   A file can only participate in one debugging session at a time, so if you're already debugging it with some other program, DrScheme will tell you so (instead of asking whether to debug it).   For best results, all of the files you debug should be modules.  Once a file is included in the debugging session, you can set breakpoints and step into it as if you were debugging it by itself.\n") "\n\n" (p "\nAs soon as you can debug programs that span several files, it's particularly valuable to be able to do more than set breakpoints and single-step.  This is the motivation for the new " (span ((style "font-style: italic;")) "Over") " and " (span ((style "font-style: italic;")) "Out") " buttons, which are also quite simple.  If the execution marker is at the start of an expression that's not in tail position, then you can step over the entire expression, which is equivalent to setting a one-shot breakpoint at the end of the expression and continuing.  (If you've set breakpoints inside the expression, or inside any functions it calls, then execution may suspend before reaching the end.)  Likewise, if execution is suspended and the current expression is evaluating within a debugging-enabled context, then you can step out to the innermost such context.  This would be difficult to simulate by hand, since you'd need to keep track of recent callers.\n") "\n\n" (p "\nAt any given point, either or both of the " (span ((style "font-style: italic;")) "Over") " and " (span ((style "font-style: italic;")) "Out") " buttons may be disabled, but over the course of a session they can eliminate a lot of tedium.\n") "\n\n" (p "\nThe screenshot above shows a session debugging " (span ((style "font-family:courier new;")) "frp-core.ss") " as used by " (span ((style "font-family:courier new;")) "demo-module.ss") ".  Execution is suspended on a right paren, so stepping " (span ((style "font-style: italic;")) "Over") " is disabled, but we see the expression's value at the upper left, we've moused over " (span ((style "font-style: italic;")) "b") " to see its value at the upper right, and it's possible to step " (span ((style "font-style: italic;")) "Out") ".\n")) (link ((href "http://blog.racket-lang.org/feeds/5223454205316278555/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=5223454205316278555") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/5223454205316278555") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/5223454205316278555") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/08/new-debugger-features.html") (rel "alternate") (title "New Debugger Features") (type "text/html"))) (author (name "Greg Cooper") (uri "https://www.blogger.com/profile/09434692258819430131") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (media:thumbnail ((height "72") (url "http://bp3.blogger.com/_K_e8C0ioWW4/Rs4dcbbe8ZI/AAAAAAAAAAM/SFyArWI5JrA/s72-c/multi-debug.png") (width "72") (xmlns:media "http://search.yahoo.com/mrss/"))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6735564762000887924") (published "2007-08-18T04:00:00.000-04:00") (updated "2011-11-09T22:52:20.951-05:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "release"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "PLT Scheme v371") (post-content "PLT Scheme version 371 is now available from\n\n  " (a ((href "http://download.plt-scheme.org/")) "http://download.plt-scheme.org/") "\n\nThis is mostly a bug-fix release.\n\nChanges:\n" (ul (li "The debugger now works across multiple files and supports \"step over\" and \"step out\" operations.") (li "HtDP teachpacks: the world.ss teachpack now exports two add-line functions: one from image.ss and one for adding lines to scenes.") (li "ProfessorJ now includes a language level between Intermediate and Advanced, Intermediate + access, that includes all of Intermediate and introduces access modifiers and overloading.  The language manuals contain the complete details.")) (p "Feedback Welcome.") (p " ")) (link ((href "http://download.plt-scheme.org/drscheme/") (rel "related") (title "PLT Scheme v371"))) (link ((href "http://blog.racket-lang.org/feeds/6735564762000887924/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=6735564762000887924") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/6735564762000887924") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/6735564762000887924") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/08/plt-scheme-v371.html") (rel "alternate") (title "PLT Scheme v371") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_lx1aK_XwT-o/SxSPoMzJgLI/AAAAAAAAAA8/v5ASXddGsSc/s32-R/eli-small.jpg") (width "28")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3907084013741018564") (published "2007-08-07T20:41:00.001-04:00") (updated "2012-06-24T22:16:39.552-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "code-stats"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "macros"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "experience-reports"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "modules"))) (title ((type "text")) "PLT Modules and Separate Compilation") (post-content (p "\nFor my summer job this year, I'm programming in Common Lisp; this is the\nfirst time I've used the language for anything more than toy examples.  The\nexperience has given me new appreciation for the PLT module system and how\nit enables separate compilation.\n") "\n\n" (p "\nLisp has a package system, of course, but it's not the same thing.  It's\nprimarily a tool to make sure that the symbols in one part of the program\ndon't collide with the symbols in another part (unless you ask them to).\nPackages aren't about abstraction: while you can specify which symbols are\nexported from the package and which aren't, that's just a suggestion that's\nnot enforced by the language.\n") "\n\n" (p "\n(You'll notice, by the way, that I used the word \"symbol\" and not\n\"identifier,\" which is the more common term in the study of programming\nlanguages, in the previous paragraph.  That's deliberate: the Lisp package\nsystem works on symbols, not identifiers, so it also affects quoted,\nliteral symbols.  In my experience, this is sometimes helpful, sometimes a\nreal pain, and usually completely unexpected.  But that's a topic for\nanother post.)\n") "\n\n" (p "\nAlso, there's no real relationship between Lisp packages and files.  One\npackage can be spread across multiple files, and one file can contain code\nin several different packages.\n") "\n\n" (p "\nAll this means that separate compilation in Lisp is a real problem.  There\nis a system, ASDF, that attempts to address this need.  (For more details,\nconsult " (a ((href "http://www.cliki.net/asdf")) "the closest thing to a\nhomepage") " that I could find for ASDF.)  I'm no expert on ASDF, but\nessentially the programmer specifies  the dependencies between source\nfiles, in a set of files that exist parallel to the Lisp source.  (ASDF\ndoes support grouping source files into larger chunks and specifying\ndependencies between those chunks, but as far as I can tell that's largely\na convenience thing.)\n") "\n\n" (p "\nThe key thing for separate compilation, of course, is the dependencies.\nWith ASDF, the programmer specifies those manually, and then ASDF basically\ndoes a topological sort such that if file " (span ((style "font-style: italic;")) "a") " depends on file " (span ((style "font-style: italic;")) "b") ", then ASDF ensures that " (span ((style "font-style: italic;")) "a") " is compiled and loaded before " (span ((style "font-style: italic;")) "b") " is compiled, and again before B is loaded.  (This should start sounding a little familiar to folks who've worked in the area where PLT's modules and macros intersect.)" (span ((style "font-family:courier new;")) (span ((style "font-family:georgia;")))) "\n") "\n\n" (p "\nSo far, so good.  Unfortunately, there are a couple of problems with this\nsetup.  First, the dependencies between files are specified " (span ((style "font-style: italic;")) "outside") " the language.  This means that,\nif you happen to forget one, the results are not well-defined.  If ASDF\nhappens to choose an order that's consistent with the dependency you left\nout, everything will just work, and you won't have any indication that\nthere's a problem.  If, however, it doesn't, then you'll get random\n\"undefined function\" and \"undefined symbol\" errors---if you're lucky (at\nleast in SBCL, the implementation of Common Lisp that I use at my job).  In\nPLT, by contrast, inter-module dependencies are part of the language, so\nthe compiler will " (span ((style "font-style: italic;")) "always") " give you\nan undefined-identifier error when it tries to compile a module in which\nyou've forgotten a " (span ((style "font-family:courier new;")) "require" (span ((style "font-family:georgia;")) " form.  Big win, in my opinion (although we\ncould argue about whether this should be an error or a warning, and whether\nthe compiler should report lots of errors or just one before giving up\ncompletely).\n"))) "\n\n" (p "\nSecond, because ASDF lives outside the compiler, it can't be very smart\nabout how macros affect separate compilation.  I don't fully understand\nthis, perhaps because the folks who've been mentoring me at my job haven't\nthought it worth the time to explain it to me fully.  But it appears that,\nif you change a macro that's used in other files, or change a function\nthat's called by a macro " (span ((style "font-family:courier new;")) (span ((style "font-family:georgia;")) "at expansion time, you have to do\nthe effect of a " (span ((style "font-family:courier new;")) "make clean" (span ((style "font-family:georgia;")) " in a distressingly large number of cases.\nThis is a real problem when you've got a large source base (~200K LOC, I\nthink) and you're trying to speed up builds, as we are, and it's " (span ((style "font-style: italic;")) "especially") " problematic if you're trying\nto run unrelated parts of the build in parallel.\n"))))) "\n\n" (p "\nI've certainly griped about the complexity of the interaction between PLT's\nmodules and macros in the past.  But after this summer, I have to say it's\nawfully nice to have a module system that Just Works for separate\ncompilation.  Nicely done, Matthew.\n") "\n\n" (p "\n(I've pointed the folks at work at Matthew's " (a ((href "http://www.cs.utah.edu/plt/publications/macromod.pdf")) "ICFP 02 paper") ", but as that technique requires a lot of support from the compiler, and we don't have the resources to add the necessary support to SBCL ourselves, I don't know that it'll be more than a \"wouldn't it be nice if we could do that?\")\n") "\n\n" (p "\n(Answer to rhetorical question in preceding paragraph: Yes.  Yes it would.) " "\n")) (link ((href "http://blog.racket-lang.org/feeds/3907084013741018564/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=3907084013741018564") (rel "replies") (title "3 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/3907084013741018564") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/3907084013741018564") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/08/plt-modules-and-separate-compilation.html") (rel "alternate") (title "PLT Modules and Separate Compilation") (type "text/html"))) (author (name "Richard Cobbe") (uri "https://www.blogger.com/profile/14142695225678191312") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "3")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1834491843674778394") (published "2007-08-06T11:21:00.000-04:00") (updated "2012-06-24T22:17:09.120-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "macros"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "hacking"))) (title ((type "text")) "macros and hygiene, resumed") (post-content "The Friday entry demonstrates how to break hygiene for a macro that defines a generator. Ryan Culpepper, the local macrologist, reminded me that expanding into this macro goes wrong in the syntax-case world: \n\n" (div ((class "scheme")) (pre "(" (span ((class "keyword")) "define-syntax") " " (span ((class "variable")) "define-that-expands-into-define/y") " \n  (" (span ((class "keyword")) "syntax-rules") " ()\n    ((" (span ((class "variable")) "_") " (" (span ((class "variable")) "name") " " (span ((class "variable")) "arg") " ...) " (span ((class "variable")) "body") " ...) \n     (" (span ((class "variable")) "define/y") " (" (span ((class "variable")) "name") " " (span ((class "variable")) "arg") " ...) " (span ((class "variable")) "body") " ...))))\n\n(" (span ((class "variable")) "define-that-expands-into-define/y") " (" (span ((class "variable")) "bar") ")\n  (" (span ((class "variable")) "yield") " " (span ((class "selfeval")) "1") ")\n  (" (span ((class "variable")) "yield") " " (span ((class "selfeval")) "2") ")\n  " (span ((class "keyword")) "'") (span ((class "variable")) "finished") ")")) "\n\nRun this in Pretty Big [DrScheme] and you get a strange note concerning MrEd's yield or run it in MzScheme [Textual] and you get an error message about 'yield' being unbound. \n\nWhat gives? The 'stx' of " (code "datum->syntax-object") " is the syntactic context of the new macro but it doesn't bind yield; it just uses it. So the definition of " (code "yield") " in " (code "define/y") " must be a different one according to the hygiene standards. Ergo yield is free at the top-leve [MzScheme] or bound to the yield import from MrEd [Pretty Big]. \n\n;; --- \n\nHow can we try to fix this? The explanation suggests we use a different macro definition for " (code "define/y") ", one that uses a context that is guaranteed from the body of an instance of " (code "define/y") ": \n\n" (div ((class "scheme")) (pre "(" (span ((class "keyword")) "require") " (" (span ((class "variable")) "lib") " " (span ((class "selfeval")) "\"control.ss\"") "))\n\n(" (span ((class "keyword")) "define-syntax") " (" (span ((class "variable")) "define/y") " " (span ((class "variable")) "stx") ")\n  (" (span ((class "keyword")) "syntax-case") " " (span ((class "variable")) "stx") " ()\n    [(" (span ((class "variable")) "_") " (" (span ((class "variable")) "name") " " (span ((class "variable")) "arg") " ...) " (span ((class "variable")) "body0") " " (span ((class "variable")) "body") " ...)\n     (" (span ((class "keyword")) "with-syntax") " \n         ((" (span ((class "variable")) "yield-name") " \n           (" (span ((class "builtin")) "datum-" ">" "syntax-object") " (" (span ((class "keyword")) "syntax") " " (span ((class "variable")) "body0") ") " (span ((class "keyword")) "'") (span ((class "variable")) "yield") ")))\n       (" (span ((class "keyword")) "syntax") "\n        (" (span ((class "keyword")) "define") " (" (span ((class "variable")) "name") " " (span ((class "variable")) "arg") " ...)\n          (" (span ((class "keyword")) "define") " (" (span ((class "variable")) "yield-name") " " (span ((class "variable")) "x") ")\n            (" (span ((class "variable")) "control") " " (span ((class "variable")) "resume-here") "\n             (" (span ((class "keyword")) "set!") " " (span ((class "variable")) "name") " \n                   (" (span ((class "keyword")) "lambda") " ()\n                     (" (span ((class "variable")) "prompt") " (" (span ((class "variable")) "resume-here") " " (span ((class "keyword")) "'") (span ((class "variable")) "dummy") "))))\n             " (span ((class "variable")) "x") "))\n          (" (span ((class "variable")) "prompt") " " (span ((class "variable")) "body0") " " (span ((class "variable")) "body") " ...))))]))\n\n(" (span ((class "keyword")) "define-syntax") " " (span ((class "variable")) "define-that-expands-into-define/y") " \n  (" (span ((class "keyword")) "syntax-rules") " ()\n    ((" (span ((class "variable")) "_") " (" (span ((class "variable")) "name") " " (span ((class "variable")) "arg") " ...) " (span ((class "variable")) "body") " ...) \n     (" (span ((class "variable")) "define/y") " (" (span ((class "variable")) "name") " " (span ((class "variable")) "arg") " ...) " (span ((class "variable")) "body") " ...))))\n\n" (span ((class "comment")) ";; --- try it out ---\n") "\n(" (span ((class "variable")) "define-that-expands-into-define/y") " (" (span ((class "variable")) "bar") ")\n  (" (span ((class "variable")) "yield") " " (span ((class "selfeval")) "1") ")\n  (" (span ((class "variable")) "yield") " " (span ((class "selfeval")) "2") ")\n  " (span ((class "keyword")) "'") (span ((class "variable")) "finished") ")\n\n(" (span ((class "builtin")) "list") " (" (span ((class "variable")) "bar") ") (" (span ((class "variable")) "bar") ") (" (span ((class "variable")) "bar") ") (" (span ((class "variable")) "bar") "))\n")) "\n\nRun it. You will find that it works as expected. \n\nTomorrow, time permitting, I will tell you what's wrong with it and how you can fix it.") (link ((href "http://blog.racket-lang.org/feeds/1834491843674778394/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=1834491843674778394") (rel "replies") (title "3 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1834491843674778394") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1834491843674778394") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/08/macros-and-hygiene-resumed.html") (rel "alternate") (title "macros and hygiene, resumed") (type "text/html"))) (author (name "matthias") (uri "https://www.blogger.com/profile/00000181081270224360") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.ccs.neu.edu/home/matthias/Images/felleisen1.jpg") (width "23")))) (thr:total "3")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3142659106683415407") (published "2007-08-03T14:06:00.000-04:00") (updated "2012-06-24T22:17:43.685-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "macros"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "delimited continuations"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "tutorials"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "continuations"))) (title ((type "text")) "control and macros") (post-content "After reading the posts on control operators, Vlado Zlatanov decided to\nlook into " (code "prompt, control, fcontrol") " and the rest of the\ngoodies in " (code "control.ss") ".\n\nSo based on the example from the blog post I did this python-like snippet: \n\n" (pre "\n(define/y (step) \n  (yield 1)\n  (yield 2)\n  (yield 3)\n  'finished)\n") "\n\nHe decided to look into turning it into a macro, such that the above\nends up being correct code. When he got stuck, he asked on our mailing list\nand the resulting dialog  was so informative that I decided to blog it. \n\nMy first replay was this suggestion: \n" (div ((class "scheme")) (pre "(" (span ((class "keyword")) "define-syntax") " " (span ((class "variable")) "define/y") "\n  (" (span ((class "keyword")) "syntax-rules") " ()\n    [(" (span ((class "variable")) "_") " " (span ((class "variable")) "yield-name") " (" (span ((class "variable")) "name") " " (span ((class "variable")) "arg") " ...) " (span ((class "variable")) "body") " ...)\n     (" (span ((class "keyword")) "define") " (" (span ((class "variable")) "name") " " (span ((class "variable")) "arg") " ...)\n       (" (span ((class "keyword")) "define") " " (span ((class "variable")) "exit-with") " " (span ((class "selfeval")) "#f") ")\n       (" (span ((class "keyword")) "define") " (" (span ((class "variable")) "switch-control-context") " " (span ((class "variable")) "th") ")\n         (" (span ((class "builtin")) "call/cc") " \n          (" (span ((class "keyword")) "lambda") " (" (span ((class "variable")) "k") ")\n            (" (span ((class "keyword")) "set!") " " (span ((class "variable")) "exit-with") " " (span ((class "variable")) "k") ")\n            (" (span ((class "variable")) "th") "))))\n       (" (span ((class "keyword")) "define") " (" (span ((class "variable")) "yield-name") " " (span ((class "variable")) "x") ")\n         (" (span ((class "builtin")) "call/cc") " \n          (" (span ((class "keyword")) "lambda") " (" (span ((class "variable")) "resume-here") ")\n            (" (span ((class "keyword")) "set!") " " (span ((class "variable")) "name") " \n               (" (span ((class "keyword")) "lambda") " () \n                 (" (span ((class "variable")) "switch-control-context") " \n                  (" (span ((class "keyword")) "lambda") " () \n                     (" (span ((class "variable")) "resume-here") " " (span ((class "keyword")) "'") (span ((class "variable")) "dummy") ")))))\n            (" (span ((class "variable")) "exit-with") " " (span ((class "variable")) "x") "))))\n       (" (span ((class "variable")) "switch-control-context") " (" (span ((class "keyword")) "lambda") " () " (span ((class "variable")) "body") " ...)))]))")) "\nI sent this out with two suggestions. \n\nFirst, use " (code "control.ss") " to simplify the code. Second, use\n" (code "syntax-case") " to eliminate the need for the programmer-user of\n" (code "define/y") " to specify the name of " (code "yield") ". \n\nSo, here is the prompt-based code: \n" (div ((class "scheme")) (pre "(" (span ((class "keyword")) "require") " (" (span ((class "variable")) "lib") " " (span ((class "selfeval")) "\"control.ss\"") "))\n\n(" (span ((class "keyword")) "define-syntax") " " (span ((class "variable")) "define/y") "\n  (" (span ((class "keyword")) "syntax-rules") " ()\n    [(" (span ((class "variable")) "_") " " (span ((class "variable")) "yield-name") " (" (span ((class "variable")) "name") " " (span ((class "variable")) "arg") " ...) " (span ((class "variable")) "body") " ...)\n     (" (span ((class "keyword")) "define") " (" (span ((class "variable")) "name") " " (span ((class "variable")) "arg") " ...)\n       (" (span ((class "keyword")) "define") " (" (span ((class "variable")) "yield-name") " " (span ((class "variable")) "x") ")\n         (" (span ((class "variable")) "control") " " (span ((class "variable")) "resume-here") "\n            (" (span ((class "keyword")) "set!") " " (span ((class "variable")) "name") "\n                  (" (span ((class "keyword")) "lambda") " ()\n                    (" (span ((class "variable")) "prompt") " (" (span ((class "variable")) "resume-here") " " (span ((class "keyword")) "'") (span ((class "variable")) "dummy") "))))\n            " (span ((class "variable")) "x") "))\n       (" (span ((class "variable")) "prompt") " " (span ((class "variable")) "body") " ...))]))\n\n(" (span ((class "variable")) "define/y") " " (span ((class "variable")) "yield") " (" (span ((class "variable")) "step") ") \n  (" (span ((class "variable")) "yield") " " (span ((class "selfeval")) "1") ")\n  (" (span ((class "variable")) "yield") " " (span ((class "selfeval")) "2") ")\n  (" (span ((class "variable")) "yield") " " (span ((class "selfeval")) "3") ")\n  " (span ((class "keyword")) "'") (span ((class "variable")) "finished") ")\n\n(" (span ((class "builtin")) "equal?") " " (span ((class "keyword")) "'") "(" (span ((class "selfeval")) "1") " " (span ((class "selfeval")) "2") " " (span ((class "selfeval")) "3") ") (" (span ((class "builtin")) "list") " (" (span ((class "variable")) "step") ") (" (span ((class "variable")) "step") ") (" (span ((class "variable")) "step") ")))")) "\n\nThis time I include a test case that assures the proper return behavior of\n" (code "yield") ". The definition of " (code "define/y") " shows how to\nmark the return point with " (code "prompt") " and how to switch to this\npoint with " (code "control") " so that your generator can resume the\ntraversal at the place where it was interrupted. \n\nFor the second challenge, I wrote this definition: \n" (div ((class "scheme")) (pre "(" (span ((class "keyword")) "require") " (" (span ((class "variable")) "lib") " " (span ((class "selfeval")) "\"control.ss\"") "))\n\n(" (span ((class "keyword")) "define-syntax") " (" (span ((class "variable")) "define/y") " " (span ((class "variable")) "stx") ")\n  (" (span ((class "keyword")) "syntax-case") " " (span ((class "variable")) "stx") " ()\n    [(" (span ((class "variable")) "_") " (" (span ((class "variable")) "name") " " (span ((class "variable")) "arg") " ...) " (span ((class "variable")) "body") " ...)\n     (" (span ((class "keyword")) "with-syntax") " \n         ((" (span ((class "variable")) "yield-name") " (" (span ((class "builtin")) "datum-" ">" "syntax-object") " " (span ((class "variable")) "stx") " " (span ((class "keyword")) "'") (span ((class "variable")) "yield") ")))\n       (" (span ((class "keyword")) "syntax") "\n        (" (span ((class "keyword")) "define") " (" (span ((class "variable")) "name") " " (span ((class "variable")) "arg") " ...)\n          (" (span ((class "keyword")) "define") " (" (span ((class "variable")) "yield-name") " " (span ((class "variable")) "x") ")\n            (" (span ((class "variable")) "control") " " (span ((class "variable")) "resume-here") "\n             (" (span ((class "keyword")) "set!") " " (span ((class "variable")) "name") " \n                   (" (span ((class "keyword")) "lambda") " ()\n                     (" (span ((class "variable")) "prompt") " (" (span ((class "variable")) "resume-here") " " (span ((class "keyword")) "'") (span ((class "variable")) "dummy") "))))\n             " (span ((class "variable")) "x") "))\n          (" (span ((class "variable")) "prompt") " " (span ((class "variable")) "body") " ...))))]))\n\n(" (span ((class "variable")) "define/y") " (" (span ((class "variable")) "step") ") \n  (" (span ((class "variable")) "yield") " " (span ((class "selfeval")) "1") ")\n  (" (span ((class "variable")) "yield") " " (span ((class "selfeval")) "2") ")\n  (" (span ((class "variable")) "yield") " " (span ((class "selfeval")) "3") ")\n  " (span ((class "keyword")) "'") (span ((class "variable")) "finished") ")\n\n(" (span ((class "builtin")) "equal?") " " (span ((class "keyword")) "'") "(" (span ((class "selfeval")) "1") " " (span ((class "selfeval")) "2") " " (span ((class "selfeval")) "3") ") (" (span ((class "builtin")) "list") " (" (span ((class "variable")) "step") ") (" (span ((class "variable")) "step") ") (" (span ((class "variable")) "step") ")))")) "\n\nIf you compare the two macro definitions, you notice very little\ndifference. Indeed, what really differs is the \"interface\" (the API), that\nis, the way you can use the macro: see the test case. What also differs is\nthat the definition uses " (code "syntax-case") " and\n" (code "with-syntax") " to inject " (code "yield") " into the body of\n" (code "define/y") ".\n\nIn response, Vlado wrote \"but isn't this non-hygienic.\" Here is my\nresponse: \n\n" (blockquote "\nHygiene is a uniformity default imposed on the expander with a provision\nfor programmers to choose the non-default. I chose this word  carefully\nwhen I coined the phrase. So what you have *is* a hygienic solution. \n") "\n\nIn other words, injecting an identifier into a macro is not a violation of\nhygiene at all. It's just means using the full power of the macro system.") (link ((href "http://blog.racket-lang.org/feeds/3142659106683415407/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=3142659106683415407") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/3142659106683415407") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/3142659106683415407") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/08/control-and-macros.html") (rel "alternate") (title "control and macros") (type "text/html"))) (author (name "matthias") (uri "https://www.blogger.com/profile/00000181081270224360") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.ccs.neu.edu/home/matthias/Images/felleisen1.jpg") (width "23")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2279205445911348013") (published "2007-08-03T05:35:00.000-04:00") (updated "2012-06-24T22:20:53.813-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "experience-reports"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "web-server"))) (title ((type "text")) "Experience Report: Scheme in Commercial Web Application Development") (post-content (p "Our paper " (a ((href "http://www.untyped.com/downloads/icfp068-welsh.pdf")) ldquo "Experience Report: Scheme in Commercial Web Application Development" rdquo) " is online.  As the title suggests, it describes our experiences over the past year developing a number of web-based applications in PLT Scheme.  If we'd chosen a language like Java or Ruby we could have used a large number of libraries developed for web apps, whereas PLT Scheme has relatively few libraries in this area, and they haven't been tested under high load.  So we were gambling that Scheme would make us so productive we could develop our own libraries " (em "and") " the applications we were contracted to produce in the same  time it would take to develop just the applications in another language.  It was a gamble that paid off.  You'll have to read the paper for all the details, but suffice to say we delivered the applications on time (and more are in development) and our libraries already compare well against big names like Ruby on Rails and J2EE.") "\n\n" (p "On thing that got cut from the paper was our use of " (a ((href "http://www.flapjax-lang.org/")) "Flapjax") " is parts of the interface.  If you write complicated Javascript to take a look at it.  It really does simplify event handling, and our code using Flapjax is half the size of our original code without it.") "\n\n" (p (strong "Update:") " This is more or less the same post as on " (a ((href "http://www.untyped.com/untyping/archives/2007/08/a_scheme_case_s_1.html")) "Untyping"))) (link ((href "http://www.untyped.com/downloads/icfp068-welsh.pdf") (rel "related") (title "Experience Report: Scheme in Commercial Web Application Development"))) (link ((href "http://blog.racket-lang.org/feeds/2279205445911348013/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=2279205445911348013") (rel "replies") (title "3 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2279205445911348013") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2279205445911348013") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/08/experience-report-scheme-in-commercial.html") (rel "alternate") (title "Experience Report: Scheme in Commercial Web Application Development") (type "text/html"))) (author (name "Noel") (uri "https://www.blogger.com/profile/09666551093622614632") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "3")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2363092744453831941") (published "2007-08-02T18:03:00.000-04:00") (updated "2012-06-24T22:18:29.831-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "academic"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "contracts"))) (title ((type "text")) "Relationally-Parametric Polymorphic Contracts") (post-content (p "\nWe've been making progress on the connection between types and\ncontracts.  This paper is a step towards answering the question, \nâWhat would polymorphic types (a la Standard ML) look like in a\ncontract world?â  If you haven't thought much about polymorphic\ntypes, you may find the answer has some subtlety; if you have,\nhopefully you will find the answer reasonable.\n") "\n\n" (p "\nArjun and I want to point out that some of the work in this\npaper was already in an earlier paper that Jacob and Robby wrote, but\nthe material was excised from the public version, so we weren't aware\nof it.  But there is some fresh material here as well, and anyway\nRobby and I have been gabbing about this question for years.\n")) (link ((href "http://www.cs.brown.edu/~sk/Publications/Papers/Published/gmfk-rel-par-poly-cont/") (rel "related") (title "Relationally-Parametric Polymorphic Contracts"))) (link ((href "http://blog.racket-lang.org/feeds/2363092744453831941/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=2363092744453831941") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2363092744453831941") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2363092744453831941") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/08/relationally-parametric-polymorphic.html") (rel "alternate") (title "Relationally-Parametric Polymorphic Contracts") (type "text/html"))) (author (name "Shriram Krishnamurthi") (uri "https://www.blogger.com/profile/02956763366608000839") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5517053676294986274") (published "2007-07-30T11:55:00.000-04:00") (updated "2012-06-24T22:19:06.161-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "delimited continuations"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "tutorials"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "continuations"))) (title ((type "text")) "control, resumed") (post-content "Since at least some people helped me re-re-invent prompt after my last post, I thought I would remind people that PLT Scheme is the " (em "only") " production system in the world that provides delimited and (truly) composable continuations directly (and w/o loss of TCO properties). So here is the same fragment again: \n\n" (div ((class "scheme")) (pre "(" (span ((class "keyword")) "require") " (" (span ((class "variable")) "lib") " " (span ((class "selfeval")) "\"control.ss\"") "))\n\n(" (span ((class "keyword")) "define") " (" (span ((class "variable")) "generate-one-element-at-a-time") " " (span ((class "variable")) "a-list") ")\n  (" (span ((class "keyword")) "define") " (" (span ((class "variable")) "control-state") ")\n    (" (span ((class "builtin")) "for-each") " (" (span ((class "keyword")) "lambda") " (" (span ((class "variable")) "an-element-from-a-list") ")\n  (" (span ((class "variable")) "control") " " (span ((class "variable")) "resume-here") "\n    (" (span ((class "keyword")) "set!") " " (span ((class "variable")) "control-state") " " (span ((class "variable")) "resume-here") ")\n    " (span ((class "variable")) "an-element-from-a-list") "))\n              " (span ((class "variable")) "a-list") ")\n    " (span ((class "keyword")) "'") (span ((class "variable")) "you-fell-off-the-end-off-the-list") ")\n  (" (span ((class "keyword")) "define") " (" (span ((class "variable")) "generator") ") (" (span ((class "variable")) "prompt") " (" (span ((class "variable")) "control-state") ")))\n  " (span ((class "variable")) "generator") ")")) "\n\nTake a look, compare and contrast with the previous post. Time permitting, I will continue to show you another control poem soon. P.S. See " (a ((href "http://www.ccs.neu.edu/scheme/pubs/#icfp07-fyf")) "Adding Delimited and Composable Control to a Production Programming Environment ") " for details.") (link ((href "http://blog.racket-lang.org/feeds/5517053676294986274/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=5517053676294986274") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/5517053676294986274") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/5517053676294986274") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/07/control-resumed.html") (rel "alternate") (title "control, resumed") (type "text/html"))) (author (name "matthias") (uri "https://www.blogger.com/profile/00000181081270224360") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.ccs.neu.edu/home/matthias/Images/felleisen1.jpg") (width "23")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2698032372224392708") (published "2007-07-27T18:45:00.000-04:00") (updated "2012-06-24T22:20:07.987-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "tutorials"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "continuations"))) (title ((type "text")) "call/cc and self-modifying code") (post-content "Today I wrote this short illustration of call/cc and posted it on wikipedia: \n\n" (div ((class "scheme")) (pre (span ((class "comment")) ";; [LISTOF X] -" ">" " ( -" ">" " X u 'you-fell-off-the-end-off-the-list)\n") "(" (span ((class "keyword")) "define") " (" (span ((class "variable")) "generate-one-element-at-a-time") " " (span ((class "variable")) "a-list") ")\n  " (span ((class "comment")) ";; (-" ">" " X u 'you-fell-off-the-end-off-the-list)\n") "  " (span ((class "comment")) ";; this is the actual generator, producing one item from a-list at a time\n") "  (" (span ((class "keyword")) "define") " (" (span ((class "variable")) "generator") ")\n     (" (span ((class "builtin")) "call/cc") " " (span ((class "variable")) "control-state") ")) \n  " (span ((class "comment")) ";; [CONTINUATION X] -" ">" " EMPTY\n") "  " (span ((class "comment")) ";; hand the next item from a-list to \"return\" (or an end-of-list marker)'\n") "  (" (span ((class "keyword")) "define") " (" (span ((class "variable")) "control-state") " " (span ((class "variable")) "return") ")\n     (" (span ((class "builtin")) "for-each") " \n        (" (span ((class "keyword")) "lambda") " (" (span ((class "variable")) "an-element-from-a-list") ")\n           (" (span ((class "builtin")) "set! return") " ;; fixed\n             (" (span ((class "builtin")) "call/cc") "\n               (" (span ((class "keyword")) "lambda") " (" (span ((class "variable")) "resume-here") ")\n                 (" (span ((class "keyword")) "set!") " " (span ((class "variable")) "control-state") " " (span ((class "variable")) "resume-here") ")\n                 (" (span ((class "variable")) "return") " " (span ((class "variable")) "an-element-from-a-list") ")))))\n        " (span ((class "variable")) "a-list") ")\n     (" (span ((class "variable")) "return") " " (span ((class "keyword")) "'") (span ((class "variable")) "you-fell-off-the-end-off-the-list") "))\n  " (span ((class "comment")) ";; time to return the generator\n") "  " (span ((class "variable")) "generator") ")\n")) "\n\nIt reminded of all the talk in the 1980s and 1990s that self-modifying code is bad. But look at the elegant assignment to " (code "control-state") " within its body. It's such a poem, I thought I'd share it with people since nobody else blogs here anywya.") (link ((href "http://blog.racket-lang.org/feeds/2698032372224392708/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=2698032372224392708") (rel "replies") (title "9 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2698032372224392708") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2698032372224392708") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/07/callcc-and-self-modifying-code.html") (rel "alternate") (title "call/cc and self-modifying code") (type "text/html"))) (author (name "matthias") (uri "https://www.blogger.com/profile/00000181081270224360") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.ccs.neu.edu/home/matthias/Images/felleisen1.jpg") (width "23")))) (thr:total "9")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7201123380885059455") (published "2007-06-14T14:05:00.000-04:00") (updated "2012-06-24T22:20:21.372-04:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "meta"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "Small is Beautiful, Large is Useful, and Scheme is Both") (post-content (p " They say, Scheme is small and this is good.\n\n" (p " Have you heard of X? No? It is " (strong "the") " smallest computational basis. It is a single function that can compute everything a Turing machine can compute; a Church lambda calculus; a Post model; a RAM; a what-have-you model of computation. Indeed, X is so simple that two equations suffice to specify it completely [" (a ((href "http://www.andrew.cmu.edu/user/cebrown/notes/barendregt.html")) "Barendregt") ", " (a ((href "http://www.andrew.cmu.edu/user/cebrown/notes/barendregt.html#8")) "page 166") "]. Imagine that: a complete language report in two lines; a compiler that fits in a few K instead of Ms; no more arguments about smallness. \n\n" (p " Small alone can't be any good. If you used X alone, your programs would be the size of the universe or something like that. That's what the theory of computability teaches us [" (a ((href "http://en.wikipedia.org/wiki/Church-Turing_thesis")) "Church and Turing") "]. Adding LAMBDA and a few primitives to get a pure functional language isn't good enough either. That's what the theory of expressiveness shows [" (a ((href "http://www.ccs.neu.edu/scheme/pubs/#scp91-felleisen")) "Felleisen") "; " (a ((href "http://theory.stanford.edu/people/jcm/publications.htm")) "Mitchell") "; " (a ((href "http://portal.acm.org/citation.cfm?id=99583.99617")) "Riecke") "]. And, using an R5RS Scheme to build large systems with many people at a dozen sites isn't doable either. That's what the PLT experience determined.\n\n" (p "When we set out to construct DrScheme using MzScheme, we also conducted an experiment:\n" (blockquote "\n Could we really build a graphical system that manages (shared) resources and that provides excellent error feedback with just plain Scheme? \n") "\n Could we just add enough libraries to do all this? Or would we have to change the kernel of the language?  As much as we tried to keep MzScheme small, it became clear quickly that we needed exceptions, structures, module-like features, a mechanism for concurrency, a way to manage resources such as windows, tcp connections, and so on. The list isn't infinite but it is much longer than I expected. Our \"Revenge of the Son of the LISP machine\" paper is a good summary for the state of the art around 1999 [" (a ((href "http://www.cs.utah.edu/~mflatt/publications/index.html")) "Flatt and Son") "].\n\n" (p "As language designers we stepped back time and again to look at our monster. What could we remove? What would we have to add in response? For some five years, we had first-class modules (units) and first-class classes in the core of the language. We had almost banned macros. They were so ugly I stopped teaching about them because I did want to use our own dog food in my courses but I couldn't stomach the macro system. It was such a step back from Eugene's extend-syntax. But then Matthew figured out the next big step in macro and module technology [" (a ((href "http://www.cs.utah.edu/~mflatt/publications/index.html")) "Flatt, You Want It When?") "]. And with that out went units and classes from the core and many other things. So we learned lessons, and we need to keep building systems to learn more.\n\n" (p "I have no question that the idea of Scheme is beautiful. At the same time, I have also learned that if I wish to use this beautiful idea in practice, I need to add the ingredients that it takes to build large systems. R6RS reflects this insight, and I am happy about it."))))))) (link ((href "http://blog.racket-lang.org/feeds/7201123380885059455/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=7201123380885059455") (rel "replies") (title "9 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/7201123380885059455") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/7201123380885059455") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/06/small-is-beautiful-large-is-useful-and.html") (rel "alternate") (title "Small is Beautiful, Large is Useful, and Scheme is Both") (type "text/html"))) (author (name "matthias") (uri "https://www.blogger.com/profile/00000181081270224360") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.ccs.neu.edu/home/matthias/Images/felleisen1.jpg") (width "23")))) (thr:total "9")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-994848006948347841") (published "2007-06-09T13:15:00.000-04:00") (updated "2012-06-24T22:20:15.403-04:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "meta"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "R6RS is \"perfect\"") (post-content (p "\nWhen I read the \"side by side\" and \"head to head\" descriptions of the alternatives facing the Scheme community (see Comp.Lang.Scheme and the R6RS mailing list), I am wondering which one is which and which one is better.") (p "\n" (ul "\n " (li " Is it really good that Scheme (the spec) doesn't support a module system?\n " (li " Is it really good that almost all major implementations support their own version of a module system?\n " (li " Is it really good that programmers can't even leave the module structure intact when porting code?\n"))))) (p "\nImagine your own similar questions and add them here. We have lived in a side-by-side universe for a long time, and there are quite a few programmers who have suffered from this not-really-the-same-language problem. Besides the module system, there are other not-quite-the-same-but-related features that implementations have and programmers wish to use.") (p "\nThe R6RS process has pushed several major implementors/implementations to agree on a design for module systems and other constructs. Their report declares that they are ready to put a large amount of work in to get from r5rs to r6rs. I believe that this step would help the community in several arenas, listed in increasing order of relevance:\n" (ol "\n" (li "the academic publishing business\n" (li "the fund raising business \n" (li "adapting each others innovations\n" (li "supporting programmers who learn on one and switch to another implementation\n" (li "supporting commercial programmers who need reassurance that there is more than one implementation and implementor [ever attended Commercial Uses of Functional Programming?]\n"))))))) (p "\nIs the document perfect? Is every construct exactly the 'right thing'? Of course not! Guy and Gerry revised their first Scheme report because they didn't get it 'right'. R3RS and R4RS and R5RS revised flaws in R(n-1)RS because the authors/editors didn't get it 'right'. It is extremely difficult, and usually impossible, to get the design of a complex artifacts (such as a programming language) 'right' the first time. In these cases, it's all about the feedback loop and revising your design based on observations. (Remember the 'science' part in the name of our discipline?)  Indeed, 'right' doesn't exist; what exists is 'most pragmatic and internally beautiful,' and nothing else. \n") (p "Our choice is quite simple: move forward as a community with some amount of convergence (r6rs) or split into dozens of mutually incompatible sub-communities (status quo, including SRFIs).") (p "\n" (em "Also posted as " (a ((href "http://lists.r6rs.org/pipermail/r6rs-discuss/2007-June/002538.html")) "\n\"R6RS is perfect\"") " at the R6RS discussion list."))) (link ((href "http://blog.racket-lang.org/feeds/994848006948347841/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=994848006948347841") (rel "replies") (title "5 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/994848006948347841") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/994848006948347841") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/06/r6rs-is-perfect.html") (rel "alternate") (title "R6RS is \"perfect\"") (type "text/html"))) (author (name "matthias") (uri "https://www.blogger.com/profile/00000181081270224360") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.ccs.neu.edu/home/matthias/Images/felleisen1.jpg") (width "23")))) (thr:total "5")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2262217151421897845") (published "2007-05-22T02:38:00.000-04:00") (updated "2011-11-09T22:52:20.898-05:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "release"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (title ((type "text")) "PLT Scheme version 370") (post-content (div ((align "left")) "PLT Scheme version 370 is now available from\n" (p (center "\n" (a ((href "http://download.plt-scheme.org/")) "http://download.plt-scheme.org/") "\n") "\n") "\nSome highlights: ") "\n" (ul "\n" (li (p "The conservative garbage collector (CGC) has been replaced with a\nprecise garbage collector (3m) in the standard build. For most\nusers, this change simply amounts to \"better performance in space\nand time\". For example, a long-running DrScheme instance typically\nuses much less memory than before.") "\n" (p "\nThe new memory manager also supports a new \"Limit Memory...\" option\n(in DrScheme's \"Scheme\" menu) to limit the memory use of a\nprogramming running inside DrScheme.") "\n" (p "\nFor those who work with C-implemented libraries and extensions, the\nswitch to precise collection may complicate interoperability. To a\nlarge extent, however, " (span ((style "font-family:courier new;")) "(lib \"foreign.ss\")") " works the same with both\ncollectors. (But note that the 3m is a moving collector, so be\ncareful with passing Scheme objects to C.)\n") (p "\nAlthough our pre-built binaries use the new collector, builds from\nsource using the conservative collector are still supported.") "\n") "\n" (li (p "For a program written with one of the the " (a ((href "http://www.htdp.org")) "\"How to Design Programs\"") "\n(HtDP) languages, DrScheme saves the program with meta-information\nthat identifies the language and records the teachpacks used by the\nprogram. DrScheme's teachpack GUI now works only with the HtDP\nlanguages. In other languages, use " (span ((style "font-family:courier new;")) "require") " to access teachpacks.") "\n" (p "\nThe meta-information is in the form of a reader extension that turns\nthe file content into a " (span ((style "font-family:courier new;")) "module") "-based program, which means that\nteaching-language files can be loaded directly into MzScheme or used\nwith other PLT Scheme tools.") "\n") "\n" (li (p "The HtDP " (span ((style "font-family:courier new;")) "\"world.ss\"") " and " (span ((style "font-family:courier new;")) "\"image.ss\"") " teachpacks have been revised,\nincluding support for the creation of animated GIFs.") "\n") "\n" (li (p "Unit-based servlets are no longer supported in the web server. Use\nmodule-based servlets, instead. (Servlets can be implemented using\na " (span ((style "font-family:courier new;")) "unit") " within a module, but the web server's API is provided\nthrough a module.)") "\n") "\n" (li (p "A new " (span ((style "font-family:courier new;")) "(lib \"unit.ss\")") " library replaces the old one and provides a\nsimpler and more flexible syntax. The " (span ((style "font-family:courier new;")) "(lib \"unitsig.ss\")") " library\nis deprecated but still available as " (span ((style "font-family:courier new;")) "(lib \"unitsig200.ss\")") ", and\nthe old " (span ((style "font-family:courier new;")) "(lib \"unit.ss\")") " is available as " (span ((style "font-family:courier new;")) "(lib \"unit200.ss\")") ". "))) "\n" (p "Feedback Welcome, ") "\n" (p (em "The PLT Scheme Team\n")) (a ((href "http://download.plt-scheme.org/")))) (link ((href "http://download.plt-scheme.org/") (rel "related") (title "PLT Scheme version 370"))) (link ((href "http://blog.racket-lang.org/feeds/2262217151421897845/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=2262217151421897845") (rel "replies") (title "2 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2262217151421897845") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/2262217151421897845") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/05/plt-scheme-version-370.html") (rel "alternate") (title "PLT Scheme version 370") (type "text/html"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "2")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3788111355860084168") (published "2007-05-16T17:34:00.000-04:00") (updated "2012-06-24T22:23:35.335-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "script"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "hacking"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "typed-racket"))) (title ((type "text")) "Looking for small Scheme scripts") (post-content (p "As part of the " (a ((href "http://www.ccs.neu.edu/%7Esamth/typed-scheme.html")) "Typed Scheme") " project, we are looking for small Scheme scripts that we can port from PLT Scheme to Typed Scheme.  We would like to investigate if Typed Scheme is capable of checking idiomatic PLT Scheme code, as represented by scripts written by members of the PLT Scheme community.\n") (p "\nTherefore, if you have a simple PLT Scheme program which handles a scripting/processing task, and you are willing to share it with us for the improvement of Typed Scheme, please let " (a ((href "mailto:samth@ccs.neu.edu")) "me") " know.  Typed Scheme currently handles all of 'core' MzScheme, as well as many of the collections (the major exceptions are the class and unit systems).\n") (p "\nIn return, we will inform you of any bugs that we discover during the port.\n") (p "\nMore information about Typed Scheme is available from the webpage:\n" (a ((href "http://www.ccs.neu.edu/%7Esamth/typed-scheme.html") (onclick "return top.js.OpenExtLink(window,event,this)") (target "_blank")) "http://www.ccs.neu.edu/~samth" (wbr "/typed-scheme.html")) "\n")) (link ((href "http://blog.racket-lang.org/feeds/3788111355860084168/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=3788111355860084168") (rel "replies") (title "2 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/3788111355860084168") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/3788111355860084168") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/05/looking-for-small-scheme-scripts.html") (rel "alternate") (title "Looking for small Scheme scripts") (type "text/html"))) (author (name "Sam Tobin-Hochstadt") (uri "https://www.blogger.com/profile/12049111326816937908") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "2")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8672000052255493553") (published "2007-05-10T12:48:00.000-04:00") (updated "2012-06-24T22:24:10.072-04:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "drracket"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "tools"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "keybindings"))) (title ((type "text")) "Adjusting DrScheme's Keybindings") (post-content "Check out " (span ((class "sg")) "Kyle Smith") "'s blog post on how to change " (a ((href "http://www.drscheme.org/")) "DrScheme") "'s keybindings:\n\n" (div ((style "text-align: center;")) (a ((href "http://schemekeys.blogspot.com/2007/05/keybinding-101-in-drscheme.html")) "Keybinding 101 in DrScheme") "\n")) (link ((href "http://schemekeys.blogspot.com/2007/05/keybinding-101-in-drscheme.html") (rel "related") (title "Adjusting DrScheme's Keybindings"))) (link ((href "http://blog.racket-lang.org/feeds/8672000052255493553/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=8672000052255493553") (rel "replies") (title "0 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/8672000052255493553") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/8672000052255493553") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/05/adjusting-drschemes-keybindings.html") (rel "alternate") (title "Adjusting DrScheme's Keybindings") (type "text/html"))) (author (name "Robby Findler") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "0")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1965802899884148737") (published "2007-05-10T12:04:00.000-04:00") (updated "2012-06-24T22:21:48.059-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "macros"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "tools"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "xml"))) (title ((type "text")) "XML Transformation in Scheme") (post-content (p (a ((href "http://www.openqa.org/selenium/")) "Selenium") " is a tool for testing web applications, the core of which is a Javascript library that controls a web browser.  With the " (a ((href "http://www.openqa.org/selenium-ide/")) "Selenium IDE") " you can convert your actions in a web browser into tests, and with the " (a ((href "http://www.openqa.org/selenium-rc/")) "Selenium Remote Control") " you can control a web browser from code.  I've recently been working on adding Selenium Remote Control bindings to PLT Scheme, which has resulted in a nice and hopefully instructional demonstration of XML transformation in PLT Scheme") "\n\n" (p "The Selenium Remote Control is controlled by sending simple messages over HTTP.  The format of the messages isn't important.  What is, is that there are a lot of them, and the API is specified in a file called " (code "iedoc.xml") " that comes with Selenium.  The Java/Python/Ruby bindings are generated using " (a ((href "http://www.w3.org/Style/XSL/")) "XSL") ".  If I was to use XSL I'd have a processing pipeline that uses three languages (XSL, Java, Scheme) which is two more than I'd like.  Hence I turned to " (a ((href "http://planet.plt-scheme.org/display.ss?package=webit.plt&owner=jim")) "WebIt!") ", an XML transformation DSL written in Scheme, to create an all Scheme pipeline.  The rest of this post wshows the steps I used to transform the Selenium API into Scheme code using WebIt!  I think this is interesting in its own right, but also serves as a nice demonstration of the power of macros, which WebIt! makes extensive use of.") "\n\n" (p "My first step is to get an idea of the structure of the XML.  The  bits I'm interested in look like this:") "\n\n" (pre "\n" "<" "function name=\"click\"" ">" "\n  " "<" "param name=\"locator\"" ">" "an element locator" "<" "/param" ">" "\n  " "<" "comment" ">" "Clicks on a link, button, checkbox or radio button.\n  If the click action causes a new page to load (like a link usually\n  does), call waitForPageToLoad." "<" "/comment" ">" "\n" "<" "/function" ">" "\n") "\n\n" (p "Let's read in the XML file and extract all the " (code "function") " elements.  For this I'll use SSAX and SXPath:") "\n\n" (div ((class "scheme")) (pre "(" (span ((class "keyword")) "require") "\n (" (span ((class "variable")) "planet") " " (span ((class "selfeval")) "\"ssax.ss\"") " (" (span ((class "selfeval")) "\"lizorkin\"") " " (span ((class "selfeval")) "\"ssax.plt\"") " " (span ((class "selfeval")) "1") "))\n (" (span ((class "variable")) "only") " (" (span ((class "variable")) "planet") " " (span ((class "selfeval")) "\"sxml.ss\"") " (" (span ((class "selfeval")) "\"lizorkin\"") " " (span ((class "selfeval")) "\"sxml.plt\"") " " (span ((class "selfeval")) "1") ")) " (span ((class "variable")) "sxpath") "))\n\n(" (span ((class "keyword")) "define") " " (span ((class "variable")) "api") "\n  (" (span ((class "builtin")) "with-input-from-file") " " (span ((class "selfeval")) "\"iedoc.xml\"") "\n    (" (span ((class "keyword")) "lambda") " () (" (span ((class "variable")) "ssax:xml-" ">" "sxml") " (" (span ((class "builtin")) "current-input-port") ") " (span ((class "keyword")) "'") "()))))\n\n(" (span ((class "keyword")) "define") " " (span ((class "variable")) "functions") "\n  ((" (span ((class "variable")) "sxpath") " " (span ((class "keyword")) "'") "(" (span ((class "variable")) "//") " " (span ((class "variable")) "function") ")) " (span ((class "variable")) "api") "))")) "\n\n" (p "Ok, so we have all the functions.  Now let's parse them into a more useful datastructure.  Here's my first attempt:") "\n\n" (div ((class "scheme")) (pre "(" (span ((class "keyword")) "require") " (" (span ((class "variable")) "planet") " " (span ((class "selfeval")) "\"xml.ss\"") " (" (span ((class "selfeval")) "\"jim\"") " " (span ((class "selfeval")) "\"webit.plt\"") " " (span ((class "selfeval")) "1") " " (span ((class "selfeval")) "5") ")))\n\n" (span ((class "comment")) ";; struct function : string (listof string)\n") "(" (span ((class "keyword")) "define-struct") " " (span ((class "variable")) "function") " (" (span ((class "variable")) "name") " " (span ((class "variable")) "params") "))\n\n" (span ((class "comment")) ";; parse-function : sxml -" ">" " function\n") "(" (span ((class "keyword")) "define") " (" (span ((class "variable")) "parse-function") " " (span ((class "variable")) "fn") ")\n  (" (span ((class "variable")) "xml-match") " " (span ((class "variable")) "fn") "\n    [(" (span ((class "variable")) "function") " " (span ((class "variable")) "name:") " " (span ((class "keyword")) ",") (span ((class "variable")) "name") "\n               (" (span ((class "variable")) "param") " " (span ((class "variable")) "name:") " " (span ((class "keyword")) ",") (span ((class "variable")) "param-name") " " (span ((class "keyword")) ",") (span ((class "variable")) "desc") ") ...\n               (" (span ((class "variable")) "comment") " " (span ((class "keyword")) ",") (span ((class "variable")) "_") " ...))\n     (" (span ((class "variable")) "make-function") " " (span ((class "variable")) "name") " (" (span ((class "builtin")) "list") " " (span ((class "variable")) "param-name") " ...))]))\n\n(" (span ((class "builtin")) "map") " " (span ((class "variable")) "parse-function") " " (span ((class "variable")) "functions") ")")) "\n\n" (p "The " (code "xml-match") " macro is a pattern matcher for SXML.  You specify the " ldquo "shape" rdquo " of the SXML, and if the input matches the pattern the following expressions are evaluated:") "\n\n" (pre "(xml-match value\n  [(pattern expression " (em "...") ")]" (em "...") ")") "\n\n" (p "The simplified form of a pattern is:") "\n\n" (ul "\n" (li (code "(element " (em "...") ")") " matches an element with the given name.") "\n" (li (code "name: value") " matches an attribute with the given name and value.") "\n" (li (code ",binding") " binds the value of " (code "binding") " to the given name in the scope of the following expressions.") "\n" (li (code "...") " matches zero or more of the preceeding patterns.") "\n") "\n\n" (p "In our example the pattern is:") "\n\n" (div ((class "scheme")) (pre "     (" (span ((class "variable")) "function") " " (span ((class "variable")) "name:") " " (span ((class "keyword")) ",") (span ((class "variable")) "name") "\n               (" (span ((class "variable")) "param") " " (span ((class "variable")) "name:") " " (span ((class "keyword")) ",") (span ((class "variable")) "param-name") " " (span ((class "keyword")) ",") (span ((class "variable")) "desc") ") ...\n               (" (span ((class "variable")) "comment") " " (span ((class "keyword")) ",") (span ((class "variable")) "_") " ...))")) "\n\n" (p "So we're looking for an element called " (code "function") " with an attribute called " (code "name") " the value of which is bound to " (code "name") ".  Then follows zero or more " (code "param") " elements,  with attribute " (code "name") ", the value of which is bound to " (code "param-name") ". Finally we expect a " (code "comment") " element which can contain any amount of data.  The use of " (code "_") " as the binding name is a common convention to indicate data we don't care about but must still match to make our pattern complete.") "\n\n" (p "I run the code in DrScheme and see the result:") "\n\n" (div ((class "scheme")) (em "xml-match: no matching clause found")) "\n\n" (p "Oops.  So our pattern isn't complete.  We've also seen one flaw of WebIt!: it doesn't give very good error messages.  However we can easily fix this by adding a catch all pattern that raises an error telling us what we failed to match.  The code follows.  Notice that I've also added pretty printing to make the unmatched SXML easier to read.") "\n\n" (div ((class "scheme")) (pre "(" (span ((class "keyword")) "require") " (" (span ((class "variable")) "lib") " " (span ((class "selfeval")) "\"pretty.ss\"") "))\n\n" (span ((class "comment")) ";; parse-function : sxml -" ">" " function\n") "(" (span ((class "keyword")) "define") " (" (span ((class "variable")) "parse-function") " " (span ((class "variable")) "fn") ")\n  (" (span ((class "variable")) "xml-match") " " (span ((class "variable")) "fn") "\n    [(" (span ((class "variable")) "function") " " (span ((class "variable")) "name:") " " (span ((class "keyword")) ",") (span ((class "variable")) "name") "\n               (" (span ((class "variable")) "param") " " (span ((class "variable")) "name:") " " (span ((class "keyword")) ",") (span ((class "variable")) "param-name") " " (span ((class "keyword")) ",") (span ((class "variable")) "desc") ") ...\n               (" (span ((class "variable")) "comment") " " (span ((class "keyword")) ",") (span ((class "variable")) "_") " ...))\n     (" (span ((class "variable")) "make-function") " " (span ((class "variable")) "name") " (" (span ((class "builtin")) "list") " " (span ((class "variable")) "param-name") " ...))]\n    [" (span ((class "keyword")) ",") (span ((class "variable")) "err") " (" (span ((class "keyword")) "let") " ([" (span ((class "variable")) "op") " (" (span ((class "builtin")) "open-output-string") ")])\n            (" (span ((class "variable")) "pretty-print") " " (span ((class "variable")) "err") " " (span ((class "variable")) "op") ")\n            (" (span ((class "builtin")) "error") " (" (span ((class "builtin")) "format") " " (span ((class "selfeval")) "\"Didn't match ~n~a~n\"") " (" (span ((class "builtin")) "get-output-string") " " (span ((class "variable")) "op") "))))]))")) "\n\n" (p "Run this code and you'll see the error occurs as we don't allow the description to contain more than one element.  This is easily fixed by extending the pattern to " (code ",desc ...") ".  The next error is more interesting.  The " (code "function") " element contains a " (code "return") " element.  The WebIt! pattern language doesn't allows us to express optional patterns, so we have to duplicate our pattern and include the case of " (code "return") ".  This also requires we extend the defintion of the " (code "function") " structure.") "\n\n" (div ((class "scheme")) (pre (span ((class "comment")) ";; struct function : string string (listof string)\n") "(" (span ((class "keyword")) "define-struct") " " (span ((class "variable")) "function") " (" (span ((class "variable")) "name") " " (span ((class "variable")) "return") " " (span ((class "variable")) "params") "))\n\n" (span ((class "comment")) ";; parse-function : sxml -" ">" " function\n") "(" (span ((class "keyword")) "define") " (" (span ((class "variable")) "parse-function") " " (span ((class "variable")) "fn") ")\n  (" (span ((class "variable")) "xml-match") " " (span ((class "variable")) "fn") "\n    [(" (span ((class "variable")) "function") " " (span ((class "variable")) "name:") " " (span ((class "keyword")) ",") (span ((class "variable")) "name") "\n               (" (span ((class "variable")) "param") " " (span ((class "variable")) "name:") " " (span ((class "keyword")) ",") (span ((class "variable")) "param-name") " " (span ((class "keyword")) ",") (span ((class "variable")) "desc") " ...) ...\n               (" (span ((class "variable")) "comment") " " (span ((class "keyword")) ",") (span ((class "variable")) "_") " ...))\n     (" (span ((class "variable")) "make-function") " " (span ((class "variable")) "name") " " (span ((class "selfeval")) "\"void\"") " (" (span ((class "builtin")) "list") " " (span ((class "variable")) "param-name") " ...))]\n    [(" (span ((class "variable")) "function") " " (span ((class "variable")) "name:") " " (span ((class "keyword")) ",") (span ((class "variable")) "name") "\n               (" (span ((class "variable")) "return") " " (span ((class "variable")) "type:") " " (span ((class "keyword")) ",") (span ((class "variable")) "type") " " (span ((class "keyword")) ",") (span ((class "variable")) "return-desc") " ...)\n               (" (span ((class "variable")) "param") " " (span ((class "variable")) "name:") " " (span ((class "keyword")) ",") (span ((class "variable")) "param-name") " " (span ((class "keyword")) ",") (span ((class "variable")) "desc") " ...) ...\n               (" (span ((class "variable")) "comment") " " (span ((class "keyword")) ",") (span ((class "variable")) "_") " ...))\n     (" (span ((class "variable")) "make-function") " " (span ((class "variable")) "name") " " (span ((class "variable")) "type") " (" (span ((class "builtin")) "list") " " (span ((class "variable")) "param-name") " ...))]\n    [" (span ((class "keyword")) ",") (span ((class "variable")) "err") " (" (span ((class "keyword")) "let") " ([" (span ((class "variable")) "op") " (" (span ((class "builtin")) "open-output-string") ")])\n            (" (span ((class "variable")) "pretty-print") " " (span ((class "variable")) "err") " " (span ((class "variable")) "op") ")\n            (" (span ((class "builtin")) "error") " (" (span ((class "builtin")) "format") " " (span ((class "selfeval")) "\"Didn't match ~n~a~n\"") " (" (span ((class "builtin")) "get-output-string") " " (span ((class "variable")) "op") "))))]))\n")) "\n\n" (p "This works!  This is as far as I want to go in this article.  We've seen how we can use SSAX. SXPath, and WebIt! to create XML transforms in pure Scheme.  There is a lot more to all of these packages but what we've used is sufficient for many uses.  The rest of the code to create Scheme from the API is quite straightforward and specific to Selenium.  If you're curious read the source of the Selenium PLaneT package, which will be released soon.") "\n\n" (p (em "This post also appears on " (a ((href "http://www.untyped.com/untyping")) "Untyping")))) (link ((href "http://blog.racket-lang.org/feeds/1965802899884148737/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=1965802899884148737") (rel "replies") (title "3 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1965802899884148737") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1965802899884148737") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/05/xml-transformation-in-scheme.html") (rel "alternate") (title "XML Transformation in Scheme") (type "text/html"))) (author (name "Noel") (uri "https://www.blogger.com/profile/09666551093622614632") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:total "3")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1468522807904906482") (published "2007-05-03T17:35:00.000-04:00") (updated "2012-06-24T22:21:27.014-04:00") (category ((scheme "http://www.blogger.com/atom/ns#") (term "meta"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "matthew"))) (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#post"))) (category ((scheme "http://www.blogger.com/atom/ns#") (term "macros"))) (title ((type "text")) "Macros Matter") (post-content "Thank you Jens for setting up this Blog. " (br) (br) "\n\nPLT Scheme is a 12-year old project now and it is definitely time to open it up to the world. The language and the project has contributed numerous ideas and products to the world. This covers programming languages (units, mixins, an implementation of cml-style concurrency, etc); programming tools (drscheme, check-syntax, transparent repls, module browsers, etc), programming pedagogy (htdp, htdc); program engineering (we resurrected the \"expression\" problem, web programming and continuations); and some more. " (br) (br) "\n\nTime and again, people have asked me what I consider the one 'feature' that distinguishes us from the rest of the hordes of programming languages. I always respond with a single word: " (br) (br) "\n\n" nbsp " " nbsp " " nbsp " " nbsp " " nbsp " " nbsp " " nbsp " " nbsp " " nbsp " " nbsp " " nbsp " " nbsp " " nbsp " " nbsp " " nbsp " " nbsp " " nbsp " " nbsp " " nbsp " " nbsp " " nbsp nbsp " " nbsp "macros." (br) (br) "\n\nWe have pushed macros hard, and we have accomplished a lot with them. I conjecture that without macros, we would never have achieved the level of productivity that this group displays." (br) (br) "\n\nOf course, everyone else in academia works on types. ML's module type system of the third kind and Haskell's system-complete type system are serious challenges to anyone.  It is probably true that you shouldn't consider yourself a programmer if you can't read and write some of those type-laden programs, and I seriously believe that they are the next generation of influential languages. " (br) (br) "\n\nFor the generation-after-the-next then, I see \"macros\" as one of the big topics (next to concurrency). A real programmer will have to know how Lisp and Scheme-style macros can reduce labor by orders of magnitude, how macros provide the tools for creating the \"ultimate abstraction\" in the form of domain-specific and embedded languages (Hudak's words). And there is no better place to start with than PLT Scheme's macro system." (br) (br) "\n\nSo I would like to dedicate this blog to all things macros and everything else that matters in (and to) PLT Scheme.") (link ((href "http://blog.racket-lang.org/feeds/1468522807904906482/comments/default") (rel "replies") (title "Post Comments") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=1468522807904906482") (rel "replies") (title "16 Comments") (type "text/html"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1468522807904906482") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/posts/default/1468522807904906482") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/05/macros-matter.html") (rel "alternate") (title "Macros Matter") (type "text/html"))) (author (name "matthias") (uri "https://www.blogger.com/profile/00000181081270224360") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.ccs.neu.edu/home/matthias/Images/felleisen1.jpg") (width "23")))) (thr:total "16")) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1164488582728370016") (published "2007-05-04T18:17:00.000-04:00") (updated "2007-05-04T18:17:04.704-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "The Scala programming language claims that its com...") (post-content "The Scala programming language claims that its combination of language features allows for the easy addition of new control structures and domain-specific syntax, without the need for macro-based metaprogramming.  " (br) (br) "Although I have only a surface knowledge of Scala, the introductory Scala documentation provides some examples to back up this claim, and I'm inclined to believe that Scala's facilities would suffice for most of the purposes that macros are commonly used for.  Scala's \"actors\" library (essentially an implementation of Erlang-style concurrency with corresponding syntactic extensions) is a good example of a task I would expect to require macros, and yet they do just fine without." (br) (br) "It would be really interesting to to know what a macro expert thinks about Scala's approach.  Is Scala essentially providing macros in disguise, or does it have a real lack of expressive power relative to Scheme's macros?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1468522807904906482/comments/default/1164488582728370016") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1468522807904906482/comments/default/1164488582728370016") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/05/macros-matter.html?showComment=1178317020000#c1164488582728370016") (rel "alternate") (title "") (type "text/html"))) (author (name "puzzler") (uri "https://www.blogger.com/profile/05992502488191304160") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/05/macros-matter.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1468522807904906482") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1468522807904906482") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-2031376099"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 4, 2007 at 6:17 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3725588109578403348") (published "2007-05-04T18:44:00.000-04:00") (updated "2007-05-04T18:44:24.493-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "My impression is that Scala has \"macro power\"" "<" "br" ">" "i...") (post-content "My impression is that Scala has \"macro power\"" (br) "in the same spirit as Java has \"closure power.\" " (br) (br) "Rumor has it that Java 7 will have real closures. " (br) (br) "Someone show me that I am wrong.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1468522807904906482/comments/default/3725588109578403348") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1468522807904906482/comments/default/3725588109578403348") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/05/macros-matter.html?showComment=1178318640000#c3725588109578403348") (rel "alternate") (title "") (type "text/html"))) (author (name "matthias") (uri "https://www.blogger.com/profile/00000181081270224360") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/05/macros-matter.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1468522807904906482") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1468522807904906482") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-56163577"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 4, 2007 at 6:44 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4970525081835511233") (published "2007-05-04T19:47:00.000-04:00") (updated "2007-05-04T19:47:57.052-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I am pleased to see a PLT Scheme blog, and look fo...") (post-content "I am pleased to see a PLT Scheme blog, and look forward to reading it." (br) (br) "As you know, Matthias, I teach supplementary lectures on macros and continuations to post-HtDP students. Continuations \"fit\" -- there are challenges, but they're of the sort that students are used to from other parts of Scheme. Macros are a different matter. Perhaps it's because I don't understand them that well myself, but it seems to me that there is a considerable jump in complexity. They're not as natural, and there are no good expository materials. I would like to see the transition into macrology be a little smoother. Is this possible? --PR") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1468522807904906482/comments/default/4970525081835511233") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1468522807904906482/comments/default/4970525081835511233") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/05/macros-matter.html?showComment=1178322420000#c4970525081835511233") (rel "alternate") (title "") (type "text/html"))) (author (name "plragde@uwaterloo.ca") (uri "https://www.blogger.com/profile/00735789768729691863") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/05/macros-matter.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1468522807904906482") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1468522807904906482") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-65427774"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 4, 2007 at 7:47 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1149371372648385957") (published "2007-05-04T21:41:00.000-04:00") (updated "2007-05-04T21:41:55.092-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Well, I can't speak for other students of scheme, ...") (post-content "Well, I can't speak for other students of scheme, but I found procedural macros easier to grok than the syntax-rules language.  Though I program more in Common Lisp now, the first macro system I learned to use in a non-trivial way was the explicit renaming system in scheme 48") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1468522807904906482/comments/default/1149371372648385957") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1468522807904906482/comments/default/1149371372648385957") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/05/macros-matter.html?showComment=1178329260000#c1149371372648385957") (rel "alternate") (title "") (type "text/html"))) (author (name "akopa") (uri "https://www.blogger.com/profile/15551105775436406082") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/05/macros-matter.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1468522807904906482") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1468522807904906482") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-538349287"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 4, 2007 at 9:41 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1884380977658768810") (published "2007-05-05T18:45:00.000-04:00") (updated "2007-05-05T18:45:09.368-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "If you have read the docs, you know that " "<" "br" ">" "PLT S...") (post-content "If you have read the docs, you know that " (br) "PLT Scheme " (b "does have procedural macros.") " Better still, it has those and implements macros as proper abstractions.  " (br) (br) "This idea of " (em "macros as proper abstractions") " is why I have strong doubts that Scala has any real \"macro power\" and that systems such as in CL or S48 will ever be close. " (br) (br) "Because we support macros-as-abstractions, implementing  " (a ((href "http://www.ccs.neu.edu/scheme/pubs/#aplas06-fff") (rel "nofollow")) "classes, mixins, and traits as macros") " is not only feasible, it's a joy. Indeed, implementing " (a ((href "http://lambda-the-ultimate.org/node/2214") (rel "nofollow")) "an entire language, such as Arc") " is doable and is no just a toy (as it would be if implemented in a primitive macro system).") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1468522807904906482/comments/default/1884380977658768810") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1468522807904906482/comments/default/1884380977658768810") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/05/macros-matter.html?showComment=1178405100000#c1884380977658768810") (rel "alternate") (title "") (type "text/html"))) (author (name "matthias") (uri "https://www.blogger.com/profile/00000181081270224360") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/05/macros-matter.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1468522807904906482") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1468522807904906482") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-56163577"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 5, 2007 at 6:45 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8576227497594775913") (published "2007-05-06T15:01:00.000-04:00") (updated "2007-05-06T15:01:27.374-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I have not used the syntactic abstractions in PLT....") (post-content "I have not used the syntactic abstractions in PLT.  I wasn't even disparaging Scheme macros in my previous comment.  " (br) (br) "However, the introductory materials to Scheme macros always concentrate on syntax-rules.  In addition, there is an implicit assumption that the pattern matching language is the \"easy\" way to think about source transformation." (br) (br) "This is does not seem to be the case, or at least it isn't sufficient for many Scheme students." (br) (br) "In my case, the mechanics of explicitly constructing the syntax tree helped me enormously." (br) (br) "As far as providing a proper abstraction goes, in Common Lisp the burden is on the macro writer.  Philosophically, Scheme advocates will always find defmacro wanting, but I am able to construct a macro writing framework for my own macros that provide good abstraction and meaningful error reporting for the macro writer and the consumer.  I acknowledge  that it can be a lot of work.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1468522807904906482/comments/default/8576227497594775913") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1468522807904906482/comments/default/8576227497594775913") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/05/macros-matter.html?showComment=1178478060000#c8576227497594775913") (rel "alternate") (title "") (type "text/html"))) (author (name "akopa") (uri "https://www.blogger.com/profile/15551105775436406082") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/05/macros-matter.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1468522807904906482") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1468522807904906482") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-538349287"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 6, 2007 at 3:01 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4977302149496085888") (published "2007-05-06T15:59:00.000-04:00") (updated "2007-05-06T15:59:52.638-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Hi Akopa," "<" "br" ">" "<" "br" ">" "There are more than one type of m...") (post-content "Hi Akopa," (br) (br) "There are more than one type of macros in the Scheme world. To a Scheme a \"procedural macro system\" isn't associated with Common Lisp's defmacro." (br) (br) "For simple transformations, syntax-rules is easy to use. However, if you need to write macros that doesn't fit into a simple rewriting rule, then you'll need something more powerful like syntax-case macros." (br) (br) "For a very nice explanation of syntax-case seen from the Common Lisp perspective see:" (br) (br) "http://groups.google.com/group/comp.lang.lisp/msg/7893ba79443a82f8?hl=en" "&") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1468522807904906482/comments/default/4977302149496085888") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1468522807904906482/comments/default/4977302149496085888") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/05/macros-matter.html?showComment=1178481540000#c4977302149496085888") (rel "alternate") (title "") (type "text/html"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/05/macros-matter.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1468522807904906482") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1468522807904906482") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1852501234"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 6, 2007 at 3:59 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4779856852286278184") (published "2007-05-06T16:01:00.000-04:00") (updated "2007-05-06T16:01:24.297-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Here is the url broken into 3 lines" "<" "br" ">" "<" "br" ">" "http://...") (post-content "Here is the url broken into 3 lines" (br) (br) "http://groups.google.com/" (br) "group/comp.lang.lisp/" (br) "msg/7893ba79443a82f8?hl=en" "&") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1468522807904906482/comments/default/4779856852286278184") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1468522807904906482/comments/default/4779856852286278184") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/05/macros-matter.html?showComment=1178481660000#c4779856852286278184") (rel "alternate") (title "") (type "text/html"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/05/macros-matter.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1468522807904906482") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1468522807904906482") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1852501234"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 6, 2007 at 4:01 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4067106705415807997") (published "2007-05-07T08:53:00.000-04:00") (updated "2007-05-07T08:53:59.661-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "\"As far as providing a proper abstraction goes, in...") (post-content "\"As far as providing a proper abstraction goes, in Common Lisp the burden is on the macro write.\"" (br) (br) "If that's the case for _any_ linguistic construct, the language simply " (b "doesn't support") " abstraction (for this aspect). Period. Just think: in the spirit of this statement, assembly language supports first-class closures.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1468522807904906482/comments/default/4067106705415807997") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1468522807904906482/comments/default/4067106705415807997") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/05/macros-matter.html?showComment=1178542380000#c4067106705415807997") (rel "alternate") (title "") (type "text/html"))) (author (name "matthias") (uri "https://www.blogger.com/profile/00000181081270224360") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/05/macros-matter.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1468522807904906482") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1468522807904906482") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-56163577"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 7, 2007 at 8:53 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1671577019316767916") (published "2007-05-07T17:10:00.000-04:00") (updated "2007-05-07T17:10:37.373-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "\"'As far as providing a proper abstraction goes, i...") (post-content "\"'As far as providing a proper abstraction goes, in Common Lisp the burden is on the macro write.'" (br) (br) "If that's the case for _any_ linguistic construct, the language simply doesn't support abstraction (for this aspect). Period. Just think: in the spirit of this statement, assembly language supports first-class closures.\"" (br) (br) "Yeah, but macro-writing macros allow you to create the abstraction.  Don't get me wrong, it's nice the Scheme supports this out of the box. " (br) (br) "Of course assembly language supports first-class closures; it's just a macro expansion away :).") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1468522807904906482/comments/default/1671577019316767916") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1468522807904906482/comments/default/1671577019316767916") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/05/macros-matter.html?showComment=1178572200000#c1671577019316767916") (rel "alternate") (title "") (type "text/html"))) (author (name "akopa") (uri "https://www.blogger.com/profile/15551105775436406082") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/05/macros-matter.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1468522807904906482") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1468522807904906482") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-538349287"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 7, 2007 at 5:10 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2914761415480995131") (published "2007-05-09T16:59:00.000-04:00") (updated "2007-05-09T16:59:11.510-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Scala has limited non-macro-based facilities for s...") (post-content "Scala has limited non-macro-based facilities for syntactic extension. This along with its liberal method naming syntax and the ability to use anything as infix lets you build things like embedded linear algebra operators (A*B where A and B are matrix operators could be matrix multiplication, etc.)." (br) (br) "Scala is a hell of a lot faster than PLT Scheme, and it plays perfectly with the vast Java ecosystem, while Scheme does not. They are good at different things and there is no need for Schemers to feel they need to put down a fine language like Scala. If you're going to play the language debate game, focus your energy on languages that actually do suck.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1468522807904906482/comments/default/2914761415480995131") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1468522807904906482/comments/default/2914761415480995131") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/05/macros-matter.html?showComment=1178744340000#c2914761415480995131") (rel "alternate") (title "") (type "text/html"))) (author (name "warren") (uri "https://www.blogger.com/profile/08348531393587997353") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/05/macros-matter.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1468522807904906482") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1468522807904906482") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-619239523"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 9, 2007 at 4:59 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1445020069365812816") (published "2007-05-09T18:03:00.000-04:00") (updated "2007-05-09T18:03:45.827-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "warren wrote:" "<" "br" ">" "&" "gt; Scala has limited non-macro-...") (post-content "warren wrote:" (br) "> Scala has limited non-macro-based facilities for" (br) "> syntactic extension. [...]" (br) (br) "Right -- it has " (b "no") " macros." (br) (br) "> Scala is a hell of a lot faster than PLT Scheme," (br) (br) "I find this questionable.  I tried a quick fib" (br) "test, and with an input of 38 (which should be" (br) "large enough to compensate for Scala's horrendous" (br) "initial overhead).  With 5 runs for each, MzScheme" (br) "was 2.7 times faster in user time, and 3.2 times" (br) "faster in total time.  But we're not playing" (br) "language debate games, right?" (br) (br) "> and it plays perfectly with the vast Java" (br) "> ecosystem, while Scheme does not." (br) (br) (b "Mz") "Scheme does not play with Java code" (br) "easily, because it's implemented in C.  Schemes" (br) "that are implemented in Java do.  OTOH, MzScheme" (br) "plays perfectly with the vast(er) C ecosystem." (br) "But we're not playing language debate games," (br) "right?" (br) (br) "> They are good at different things and there is" (br) "> no need for Schemers to feel they need to put" (br) "> down a fine language like Scala." (br) (br) "I looked again at all comments -- and the only" (br) "sense in which Scala was \"put down\" is by saying" (br) "that it has no macros.  Reading the Scala" (br) (a ((href "http://www.scala-lang.org/intro/index.html") (rel "nofollow")) "documentation re its extensibility feature") (br) "all I see is an ability to specify thunk" (br) "arguments, and automatic thunking of expressions" (br) "that are used for these arguments.  Saying that" (br) "this is anywhere close to having macros is like" (br) "saying that my old Pontiac Grand Prix 93 has the" (br) "same functionality of a Ferrari." (br) (br) "The original question was: \"Is Scala essentially" (br) "providing macros in disguise, or does it have a" (br) "real lack of expressive power relative to Scheme's" (br) "macros?\".  The answer to this question is a simple" (br) "and definite \"no, it does not have the expressive" (br) "power of macros\" -- and that's for any macro" (br) "system I know about (including non-sexpr macro" (br) "systems, like CamlP4 or CPP).  It's as simple as" (br) "that.  Language debate games or not." (br) (br) "> If you're going to play the language debate" (br) "> game, focus your energy on languages that" (br) "> actually do suck." (br) (br) "Look in the above comments again, bearing in mind" (br) "my answer above.  Saying that Scala has no macros" (br) "is a plain fact, not a subjective arguments.  It" (br) "is therefore your own comment that started a" (br) "debate game.  The current comment contributes to" (br) "that, sorry.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1468522807904906482/comments/default/1445020069365812816") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1468522807904906482/comments/default/1445020069365812816") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/05/macros-matter.html?showComment=1178748180000#c1445020069365812816") (rel "alternate") (title "") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.barzilay.org/images/eli1.jpg") (width "28")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/05/macros-matter.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1468522807904906482") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1468522807904906482") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-311455247"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 9, 2007 at 6:03 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-649290251686181461") (published "2007-05-09T21:27:00.000-04:00") (updated "2007-05-09T21:27:54.189-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "eli, is CamlP4 is missing anything besides the obv...") (post-content "eli, is CamlP4 is missing anything besides the obvious thing (ie, hygiene)?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1468522807904906482/comments/default/649290251686181461") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1468522807904906482/comments/default/649290251686181461") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/05/macros-matter.html?showComment=1178760420000#c649290251686181461") (rel "alternate") (title "") (type "text/html"))) (author (name "Neel Krishnaswami") (uri "https://www.blogger.com/profile/06853898957395028131") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/05/macros-matter.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1468522807904906482") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1468522807904906482") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1761802617"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 9, 2007 at 9:27 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3002095153343197366") (published "2007-05-09T23:10:00.000-04:00") (updated "2007-05-09T23:10:41.457-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Well, hygiene is a big deal.  The advantage that C...") (post-content "Well, hygiene is a big deal.  The advantage that CamlP4 gives you over CPP is that it uses proper structures, which is also what you get with defmacro, so it's a good step in that direction." (br) (br) "One techincal point here is that when working with it, I found that the types got in my way.  The AST type is quite big, and evey piece of code must have many trivial cases.  One solution to that was obvious: create an s-expr-like type, and translate the AST to that." (br) (br) "Getting hygiene is also related to being integrated into the languaue, which is another thing you don't get with CamlP4.  Transformations live completely outside of your code, so, for example, it is not possible to have libraries that provide new syntax transformers." (br) (br) "This, combined with the heavy AST type mean that you need to do a *lot* of work for every transformation, which makes it more difficult to use.  I don't see people going through all that just to implement a small debugging macro, or something simple like `when' or a while loop." (br) (br) "BTW, one thing I did when I worked with CamlP4 is to create a defmacro-like facility.  It was limited in many ways: different AST nodes means that my macros would only work with AST subsets that make sense both as expressions and as patterns; the scope was in-file only; we needed to add facilities for including code etc etc.  Still, it was much better than CPP (which was used for debug code), and even fixed a couple of bugs.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1468522807904906482/comments/default/3002095153343197366") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1468522807904906482/comments/default/3002095153343197366") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/05/macros-matter.html?showComment=1178766600000#c3002095153343197366") (rel "alternate") (title "") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.barzilay.org/images/eli1.jpg") (width "28")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/05/macros-matter.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1468522807904906482") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1468522807904906482") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-311455247"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 9, 2007 at 11:10 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5797880556366934795") (published "2007-05-10T12:53:00.000-04:00") (updated "2007-05-10T12:53:00.406-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Thanks for your comment. The way I usually use P4 ...") (post-content "Thanks for your comment. The way I usually use P4 is to define a small grammar for my extension, with a custom AST type for that. Then, I write a function to compile my custom AST into the Ocaml expression syntax. This matches how I write things on the whiteboard pretty well, and personally I found it more convenient than syntax-rules (which has a bizarre evaluation order). " (br) (br) "I do get really annoyed every time I have to define a gensym function -- I should not have to do this in 2007! -- and I take your point about the need for better language integration, because I have often wanted to write type-directed transformations. (For example, if you want to extend pattern matching and still check coverage, you need to know all the type and module definitions in the current scope.) You can't do this with P4.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1468522807904906482/comments/default/5797880556366934795") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1468522807904906482/comments/default/5797880556366934795") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/05/macros-matter.html?showComment=1178815980000#c5797880556366934795") (rel "alternate") (title "") (type "text/html"))) (author (name "Neel Krishnaswami") (uri "https://www.blogger.com/profile/06853898957395028131") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/05/macros-matter.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1468522807904906482") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1468522807904906482") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1761802617"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 10, 2007 at 12:53 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8208046055966792656") (published "2007-05-10T16:57:00.000-04:00") (updated "2007-05-10T16:57:56.585-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Very good article. This comment is regarding the a...") (post-content "Very good article. This comment is regarding the actual layout of the blog. First, I would like it very much if the author of the post were placed at the top of the posting. Second, on my browser code listing that do not wrap are visually clipped by the sidebar on the right. This is an unfortunate combination with the fixed width format of the overall page, because it results in text that cannot be viewed even by resizing.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1965802899884148737/comments/default/8208046055966792656") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1965802899884148737/comments/default/8208046055966792656") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/05/xml-transformation-in-scheme.html?showComment=1178830620000#c8208046055966792656") (rel "alternate") (title "") (type "text/html"))) (author (name "skub") (uri "https://www.blogger.com/profile/00972292689182687471") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/05/xml-transformation-in-scheme.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1965802899884148737") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1965802899884148737") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1331915075"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 10, 2007 at 4:57 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7320503151708881349") (published "2007-05-10T18:09:00.000-04:00") (updated "2007-05-10T18:09:33.905-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Thanks for the suggestions." "<" "br" ">" "<" "br" ">" "We moved the au...") (post-content "Thanks for the suggestions." (br) (br) "We moved the author to the top." (br) (br) "And as an experiment, we have made the main column a little wider. " (br) (br) "Leave a comment, if you think it is too wide.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1965802899884148737/comments/default/7320503151708881349") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1965802899884148737/comments/default/7320503151708881349") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/05/xml-transformation-in-scheme.html?showComment=1178834940000#c7320503151708881349") (rel "alternate") (title "") (type "text/html"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/05/xml-transformation-in-scheme.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1965802899884148737") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1965802899884148737") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1852501234"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 10, 2007 at 6:09 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2740583462871647674") (published "2007-05-11T09:42:00.000-04:00") (updated "2007-05-11T09:42:17.192-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I found the easiest way to deal with code being to...") (post-content "I found the easiest way to deal with code being too wide on my blog was to set the CSS attribute for overflow to auto." (br) (br) "So I have CSS like:" (br) (br) ".post pre {" (br) "  line-height: 14px;" (br) "  background-color: #EFEFD1;" (br) "  padding: 8px;" (br) "  border: 2px solid #CFCFA8;" (br) "  overflow: auto;" (br) "}" (br) (br) "You can check out " (a ((href "http://benjisimon.blogspot.com/2007/03/emacs-hack-ediff-last-version-from-cvs.html") (rel "nofollow")) "this") " example." (br) (br) "Naturally, horizontal scrolling is annoying.  But, it's the best I could come up with.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1965802899884148737/comments/default/2740583462871647674") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1965802899884148737/comments/default/2740583462871647674") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/05/xml-transformation-in-scheme.html?showComment=1178890920000#c2740583462871647674") (rel "alternate") (title "") (type "text/html"))) (author (name "Ben Simon") (uri "https://www.blogger.com/profile/09833753747177544979") (email "noreply@blogger.com") (gd:image ((height "24") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//photos1.blogger.com/blogger/4241/1095/0/Photo%20476-776688.jpg") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/05/xml-transformation-in-scheme.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1965802899884148737") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1965802899884148737") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-534514962"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 11, 2007 at 9:42 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5776411808446473435") (published "2007-05-22T08:39:00.000-04:00") (updated "2007-05-22T08:39:18.594-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "The reference documentation is wonderful, but wher...") (post-content "The reference documentation is wonderful, but where can I go to find out the changes (and the reasoning behind them) to unit.ss? Mailing list discussions would be perfect, if they exist. Thanks for any help!") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2262217151421897845/comments/default/5776411808446473435") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2262217151421897845/comments/default/5776411808446473435") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/05/plt-scheme-version-370.html?showComment=1179837540000#c5776411808446473435") (rel "alternate") (title "") (type "text/html"))) (author (name "charmless") (uri "https://www.blogger.com/profile/08540566813510508054") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/05/plt-scheme-version-370.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2262217151421897845") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2262217151421897845") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-180015545"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 22, 2007 at 8:39 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5887992701301021921") (published "2007-05-23T09:01:00.000-04:00") (updated "2007-05-23T09:01:28.063-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Chapters 4, 5, and 6 of my " "<" "a href=\"http://www.cl....") (post-content "Chapters 4, 5, and 6 of my " (a ((href "http://www.cl.cam.ac.uk/~so294/documents/owens-phd.pdf") (rel "nofollow")) "Ph.D. dissertation") " describe the new unit system, and my rational behind its various features.  However, it doesn't really describe the old system or attempt a comparison between the new and old systems.  Also, Matthew has made a few small syntactic changes from what is described in my dissertation for the v370 system.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2262217151421897845/comments/default/5887992701301021921") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2262217151421897845/comments/default/5887992701301021921") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/05/plt-scheme-version-370.html?showComment=1179925260000#c5887992701301021921") (rel "alternate") (title "") (type "text/html"))) (author (name "Scott Owens") (uri "https://www.blogger.com/profile/08256701996227118403") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/05/plt-scheme-version-370.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2262217151421897845") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2262217151421897845") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1450987328"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 23, 2007 at 9:01 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-515121712079932056") (published "2007-06-09T15:30:00.000-04:00") (updated "2007-06-09T15:30:53.838-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "The biggest argument against R6RS seems to be bloa...") (post-content "The biggest argument against R6RS seems to be bloat. They say Scheme betrays its root, because it gets big and complex, instead of \"smallest possible, while usable.\"" (br) (br) "Is it really debated enough, wether all this stuff belongs into Scheme? Probably. Then why don't people just point to the mailing list thread (or whatever)?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/994848006948347841/comments/default/515121712079932056") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/994848006948347841/comments/default/515121712079932056") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/06/r6rs-is-perfect.html?showComment=1181417400000#c515121712079932056") (rel "alternate") (title "") (type "text/html"))) (author (name "beza1e1") (uri "https://www.blogger.com/profile/15355537726732337830") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/06/r6rs-is-perfect.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-994848006948347841") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/994848006948347841") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1010165492"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 9, 2007 at 3:30 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3595003066995952324") (published "2007-06-09T15:51:00.000-04:00") (updated "2007-06-09T15:51:09.603-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I'm just curious - why cannot the module system an...") (post-content "I'm just curious - why cannot the module system and the rest of the stuff that R6RS tries to do be implemented as SRFIs first, and only after they're used for some time they could be frozen into the new spec ?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/994848006948347841/comments/default/3595003066995952324") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/994848006948347841/comments/default/3595003066995952324") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/06/r6rs-is-perfect.html?showComment=1181418660000#c3595003066995952324") (rel "alternate") (title "") (type "text/html"))) (author (name "taw") (uri "https://www.blogger.com/profile/16972845140253292628") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/06/r6rs-is-perfect.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-994848006948347841") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/994848006948347841") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1462487248"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 9, 2007 at 3:51 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6631618997082421188") (published "2007-06-09T17:13:00.000-04:00") (updated "2007-06-09T17:13:40.259-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Easy questions. " "<" "br" ">" "<" "br" ">" "Yes, one can produce an OS...") (post-content "Easy questions. " (br) (br) "Yes, one can produce an OS with Turing Machines. (At least I am pretty sure one can.) I still wouldn't want to do it. In this spirit, Scheme isn't the best medium for creating large applications and frameworks. " (br) (br) "The implementors (on the editoral board) _have_ implemented variations of the proposed features and they like what they see. PLT users have experienced a good number of them, and they like what they see. Now it's time to commit. " (br) (br) "And I am pretty sure that for those who wish to stay behind, some soul among the implementor crowd (is there a language with more implementations than Scheme?) will maintain an old R4RS or R5RS compatible Scheme.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/994848006948347841/comments/default/6631618997082421188") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/994848006948347841/comments/default/6631618997082421188") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/06/r6rs-is-perfect.html?showComment=1181423580000#c6631618997082421188") (rel "alternate") (title "") (type "text/html"))) (author (name "matthias") (uri "https://www.blogger.com/profile/00000181081270224360") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/06/r6rs-is-perfect.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-994848006948347841") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/994848006948347841") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-56163577"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 9, 2007 at 5:13 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8868297561784734862") (published "2007-06-10T05:04:00.000-04:00") (updated "2007-06-10T05:04:34.029-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "As far as I can tell, there's a vocal part of the ...") (post-content "As far as I can tell, there's a vocal part of the Scheme community that is entirely unwilling to compromise anything for anyone.  This is a bit foreign to me, having come to Scheme from Common Lisp.  Whether they constitute a plurality or not is another matter, but consider just how many different forms of define-record syntax are out there." (br) (br) "I as a programmer not an implementer would love to see any RnRS with some provision for modules, almost no matter what the syntax or semantics might be.  I might have my own personal favorite, but the network benefit of (almost) everybody using the same damn thing is important.  The SRFI libraries are immensely useful here, but because module systems are such a sore point there is no useful way, even leveraging SRFIs, to write one library that engages the native module system for any two different Scheme implementations." (br) (br) "Pass the damn thing already.  I'll write using Swahili identifiers if need be.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/994848006948347841/comments/default/8868297561784734862") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/994848006948347841/comments/default/8868297561784734862") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/06/r6rs-is-perfect.html?showComment=1181466240000#c8868297561784734862") (rel "alternate") (title "") (type "text/html"))) (author (name "Graham") (uri "https://www.blogger.com/profile/07211899445857340500") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/06/r6rs-is-perfect.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-994848006948347841") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/994848006948347841") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-932345080"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 10, 2007 at 5:04 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-902222653534759526") (published "2007-06-10T21:23:00.000-04:00") (updated "2007-06-10T21:23:07.138-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Let me preface my comment by saying that I think P...") (post-content "Let me preface my comment by saying that I think PLT Scheme is a wonderful language, and my thanks to the PLT folks for making it happen.  With that said, I wanted to respond to these comments by Matthias:" (br) (br) "\"Because we support macros-as-abstractions, implementing classes, mixins, and traits as macros is not only feasible, it's a joy. Indeed, implementing an entire language, such as Arc is doable and is no just a toy (as it would be if implemented in a primitive macro system).\"" (br) (br) "I heard from a reliable source that the current Arc implementation doesn't use scheme macros at all.  So it perhaps is a bad example to use in this case.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1468522807904906482/comments/default/902222653534759526") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1468522807904906482/comments/default/902222653534759526") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/05/macros-matter.html?showComment=1181524980000#c902222653534759526") (rel "alternate") (title "") (type "text/html"))) (author (name "Repl") (uri "https://www.blogger.com/profile/16214371804375208637") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/05/macros-matter.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1468522807904906482") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1468522807904906482") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-778411014"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 10, 2007 at 9:23 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6765282871468644050") (published "2007-06-14T17:31:00.000-04:00") (updated "2007-06-14T17:31:35.953-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Doesn't this ultimately mean that the Scheme progr...") (post-content "Doesn't this ultimately mean that the Scheme program [1] has failed? Or to put it differently: Why not go back to older Lisp dialects and rediscover what was gratuitously thrown away just because it wasn't considered essential?" (br) (br) "[1] \"Programming languages should be designed not by piling feature on top of feature, but by removing the weaknesses and restrictions that make additional features appear necessary.\", as the introduction to several instances of the Scheme report states.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/7201123380885059455/comments/default/6765282871468644050") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/7201123380885059455/comments/default/6765282871468644050") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/06/small-is-beautiful-large-is-useful-and.html?showComment=1181856660000#c6765282871468644050") (rel "alternate") (title "") (type "text/html"))) (author (name "Pascal Costanza") (uri "https://www.blogger.com/profile/04512975624438301971") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//p-cos.net/blogpics/pastedGraphic.jpg") (width "23")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/06/small-is-beautiful-large-is-useful-and.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-7201123380885059455") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/7201123380885059455") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1775558073"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 14, 2007 at 5:31 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5656697505426870782") (published "2007-06-14T17:51:00.000-04:00") (updated "2007-06-14T17:51:43.416-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "LISP was very large.  Scheme was much smaller.  Do...") (post-content "LISP was very large.  Scheme was much smaller.  Does this mean that adding features to Scheme moves it back toward LISP?  No, not necessarily. If we learn from our progress, our \"second crack\" at some of these features may be nicer[*] than our first try." (br) (br) "[*] more expressive, less difficult to implement, syntactically cleaner, etc." (br) (br) "John \"De Gustibus...\" Clements") (link ((href "https://www.blogger.com/feeds/2080885971644496896/7201123380885059455/comments/default/5656697505426870782") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/7201123380885059455/comments/default/5656697505426870782") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/06/small-is-beautiful-large-is-useful-and.html?showComment=1181857860000#c5656697505426870782") (rel "alternate") (title "") (type "text/html"))) (author (name "John Clements") (uri "https://www.blogger.com/profile/10401643794201938443") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/06/small-is-beautiful-large-is-useful-and.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-7201123380885059455") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/7201123380885059455") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1180715230"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 14, 2007 at 5:51 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1978632689920773529") (published "2007-06-15T01:39:00.000-04:00") (updated "2007-06-15T01:40:00.004-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I was interested to follow up on some of the paper...") (post-content "I was interested to follow up on some of the papers, but the links didn't seem to take me to either the Flatt and Son or the " (i "You Want it When?") " papers....") (link ((href "https://www.blogger.com/feeds/2080885971644496896/7201123380885059455/comments/default/1978632689920773529") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/7201123380885059455/comments/default/1978632689920773529") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/06/small-is-beautiful-large-is-useful-and.html?showComment=1181885940000#c1978632689920773529") (rel "alternate") (title "") (type "text/html"))) (author (name "Robert") (uri "https://www.blogger.com/profile/06869286828634810130") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/06/small-is-beautiful-large-is-useful-and.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-7201123380885059455") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/7201123380885059455") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1445595668"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 15, 2007 at 1:39 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1524893650553703607") (published "2007-06-15T07:28:00.000-04:00") (updated "2007-06-15T07:28:36.124-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Hi Robert," "<" "br" ">" "<" "br" ">" "\"You want it When?\" is the subti...") (post-content "Hi Robert," (br) (br) "\"You want it When?\" is the subtitle of the paper: " (a ((href "http://www.cs.utah.edu/plt/publications/macromod.pdf") (rel "nofollow")) (br) "Composable and Compilable Macros") "." (br) (br) "/Jens Axel") (link ((href "https://www.blogger.com/feeds/2080885971644496896/7201123380885059455/comments/default/1524893650553703607") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/7201123380885059455/comments/default/1524893650553703607") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/06/small-is-beautiful-large-is-useful-and.html?showComment=1181906880000#c1524893650553703607") (rel "alternate") (title "") (type "text/html"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/06/small-is-beautiful-large-is-useful-and.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-7201123380885059455") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/7201123380885059455") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1852501234"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 15, 2007 at 7:28 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5604950540640420848") (published "2007-06-15T15:13:00.000-04:00") (updated "2007-06-15T15:13:30.145-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Pascal: The Scheme \"program\" hasn't failed at all ...") (post-content "Pascal: The Scheme \"program\" hasn't failed at all because it isn't a program. It is a useful \"Abmahnung\" (imperative is as close as I can get in English) for the designers of programming languages. Due to this imperative, Scheme is simpler than CL to this day and will remain so: one space for values; one powerful construction for control; etc. To this day, I consider Scheme the experimental \"out of the box\" cousin of CL, and when Guy will write CLtL/3 one day, perhaps he and his colleagues will borrow from Scheme. " (br) (br) "Robert: \"son\" refers to an ICFP paper with the title \"revenge of the son of the LISP machine\" and \"You want it\" refers to an ICFP paper on modules and macros. Search on Matthew's page; he doesn't seem to have tags/labels available.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/7201123380885059455/comments/default/5604950540640420848") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/7201123380885059455/comments/default/5604950540640420848") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/06/small-is-beautiful-large-is-useful-and.html?showComment=1181934780000#c5604950540640420848") (rel "alternate") (title "") (type "text/html"))) (author (name "matthias") (uri "https://www.blogger.com/profile/00000181081270224360") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.ccs.neu.edu/home/matthias/Images/felleisen1.jpg") (width "23")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/06/small-is-beautiful-large-is-useful-and.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-7201123380885059455") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/7201123380885059455") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-56163577"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 15, 2007 at 3:13 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3516350120179780672") (published "2007-06-16T08:50:00.000-04:00") (updated "2007-06-16T08:50:18.838-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I stick to my question: Doesn't this mean that Sch...") (post-content "I stick to my question: Doesn't this mean that Scheme has ultimately failed to adhere to the imperative it set for itself?" (br) (br) "As far as I see it, the major contribution of the original Scheme reports was to show that it is possible to define a substrate of the then common language constructs and programming paradigms. First-class continuations and tail recursion give you the means to implement any control abstractions (including advanced ones like backtracking and generators), lambda expressions give you the basic mechanisms to implement data structures (including advanced ones like Smalltalk-style objects). Indeed, Scheme removed \"the weaknesses and restrictions that make such additional features appear necessary\" at the end of the 70's / beginning of the 80's." (br) (br) "By R6RS, Scheme will have seen the addition of, for example, hygienic macros, a module system, Unicode, bytevectors, and records. However, these features have just been added on top of the existing Scheme language. It's at least not obvious to me that attempts have been made to remove \"the weaknesses and restrictions that make such additional features appear necessary.\" To the contrary: Syntax-rules was adopted as a macro system, although Clinger's \"Macros that Work\" would have been a subset on top of which other hygienic macro systems could have been built. Syntax-case is now being adopted but doesn't replace syntax-rules, although it's the more general macro system. If anyone wanted to add, say, syntactic closures on top of R6RS, there is no machinery to do so (or it's at least not obvious how to do this). Next, there is no substrate for implementing module systems, for example, in order to experiment with alternative module systems. I don't know whether such a substrate would be possible, but this doesn't change the fact that \"just\" one of the possible design alternative is being adopted. Scheme doesn't seem to adopt a way to extend the kinds of character sets it can deal with. Instead, Unicode is being adopted, again without a substrate that could enable other kinds of character sets. Bytevectors are given a literal syntax, but there is no provision for programmatically extending surface syntax, although it is know how to do this in Lisp dialects. Records are provided with different APIs. Although there is a low-level functional API for dealing with records, again there is no substrate that would allow building other variations of records. For example, there is no way to add multiple inheritance to records or to change how record fields are represented, although again it is known how to achieve these things with appropriate substrates." (br) (br) "I agree with you that the notion of a minimal language that provides enough rope to build everything else on top is essentially a pipe dream. But claiming that a particular language is closer to this ideal than others although it is objectively (!) as bloated as the next one is pretentious." (br) (br) "With regard to your remarks about a hypothetical CLtL3: I am not worried about the prospect of feeding some of the experiences of building current Scheme systems back into Common Lisp. To the contrary, I actually think that a lot of interesting work has been done in the Scheme community, some of which surpasses what is possible in Common Lisp. However, I am worried about the fact that this doesn't seem to happen the other way around. Few Schemers seem to have a good working knowledge of Common Lisp, as you can tell for example by mischaracterizations of Common Lisp in papers about Scheme-related research. Those who do, usually assess Common Lisp in a much more humble way. (See http://community.schemewiki.org/?Scheme-VS-Common-Lisp for example.)" (br) (br) "It's a shame that there is so little communication between the Scheme and the Common Lisp communities. We could learn a lot from each other, and it is important to realize that this holds for both directions. I am glad that Christian Queinnec, Manuel Serrano and especially Michael Sperber were present at this year's International Lisp Conference (mostly attended by Common Lispers), and hope that this has a positive effective in that regard in the long run.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/7201123380885059455/comments/default/3516350120179780672") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/7201123380885059455/comments/default/3516350120179780672") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/06/small-is-beautiful-large-is-useful-and.html?showComment=1181998200000#c3516350120179780672") (rel "alternate") (title "") (type "text/html"))) (author (name "Pascal Costanza") (uri "https://www.blogger.com/profile/04512975624438301971") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//p-cos.net/blogpics/pastedGraphic.jpg") (width "23")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/06/small-is-beautiful-large-is-useful-and.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-7201123380885059455") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/7201123380885059455") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1775558073"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 16, 2007 at 8:50 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7321626238837024856") (published "2007-06-16T11:03:00.000-04:00") (updated "2007-06-16T11:03:01.874-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "1. \"Scheme is simpler than CL\" does not mean it is...") (post-content "1. \"Scheme is simpler than CL\" does not mean it is better than CL. Perhaps I should have used the word \"uniform\" instead. See the conclusion of my expressiveness paper for \"better\"; this is not a new opinion. " (br) (br) "2. If you were on the PLT mailing list, you'd see how much we try to learn from CL. We are currently discussing comprehensions and loops and keywords. We naturally look at CL (and other approaches) before we make a decision. [And besides Mike and Queinnec and Manuel, Friedman, Clinger and I have given talks at the conference when it is over here.]" (br) (br) "3. As for the substrate vs API decisions, I think what you are trying to say is that the idea of a thin API has failed. You are right in that dimension.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/7201123380885059455/comments/default/7321626238837024856") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/7201123380885059455/comments/default/7321626238837024856") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/06/small-is-beautiful-large-is-useful-and.html?showComment=1182006180000#c7321626238837024856") (rel "alternate") (title "") (type "text/html"))) (author (name "matthias") (uri "https://www.blogger.com/profile/00000181081270224360") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.ccs.neu.edu/home/matthias/Images/felleisen1.jpg") (width "23")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/06/small-is-beautiful-large-is-useful-and.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-7201123380885059455") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/7201123380885059455") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-56163577"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 16, 2007 at 11:03 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-670766402745092259") (published "2007-06-16T12:59:00.000-04:00") (updated "2007-06-16T12:59:03.469-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "1. Scheme was simpler / more uniform than CL, but ...") (post-content "1. Scheme was simpler / more uniform than CL, but not anymore. R6RS, as it is currently proposed, is simpler / more uniform in some respects, but more complex in others. For example, in Common Lisp, the external and the internal representation of source code is exactly the same, whereas Scheme makes a distinction between s-expressions and syntax objects. So Common Lisp is more uniform in that regard." (br) (br) "This is a general observation in programming language design, IMHO: If you simplify some aspects of a programming language, others will turn out more complex, and as soon as a programming language grows beyond a certain size, the best you can do is to try to balance the various trade offs. Unfortunately, the initial simplifications in the originally covered areas limit the kinds of decisions you can afford to make in other areas later on. This is a fate that a lot of programming languages have faced in the past and are still facing." (br) (br) "I didn't try to say anything about \"better\" (and didn't intend to suggest that you do). \"Better\" is, of course, always relative to a particular task at hand." (br) (br) "2. This is good to hear. The mailing list archive is hard to navigate and it seems impossible to search in it. The load seems to be high, so I probably will not subscribe to it. Just a hint: In Common Lisp, the performance overhead caused by keyword arguments can be compensated by taking advantage of compiler macros. This gives you full flexibility of \"dynamic\" keyword arguments while being able to preprocess them at compile time when concrete keyword arguments are statically known." (br) (br) "3. It's good to hear that we agree on something. :)") (link ((href "https://www.blogger.com/feeds/2080885971644496896/7201123380885059455/comments/default/670766402745092259") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/7201123380885059455/comments/default/670766402745092259") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/06/small-is-beautiful-large-is-useful-and.html?showComment=1182013140000#c670766402745092259") (rel "alternate") (title "") (type "text/html"))) (author (name "Pascal Costanza") (uri "https://www.blogger.com/profile/04512975624438301971") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//p-cos.net/blogpics/pastedGraphic.jpg") (width "23")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/06/small-is-beautiful-large-is-useful-and.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-7201123380885059455") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/7201123380885059455") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1775558073"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 16, 2007 at 12:59 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-9100747973627969544") (published "2007-07-28T02:38:00.000-04:00") (updated "2007-07-28T02:38:10.686-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "This is really beautiful. :)") (post-content "This is really beautiful. :)") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2698032372224392708/comments/default/9100747973627969544") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2698032372224392708/comments/default/9100747973627969544") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/07/callcc-and-self-modifying-code.html?showComment=1185604680000#c9100747973627969544") (rel "alternate") (title "") (type "text/html"))) (author (name "Jianshi Huang") (uri "https://www.blogger.com/profile/01477856503813480062") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/07/callcc-and-self-modifying-code.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2698032372224392708") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2698032372224392708") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1833075749"))) (gd:extendedProperty ((name "blogger.displayTime") (value "July 28, 2007 at 2:38 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8657223809125972670") (published "2007-07-28T03:29:00.000-04:00") (updated "2007-07-28T03:29:39.061-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "A pretty little ditty, to be sure. Much of object-...") (post-content "A pretty little ditty, to be sure. Much of object-oriented programming relies on self-modifying code, if you think about it. Consider the " (i "strategy") " pattern or the " (i "state") " pattern. In object-oriented programs it may appear that we are changing the data, but we are really changing the code.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2698032372224392708/comments/default/8657223809125972670") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2698032372224392708/comments/default/8657223809125972670") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/07/callcc-and-self-modifying-code.html?showComment=1185607740000#c8657223809125972670") (rel "alternate") (title "") (type "text/html"))) (author (name "I, Object") (uri "https://www.blogger.com/profile/06064429394008899781") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//farm1.static.flickr.com/29/42328144_48fda25f88_m.jpg") (width "22")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/07/callcc-and-self-modifying-code.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2698032372224392708") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2698032372224392708") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-2126848243"))) (gd:extendedProperty ((name "blogger.displayTime") (value "July 28, 2007 at 3:29 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1750427370079384670") (published "2007-07-28T19:37:00.000-04:00") (updated "2007-07-28T19:37:46.943-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Hello, a quick question:" "<" "br" ">" "<" "br" ">" "I'm not a scheme g...") (post-content "Hello, a quick question:" (br) (br) "I'm not a scheme guru, but the posted code seems a bit off. Specifically, it looks to me like 'return' is only bound the first time generator is called, so if you used it like:" (br) (br) "   (generator)" (br) "   ..." (br) "   (generator)" (br) (br) "On the second call, it would jump back to the first call (since that's what the continuation stored in 'return' is). It seems like it should instead be something like (totally untested):" (br) (br) "  ..." (br) "  (lambda (an-element-from-a-list)" (br) "     (set! return" (br) "           (call/cc" (br) "               (lambda (resume-here)" (br) "                   (set! control-state resume-here)" (br) "                   (return an-element-from-a-list)))))" (br) "  ..." (br) (br) "However, as I said, I don't write a lot of scheme, so maybe I'm missing something." (br) (br) "Apologies for the terrible formatting, but I'm not sure how to tell blogger to display stuff as code." (br) (br) "Cheers.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2698032372224392708/comments/default/1750427370079384670") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2698032372224392708/comments/default/1750427370079384670") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/07/callcc-and-self-modifying-code.html?showComment=1185665820000#c1750427370079384670") (rel "alternate") (title "") (type "text/html"))) (author (name "Dan Doel") (uri "https://www.blogger.com/profile/16761291400347369301") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/07/callcc-and-self-modifying-code.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2698032372224392708") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2698032372224392708") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1311912189"))) (gd:extendedProperty ((name "blogger.displayTime") (value "July 28, 2007 at 7:37 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8957100690563545273") (published "2007-07-29T00:39:00.000-04:00") (updated "2007-07-29T00:39:02.092-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "this is a terrible misuse of call/cc." "<" "br" ">" "here is a...") (post-content "this is a terrible misuse of call/cc." (br) "here is a better implementation:" (br) (br) "(define (one-at-a-time lst)" (br) "  (lambda ()" (br) "    (if (null? lst)" (br) " 'you-fell-off-the-end" (br) " (let ((x (car lst)))" (br) "   (set! lst (cdr lst))" (br) "   x))))") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2698032372224392708/comments/default/8957100690563545273") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2698032372224392708/comments/default/8957100690563545273") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/07/callcc-and-self-modifying-code.html?showComment=1185683940000#c8957100690563545273") (rel "alternate") (title "") (type "text/html"))) (author (name "Gavin") (uri "https://www.blogger.com/profile/12575866657010241016") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/07/callcc-and-self-modifying-code.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2698032372224392708") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2698032372224392708") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1870562125"))) (gd:extendedProperty ((name "blogger.displayTime") (value "July 29, 2007 at 12:39 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1816754561983871300") (published "2007-07-29T05:29:00.000-04:00") (updated "2007-07-29T05:29:04.291-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "@Gavin: Actually, it is exactly what the recent ca...") (post-content "@Gavin: Actually, it is exactly what the recent call/cc hype was about: To allow implicit (foreach) instead of explicit state machines, esp. in the context of web applications. Imagine the state getting a little bit more complicated. (You'd need to hide the call/cc in an abstraction for the generator programmer as well, though.)") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2698032372224392708/comments/default/1816754561983871300") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2698032372224392708/comments/default/1816754561983871300") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/07/callcc-and-self-modifying-code.html?showComment=1185701340000#c1816754561983871300") (rel "alternate") (title "") (type "text/html"))) (author (name "Andreas Krey") (uri "https://www.blogger.com/profile/18011171943440483489") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//images.iocl.org/ak.jpg") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/07/callcc-and-self-modifying-code.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2698032372224392708") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2698032372224392708") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1671350054"))) (gd:extendedProperty ((name "blogger.displayTime") (value "July 29, 2007 at 5:29 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4538852792058377675") (published "2007-07-29T12:10:00.000-04:00") (updated "2007-07-29T12:10:38.674-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "call/cc is indeed a bad choice if all you're doing...") (post-content "call/cc is indeed a bad choice if all you're doing is making a generator out of a flat list. However, the technique mentioned works about equally well for turning folds over arbitrary data structures into generators/cursors." (br) (br) "For instance, writing a generator for a binary tree using only the analogues to car/cdr is a pain (I imagine you'd manage a stack of nodes to be visited by hand). However, writing an in-order traversal is simple. This example shows that you can turn the latter into the former automatically and generically using call/cc." (br) (br) "Of course, for the particular case of turning a fold into a cursor, delimited continuations are, perhaps, even nicer (and, in a sense, this example might be mimicking delimited continuations with call/cc + state). Something like:" (br) (br) "(define (mk-generator traversal structure)" (br) "   (define (generator) (control-loop))" (br) (br) "   (define (control-loop)" (br) "      (reset" (br) "         (traversal" (br) "            (lambda (element)" (br) "               (shift" (br) "                  (lambda (k)" (br) "                     (set! control-loop (lambda () (k #f)))" (br) "                     element)))" (br) "            structure)" (br) "         'traversal-done))" (br) (br) "   generator)" (br) (br) "Which, handily, avoids having to worry about keeping track of a return continuation for this problem." (br) (br) "The problem of turning folds into cursors in various languages, and the advantages of structuring a collection library in such a way are " (a ((href "http://okmij.org/ftp/Computation/Continuations.html#enumerator-stream") (rel "nofollow")) "discussed in more depth here") ".") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2698032372224392708/comments/default/4538852792058377675") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2698032372224392708/comments/default/4538852792058377675") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/07/callcc-and-self-modifying-code.html?showComment=1185725400000#c4538852792058377675") (rel "alternate") (title "") (type "text/html"))) (author (name "Dan Doel") (uri "https://www.blogger.com/profile/16761291400347369301") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/07/callcc-and-self-modifying-code.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2698032372224392708") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2698032372224392708") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1311912189"))) (gd:extendedProperty ((name "blogger.displayTime") (value "July 29, 2007 at 12:10 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8717960294872729905") (published "2007-07-29T23:02:00.000-04:00") (updated "2007-07-29T23:02:21.634-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "1. Thanks for pointing out the bug. " "<" "br" ">" "<" "br" ">" "2. Thi...") (post-content "1. Thanks for pointing out the bug. " (br) (br) "2. This (correct) code is a  poem on turning a loop into a generator. It is not serious code. " (br) (br) "3. And yes, it is writing code like that many times, which first suggested delimited continuations to me in the fall of 1984; it just took three years to write it up.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2698032372224392708/comments/default/8717960294872729905") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2698032372224392708/comments/default/8717960294872729905") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/07/callcc-and-self-modifying-code.html?showComment=1185764520000#c8717960294872729905") (rel "alternate") (title "") (type "text/html"))) (author (name "matthias") (uri "https://www.blogger.com/profile/00000181081270224360") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.ccs.neu.edu/home/matthias/Images/felleisen1.jpg") (width "23")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/07/callcc-and-self-modifying-code.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2698032372224392708") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2698032372224392708") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-56163577"))) (gd:extendedProperty ((name "blogger.displayTime") (value "July 29, 2007 at 11:02 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-960465806979833029") (published "2007-08-07T23:01:00.000-04:00") (updated "2007-08-07T23:01:12.200-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "What exactly do you mean by random errors? If you ...") (post-content "What exactly do you mean by random errors? If you get a \"undefined function FOO\" error that's a pretty clear indication that whatever file defines FOO should be defined as a dependency." (br) (br) "Also, if you wish to speed up compilation by determining precise dependencies between files in your system " (a ((href "http://www.cliki.net/asdf-dependency-grovel") (rel "nofollow")) "asdf-dependency-grovel") " might be a useful little tool.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3907084013741018564/comments/default/960465806979833029") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3907084013741018564/comments/default/960465806979833029") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/08/plt-modules-and-separate-compilation.html?showComment=1186542060000#c960465806979833029") (rel "alternate") (title "") (type "text/html"))) (author (name "LuÃ­s") (uri "https://www.blogger.com/profile/04787580931645750027") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/08/plt-modules-and-separate-compilation.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3907084013741018564") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3907084013741018564") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-402862621"))) (gd:extendedProperty ((name "blogger.displayTime") (value "August 7, 2007 at 11:01 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5040375312665238537") (published "2007-08-08T13:05:00.000-04:00") (updated "2007-08-08T13:05:43.009-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Does anyone happen to know the scale of the use of...") (post-content "Does anyone happen to know the scale of the use of scheme or lisp as a web side server language used by MIT's Electrical Engineering Computer  Science department in 6.001 or other classes?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2279205445911348013/comments/default/5040375312665238537") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2279205445911348013/comments/default/5040375312665238537") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/08/experience-report-scheme-in-commercial.html?showComment=1186592700000#c5040375312665238537") (rel "alternate") (title "") (type "text/html"))) (author (name "Aaron") (uri "https://www.blogger.com/profile/18321268709365759565") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/08/experience-report-scheme-in-commercial.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2279205445911348013") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2279205445911348013") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-552129355"))) (gd:extendedProperty ((name "blogger.displayTime") (value "August 8, 2007 at 1:05 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7990705050300328519") (published "2007-08-16T11:50:00.000-04:00") (updated "2007-08-16T11:50:18.014-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I agree about the issue of macros --- ASDF does no...") (post-content "I agree about the issue of macros --- ASDF does not allow you to say \"this system exports a macro, and if the macro has changed, all downstream systems should be recompiled.\"  This is left as an exercise to the reader, and I have certainly been caused severe pain by that." (br) (br) "WRT \"compiler support,\" I don't really agree with you.  This is " (i "Common") " Lisp, after all, and I " (i "like") " the fact that ASDF works on SBCL " (i "and") " Allegro Common Lisp, etc.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3907084013741018564/comments/default/7990705050300328519") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3907084013741018564/comments/default/7990705050300328519") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/08/plt-modules-and-separate-compilation.html?showComment=1187279400000#c7990705050300328519") (rel "alternate") (title "") (type "text/html"))) (author (name "Robert") (uri "https://www.blogger.com/profile/06869286828634810130") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/08/plt-modules-and-separate-compilation.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3907084013741018564") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3907084013741018564") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1445595668"))) (gd:extendedProperty ((name "blogger.displayTime") (value "August 16, 2007 at 11:50 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7966630408727603269") (published "2007-08-22T16:41:00.000-04:00") (updated "2007-08-22T16:41:07.689-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Isn't it still a problem that we cannot use yield ...") (post-content "Isn't it still a problem that we cannot use yield in macros?" (br) (br) "As a silly example:" (br) "(define-syntax yield2" (br) "  (syntax-rules (yield)" (br) "    ((_ x) (yield x))))" (br) (br) "(define/y (step)" (br) " (yield2 1)" (br) " 'finished))" (br) (br) "We'll get a yield unbound error when calling step.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1834491843674778394/comments/default/7966630408727603269") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1834491843674778394/comments/default/7966630408727603269") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/08/macros-and-hygiene-resumed.html?showComment=1187815260000#c7966630408727603269") (rel "alternate") (title "") (type "text/html"))) (author (name "LÃ©a") (uri "https://www.blogger.com/profile/02688630380873627044") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/08/macros-and-hygiene-resumed.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1834491843674778394") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1834491843674778394") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1421472792"))) (gd:extendedProperty ((name "blogger.displayTime") (value "August 22, 2007 at 4:41 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-615285022269423636") (published "2007-08-22T17:14:00.000-04:00") (updated "2007-08-22T17:14:26.407-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text"))) (post-content "This comment has been removed by the author.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1834491843674778394/comments/default/615285022269423636") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1834491843674778394/comments/default/615285022269423636") (rel "self") (type "application/atom+xml"))) (author (name "LÃ©a") (uri "https://www.blogger.com/profile/02688630380873627044") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/08/macros-and-hygiene-resumed.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1834491843674778394") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1834491843674778394") (type "text/html"))) (gd:extendedProperty ((name "blogger.contentRemoved") (value "true"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1421472792"))) (gd:extendedProperty ((name "blogger.displayTime") (value "August 22, 2007 at 5:14 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6922474980078493262") (published "2007-08-22T17:15:00.000-04:00") (updated "2007-08-22T17:15:12.991-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Ah, OK, this has to do with the lexical scope of y...") (post-content "Ah, OK, this has to do with the lexical scope of yield." (br) (br) "If I define" (br) (br) "(define/y (step)" (br) "  (define-syntax yield2" (br) "  (syntax-rules ()" (br) "    ((_ x) (yield x))))" (br) "  (yield2 1)" (br) "  'finished)" (br) (br) "instead, it works.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1834491843674778394/comments/default/6922474980078493262") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1834491843674778394/comments/default/6922474980078493262") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/08/macros-and-hygiene-resumed.html?showComment=1187817300000#c6922474980078493262") (rel "alternate") (title "") (type "text/html"))) (author (name "LÃ©a") (uri "https://www.blogger.com/profile/02688630380873627044") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/08/macros-and-hygiene-resumed.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1834491843674778394") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1834491843674778394") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1421472792"))) (gd:extendedProperty ((name "blogger.displayTime") (value "August 22, 2007 at 5:15 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6768518990809635697") (published "2007-09-06T15:23:00.000-04:00") (updated "2007-09-06T15:23:32.910-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I remember reading in Lisp In Small Pieces that CD...") (post-content "I remember reading in Lisp In Small Pieces that CDR is statistically more often encountered that CAR... So my final answer is \"less CARs than CDRs in the source code of PLT\"") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2026851843466892876/comments/default/6768518990809635697") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2026851843466892876/comments/default/6768518990809635697") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/09/how-many-occurrences-of-car-in-plt.html?showComment=1189106580000#c6768518990809635697") (rel "alternate") (title "") (type "text/html"))) (author (name "Adrien") (uri "https://www.blogger.com/profile/15417993178185041173") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/09/how-many-occurrences-of-car-in-plt.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2026851843466892876") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2026851843466892876") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-787511578"))) (gd:extendedProperty ((name "blogger.displayTime") (value "September 6, 2007 at 3:23 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2372816228933760341") (published "2007-09-06T15:31:00.000-04:00") (updated "2007-09-06T15:31:00.128-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "That is a good guess, but it turns out not to be t...") (post-content "That is a good guess, but it turns out not to be the case. Maybe we just write code where we say (car l) several times in the loop body but only recur in one place, so there's only one (cdr l) but multiple (car l)s. I know some would call that blasphemous programming ...") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2026851843466892876/comments/default/2372816228933760341") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2026851843466892876/comments/default/2372816228933760341") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/09/how-many-occurrences-of-car-in-plt.html?showComment=1189107060000#c2372816228933760341") (rel "alternate") (title "") (type "text/html"))) (author (name "Robby") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//people.cs.uchicago.edu/~robby/portrait-2006.jpg") (width "13")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/09/how-many-occurrences-of-car-in-plt.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2026851843466892876") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2026851843466892876") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1090470180"))) (gd:extendedProperty ((name "blogger.displayTime") (value "September 6, 2007 at 3:31 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4374665875238650342") (published "2007-09-06T16:27:00.000-04:00") (updated "2007-09-06T16:27:36.683-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Ok, I'll bite..." "<" "br" ">" "<" "br" ">" "My first thought was: prob...") (post-content "Ok, I'll bite..." (br) (br) "My first thought was: probably some generic variable name, like " (b "x") ". But when I look at a few source fies of my own, I don't see a lot of " (b "x") "s." (br) (br) "I do see a lot more " (b "quote") "s than I expected, though. So, I'll guess " (b "quote") ", though I think it's not a very good guess." (br) (br) "I wouldn't think that " (b "car") " shows up much at all, actually. Maybe a few hundred times?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2026851843466892876/comments/default/4374665875238650342") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2026851843466892876/comments/default/4374665875238650342") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/09/how-many-occurrences-of-car-in-plt.html?showComment=1189110420000#c4374665875238650342") (rel "alternate") (title "") (type "text/html"))) (author (name "Matthew Flatt") (uri "https://www.blogger.com/profile/03369511886823036667") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/09/how-many-occurrences-of-car-in-plt.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2026851843466892876") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2026851843466892876") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1300564163"))) (gd:extendedProperty ((name "blogger.displayTime") (value "September 6, 2007 at 4:27 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-95193619077189535") (published "2007-09-06T16:54:00.000-04:00") (updated "2007-09-06T16:54:35.356-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "<" "b" ">" "quote" "<" "/b" ">" " is not a bad guess. Its up there. " "<" "b" ">" "...") (post-content (b "quote") " is not a bad guess. Its up there. " (b "x") " isn't bad either. Neither are at the very top, tho.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2026851843466892876/comments/default/95193619077189535") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2026851843466892876/comments/default/95193619077189535") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/09/how-many-occurrences-of-car-in-plt.html?showComment=1189112040000#c95193619077189535") (rel "alternate") (title "") (type "text/html"))) (author (name "Robby") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//people.cs.uchicago.edu/~robby/portrait-2006.jpg") (width "13")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/09/how-many-occurrences-of-car-in-plt.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2026851843466892876") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2026851843466892876") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1090470180"))) (gd:extendedProperty ((name "blogger.displayTime") (value "September 6, 2007 at 4:54 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1365534370923808433") (published "2007-09-06T17:27:00.000-04:00") (updated "2007-09-06T17:27:27.860-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Urr... \"let\"? Unfortunately, the \"let\"s are probab...") (post-content "Urr... \"let\"? Unfortunately, the \"let\"s are probably going to be diluted by the presence of \"let*\". I would probably cast my vote for \"list\" or maybe even... \"map\"?  No, no, probably not.  Okay, my best (bad) guess is \"list\".") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2026851843466892876/comments/default/1365534370923808433") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2026851843466892876/comments/default/1365534370923808433") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/09/how-many-occurrences-of-car-in-plt.html?showComment=1189114020000#c1365534370923808433") (rel "alternate") (title "") (type "text/html"))) (author (name "John Clements") (uri "https://www.blogger.com/profile/10401643794201938443") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/09/how-many-occurrences-of-car-in-plt.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2026851843466892876") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2026851843466892876") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1180715230"))) (gd:extendedProperty ((name "blogger.displayTime") (value "September 6, 2007 at 5:27 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5760774721295761261") (published "2007-09-06T17:35:00.000-04:00") (updated "2007-09-06T17:35:49.929-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "<" "b" ">" "let" "<" "/b" ">" " is pretty high but, surprisingly enough...") (post-content (b "let") " is pretty high but, surprisingly enough, if you add " (b "let*") "'s numbers to " (b "let") ", then " (b "let") " does not move in the list! " (b "list") " is a bit lower. Still fairly frequent, but not up there with " (b "let") " or " (b "quote") ". " (b "map") " is even lower than " (b "list") ".") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2026851843466892876/comments/default/5760774721295761261") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2026851843466892876/comments/default/5760774721295761261") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/09/how-many-occurrences-of-car-in-plt.html?showComment=1189114500000#c5760774721295761261") (rel "alternate") (title "") (type "text/html"))) (author (name "Robby") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//people.cs.uchicago.edu/~robby/portrait-2006.jpg") (width "13")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/09/how-many-occurrences-of-car-in-plt.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2026851843466892876") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2026851843466892876") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1090470180"))) (gd:extendedProperty ((name "blogger.displayTime") (value "September 6, 2007 at 5:35 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8430420626835958137") (published "2007-09-06T17:49:00.000-04:00") (updated "2007-09-06T17:49:43.241-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "My guess would be for `define' and `quote'.  But w...") (post-content "My guess would be for `define' and `quote'.  But when I run a count I get `set!' in the first place.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2026851843466892876/comments/default/8430420626835958137") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2026851843466892876/comments/default/8430420626835958137") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/09/how-many-occurrences-of-car-in-plt.html?showComment=1189115340000#c8430420626835958137") (rel "alternate") (title "") (type "text/html"))) (author (name "Eli") (uri "https://www.blogger.com/profile/02119543756660164304") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/09/how-many-occurrences-of-car-in-plt.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2026851843466892876") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2026851843466892876") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-597056409"))) (gd:extendedProperty ((name "blogger.displayTime") (value "September 6, 2007 at 5:49 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8453166785306477002") (published "2007-09-06T17:51:00.000-04:00") (updated "2007-09-06T17:51:02.588-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Yes, that was a joke.  But my count must be differ...") (post-content "Yes, that was a joke.  But my count must be different because I got `x' in the lead.  (With a good gap behind it.)") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2026851843466892876/comments/default/8453166785306477002") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2026851843466892876/comments/default/8453166785306477002") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/09/how-many-occurrences-of-car-in-plt.html?showComment=1189115460000#c8453166785306477002") (rel "alternate") (title "") (type "text/html"))) (author (name "Eli") (uri "https://www.blogger.com/profile/02119543756660164304") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/09/how-many-occurrences-of-car-in-plt.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2026851843466892876") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2026851843466892876") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-597056409"))) (gd:extendedProperty ((name "blogger.displayTime") (value "September 6, 2007 at 5:51 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3704917586957264955") (published "2007-09-06T17:55:00.000-04:00") (updated "2007-09-06T17:55:46.171-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Cheater!" "<" "br" ">" "<" "br" ">" "Guesses only, please!") (post-content "Cheater!" (br) (br) "Guesses only, please!") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2026851843466892876/comments/default/3704917586957264955") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2026851843466892876/comments/default/3704917586957264955") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/09/how-many-occurrences-of-car-in-plt.html?showComment=1189115700000#c3704917586957264955") (rel "alternate") (title "") (type "text/html"))) (author (name "Robby") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//people.cs.uchicago.edu/~robby/portrait-2006.jpg") (width "13")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/09/how-many-occurrences-of-car-in-plt.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2026851843466892876") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2026851843466892876") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1090470180"))) (gd:extendedProperty ((name "blogger.displayTime") (value "September 6, 2007 at 5:55 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5111950510975653200") (published "2007-09-06T17:59:00.000-04:00") (updated "2007-09-06T17:59:36.691-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "My (pre-counting) " "<" "b" ">" "guess" "<" "/b" ">" " was `define' or `qu...") (post-content "My (pre-counting) " (b "guess") " was `define' or `quote'.  My count showed `x' which is Matthew's guess.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2026851843466892876/comments/default/5111950510975653200") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2026851843466892876/comments/default/5111950510975653200") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/09/how-many-occurrences-of-car-in-plt.html?showComment=1189115940000#c5111950510975653200") (rel "alternate") (title "") (type "text/html"))) (author (name "Eli") (uri "https://www.blogger.com/profile/02119543756660164304") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/09/how-many-occurrences-of-car-in-plt.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2026851843466892876") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2026851843466892876") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-597056409"))) (gd:extendedProperty ((name "blogger.displayTime") (value "September 6, 2007 at 5:59 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6088534522959035010") (published "2007-09-06T18:02:00.000-04:00") (updated "2007-09-06T18:02:26.093-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Okay, we have a winner, then! " "<" "b" ">" "define" "<" "/b" ">" " tops t...") (post-content "Okay, we have a winner, then! " (b "define") " tops the list and " (b "quote") " is next." (br) (br) "I'll not reveal the actual numbers yet in case someone actually wants to try to guess them or to guess where " (b "car") " shows up.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2026851843466892876/comments/default/6088534522959035010") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2026851843466892876/comments/default/6088534522959035010") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/09/how-many-occurrences-of-car-in-plt.html?showComment=1189116120000#c6088534522959035010") (rel "alternate") (title "") (type "text/html"))) (author (name "Robby") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//people.cs.uchicago.edu/~robby/portrait-2006.jpg") (width "13")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/09/how-many-occurrences-of-car-in-plt.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2026851843466892876") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2026851843466892876") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1090470180"))) (gd:extendedProperty ((name "blogger.displayTime") (value "September 6, 2007 at 6:02 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6841011143512573743") (published "2007-09-07T06:23:00.000-04:00") (updated "2007-09-07T06:23:56.333-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Ok, I'll guess the car is quite far down the list....") (post-content "Ok, I'll guess the car is quite far down the list.  Maybe 1% of identifiers, or so.  I think with map/fold/etc. and pattern matching car is used quite infrequently.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2026851843466892876/comments/default/6841011143512573743") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2026851843466892876/comments/default/6841011143512573743") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/09/how-many-occurrences-of-car-in-plt.html?showComment=1189160580000#c6841011143512573743") (rel "alternate") (title "") (type "text/html"))) (author (name "Noel") (uri "https://www.blogger.com/profile/09666551093622614632") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/09/how-many-occurrences-of-car-in-plt.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2026851843466892876") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2026851843466892876") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-983025531"))) (gd:extendedProperty ((name "blogger.displayTime") (value "September 7, 2007 at 6:23 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1487810431077183910") (published "2007-09-07T11:32:00.000-04:00") (updated "2007-09-07T11:32:23.245-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I hadn't thought to count percentages. You're 1/2 ...") (post-content "I hadn't thought to count percentages. You're 1/2 right .... the top of the list is already in the 2% range! Indeed, once you're past " (b "define") " and " (b "quote") ", everything is 1.x percent or less." (br) (br) (b "car") " is well above " (b "map") " and none of the " (b "fold") "s crack the top 100.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2026851843466892876/comments/default/1487810431077183910") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2026851843466892876/comments/default/1487810431077183910") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/09/how-many-occurrences-of-car-in-plt.html?showComment=1189179120000#c1487810431077183910") (rel "alternate") (title "") (type "text/html"))) (author (name "Robby") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//people.cs.uchicago.edu/~robby/portrait-2006.jpg") (width "13")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/09/how-many-occurrences-of-car-in-plt.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2026851843466892876") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2026851843466892876") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1090470180"))) (gd:extendedProperty ((name "blogger.displayTime") (value "September 7, 2007 at 11:32 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4533428587753566100") (published "2007-09-09T18:43:00.000-04:00") (updated "2007-09-09T18:43:43.523-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Haaa!" "<" "br" ">" "I lost because of blasphemous programming...") (post-content "Haaa!" (br) "I lost because of blasphemous programming! :D") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2026851843466892876/comments/default/4533428587753566100") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2026851843466892876/comments/default/4533428587753566100") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/09/how-many-occurrences-of-car-in-plt.html?showComment=1189377780000#c4533428587753566100") (rel "alternate") (title "") (type "text/html"))) (author (name "Adrien") (uri "https://www.blogger.com/profile/15417993178185041173") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/09/how-many-occurrences-of-car-in-plt.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2026851843466892876") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2026851843466892876") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-787511578"))) (gd:extendedProperty ((name "blogger.displayTime") (value "September 9, 2007 at 6:43 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7011228117723108358") (published "2007-09-09T19:04:00.000-04:00") (updated "2007-09-09T19:04:45.252-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) ":)" "<" "br" ">" "<" "br" ">" "You might want to try to verify that hyp...") (post-content ":)" (br) (br) "You might want to try to verify that hypothesis -- see if there are multiple " (b "(car l)") "s on the same identifier. I'm sure one could write a script to count such things...") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2026851843466892876/comments/default/7011228117723108358") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2026851843466892876/comments/default/7011228117723108358") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/09/how-many-occurrences-of-car-in-plt.html?showComment=1189379040000#c7011228117723108358") (rel "alternate") (title "") (type "text/html"))) (author (name "Robby") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//people.cs.uchicago.edu/~robby/portrait-2006.jpg") (width "13")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/09/how-many-occurrences-of-car-in-plt.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2026851843466892876") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2026851843466892876") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1090470180"))) (gd:extendedProperty ((name "blogger.displayTime") (value "September 9, 2007 at 7:04 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7396170605411783876") (published "2007-09-15T06:24:00.000-04:00") (updated "2007-09-15T06:24:38.062-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Why would you want to adjust a valid and widesprea...") (post-content "Why would you want to adjust a valid and widespread usage just to integrate with usage elsewhere?  If we followed this idea to its logical conclusion we would have no vocabulary at all.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8762291102712481013/comments/default/7396170605411783876") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8762291102712481013/comments/default/7396170605411783876") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/09/dont-say-abstract-instead-say-general.html?showComment=1189851840000#c7396170605411783876") (rel "alternate") (title "") (type "text/html"))) (author (name "amoe") (uri "https://www.blogger.com/profile/12225759395324498055") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/09/dont-say-abstract-instead-say-general.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8762291102712481013") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8762291102712481013") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1023872186"))) (gd:extendedProperty ((name "blogger.displayTime") (value "September 15, 2007 at 6:24 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1164794701581654774") (published "2007-09-15T09:40:00.000-04:00") (updated "2007-09-15T09:40:00.222-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Makes sense to me if you want to talk with the fol...") (post-content "Makes sense to me if you want to talk with the folks from elsewhere that you should learn their language. If you just want to stick with your own people, then you don't bother with things like that.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8762291102712481013/comments/default/1164794701581654774") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8762291102712481013/comments/default/1164794701581654774") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/09/dont-say-abstract-instead-say-general.html?showComment=1189863600000#c1164794701581654774") (rel "alternate") (title "") (type "text/html"))) (author (name "Robby") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//people.cs.uchicago.edu/~robby/portrait-2006.jpg") (width "13")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/09/dont-say-abstract-instead-say-general.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8762291102712481013") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8762291102712481013") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1090470180"))) (gd:extendedProperty ((name "blogger.displayTime") (value "September 15, 2007 at 9:40 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3414745857515134319") (published "2007-09-19T18:26:00.000-04:00") (updated "2007-09-19T18:26:40.117-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I took 6.001 in in the Spring of 2005, and we did ...") (post-content "I took 6.001 in in the Spring of 2005, and we did not use scheme (our variant was MIT Scheme) for any server-side scripting. Come to think of it, we didn't do much of any server-side work, although we built a web crawler as a project.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2279205445911348013/comments/default/3414745857515134319") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2279205445911348013/comments/default/3414745857515134319") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/08/experience-report-scheme-in-commercial.html?showComment=1190240760000#c3414745857515134319") (rel "alternate") (title "") (type "text/html"))) (author (name "Brad") (uri "https://www.blogger.com/profile/14500191159436779224") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/08/experience-report-scheme-in-commercial.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2279205445911348013") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2279205445911348013") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-928420676"))) (gd:extendedProperty ((name "blogger.displayTime") (value "September 19, 2007 at 6:26 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4041295515501343677") (published "2007-10-04T12:00:00.000-04:00") (updated "2007-10-04T12:00:42.364-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I'm not sure that \"abstract\" and " "<" "br" ">" "\"general\" cap...") (post-content "I'm not sure that \"abstract\" and " (br) "\"general\" capture fungible notions." (br) (br) "In computer science and mathematics, abstraction captures the essential core of something.  I remember hearing David Foster Wallace, who'd written a book about math, talking about how the number 5 is an abstraction over 5 sheep, 5 houses, and so on.  But CS/math abstractions are very precise. I know exactly what you mean when" (br) "you say \"five\"." (br) (br) "To me, the word \"general\" as used in common parlance connotes some amount of fuzziness.  \"Oh, that's the general idea.\"  Not what you " (br) "want for computing -- unless maybe " (br) "you're Lofti Zadeh.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8762291102712481013/comments/default/4041295515501343677") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8762291102712481013/comments/default/4041295515501343677") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/09/dont-say-abstract-instead-say-general.html?showComment=1191513600000#c4041295515501343677") (rel "alternate") (title "") (type "text/html"))) (author (name "steck") (uri "https://www.blogger.com/profile/13416750891822431224") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/09/dont-say-abstract-instead-say-general.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8762291102712481013") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8762291102712481013") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1284969587"))) (gd:extendedProperty ((name "blogger.displayTime") (value "October 4, 2007 at 12:00 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4885534496130079047") (published "2007-10-09T10:49:00.000-04:00") (updated "2007-10-09T10:49:35.667-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "What release is this in?") (post-content "What release is this in?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1723323722672477302/comments/default/4885534496130079047") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1723323722672477302/comments/default/4885534496130079047") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/09/completions-in-drscheme-finally.html?showComment=1191941340000#c4885534496130079047") (rel "alternate") (title "") (type "text/html"))) (author (name "Chris") (uri "https://www.blogger.com/profile/02884273489742067366") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/09/completions-in-drscheme-finally.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1723323722672477302") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1723323722672477302") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-739568492"))) (gd:extendedProperty ((name "blogger.displayTime") (value "October 9, 2007 at 10:49 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1395968515800362833") (published "2007-10-09T10:58:00.000-04:00") (updated "2007-10-09T10:58:17.011-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Nevermind, I can see it in the screenshot.  Very c...") (post-content "Nevermind, I can see it in the screenshot.  Very cool!") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1723323722672477302/comments/default/1395968515800362833") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1723323722672477302/comments/default/1395968515800362833") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/09/completions-in-drscheme-finally.html?showComment=1191941880000#c1395968515800362833") (rel "alternate") (title "") (type "text/html"))) (author (name "Chris") (uri "https://www.blogger.com/profile/02884273489742067366") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/09/completions-in-drscheme-finally.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1723323722672477302") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1723323722672477302") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-739568492"))) (gd:extendedProperty ((name "blogger.displayTime") (value "October 9, 2007 at 10:58 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4600853750668778922") (published "2007-10-30T09:39:00.000-04:00") (updated "2007-10-30T09:39:34.783-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "<" "i" ">" "I know exactly what you mean when you say \"five...") (post-content (i "I know exactly what you mean when you say \"five\".") (br) (br) "You do?  5 might be Frege's 5 (the set of all fivesomes), or von Neumann's 5 (the set {0, 1, 2, 3, 4}, where 4 is {0, 1, 2, 3}, where 3 is {0, 1, 2}, where 2 is {0, 1}, where 1 is {0}, where 0 is {}), or some other 5 altogether.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8762291102712481013/comments/default/4600853750668778922") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8762291102712481013/comments/default/4600853750668778922") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/09/dont-say-abstract-instead-say-general.html?showComment=1193751540000#c4600853750668778922") (rel "alternate") (title "") (type "text/html"))) (author (name "John Cowan") (uri "https://www.blogger.com/profile/11452247999156925669") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/09/dont-say-abstract-instead-say-general.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8762291102712481013") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8762291102712481013") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1478709735"))) (gd:extendedProperty ((name "blogger.displayTime") (value "October 30, 2007 at 9:39 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5863243739764987520") (published "2007-11-12T16:52:00.000-05:00") (updated "2007-11-12T16:52:33.365-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "A brave and commendable experiment! " "<" "br" ">" "<" "br" ">" "I thin...") (post-content "A brave and commendable experiment! " (br) (br) "I think there are two distinct issues here: set-cdr! can mutate list structure (and creates problems for functions that assume that list structure is invariant) whereas set-car! mutates list contents  but not structure (and prevents copying). I think the former is much more troublesome than the latter. Did you consider semi-mutable pairs, that is, pairs whose car is mutable but cdr is immutable? In the code you have converted, is set-cdr! more common than set-car!?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/5863243739764987520") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/5863243739764987520") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html?showComment=1194904320000#c5863243739764987520") (rel "alternate") (title "") (type "text/html"))) (author (name "Alan Watson") (uri "https://www.blogger.com/profile/05673202598799658808") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1842888151218385802") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1842888151218385802") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1555968585"))) (gd:extendedProperty ((name "blogger.displayTime") (value "November 12, 2007 at 4:52 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2151525149499849663") (published "2007-11-12T22:52:00.000-05:00") (updated "2007-11-12T22:52:16.762-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "`set-car!' doesn't merely prevent copying (which i...") (post-content "`set-car!' doesn't merely prevent copying (which is a big enough problem for the contract system); it can also break invariants, as in the example of reflecting a list-box's content." (br) (br) "So, keeping `set-car!' leaves us with problems. Would keeping it solve any problems in practice? I did indeed see `set-cdr!' more than `set-car!', and I can't think of an example that would have run if only we had kept `set-car!'. Thus, aside from tradition, I don't yet see any rationale for keeping `set-car!' --- but I'm eager to hear about other experience.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/2151525149499849663") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/2151525149499849663") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html?showComment=1194925920000#c2151525149499849663") (rel "alternate") (title "") (type "text/html"))) (author (name "Matthew Flatt") (uri "https://www.blogger.com/profile/03369511886823036667") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1842888151218385802") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1842888151218385802") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1300564163"))) (gd:extendedProperty ((name "blogger.displayTime") (value "November 12, 2007 at 10:52 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-726480225925592225") (published "2007-11-13T05:50:00.000-05:00") (updated "2007-11-13T05:50:33.201-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "The only situations where I find myself mutating p...") (post-content "The only situations where I find myself mutating pairs are, on first glance, generating lists front to back, which you discussed, using pairs to implement simple 'pairs of values', where structs/objects/vectors could be used instead, and for sorted insertion into lists, which is more fundamental, but I guess would be a good place to use mutable pairs.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/726480225925592225") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/726480225925592225") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html?showComment=1194951000000#c726480225925592225") (rel "alternate") (title "") (type "text/html"))) (author (name "Marijn") (uri "https://www.blogger.com/profile/08981690099467560833") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1842888151218385802") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1842888151218385802") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-475348297"))) (gd:extendedProperty ((name "blogger.displayTime") (value "November 13, 2007 at 5:50 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1159163251842011896") (published "2007-11-13T13:51:00.000-05:00") (updated "2007-11-13T13:51:43.093-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Perhaps all I am saying is that the arguments agai...") (post-content "Perhaps all I am saying is that the arguments against set-car! are the standard arguments against mutation, whereas the arguments against set-cdr! are those plus the problems it creates for procedures like map. Thus, the justification for eliminating set-car! is similar to the justification for making records immutable (as you have done), whereas the justification for eliminating set-cdr! is this and more.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/1159163251842011896") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/1159163251842011896") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html?showComment=1194979860000#c1159163251842011896") (rel "alternate") (title "") (type "text/html"))) (author (name "Alan Watson") (uri "https://www.blogger.com/profile/05673202598799658808") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1842888151218385802") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1842888151218385802") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1555968585"))) (gd:extendedProperty ((name "blogger.displayTime") (value "November 13, 2007 at 1:51 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5959372898349027014") (published "2007-11-13T15:13:00.000-05:00") (updated "2007-11-13T15:13:43.417-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Alan: I think that the arguments against set-cdr! ...") (post-content "Alan: I think that the arguments against set-cdr! are in fact the same arguments against any old mutation (ie, just like the anti-set-car! arguments). Even tho the core libraries of Scheme (things like map) suffer more due to set-cdr!, ordinary programs suffer equally in our experience (as Matthew has explained)." (br) (br) "Anyways, let me encourage you to put your theory to the test and find some non-trivial programs or libraries that back up your point!") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/5959372898349027014") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/5959372898349027014") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html?showComment=1194984780000#c5959372898349027014") (rel "alternate") (title "") (type "text/html"))) (author (name "Robby") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//people.cs.uchicago.edu/~robby/portrait-2006.jpg") (width "13")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1842888151218385802") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1842888151218385802") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1090470180"))) (gd:extendedProperty ((name "blogger.displayTime") (value "November 13, 2007 at 3:13 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2383833893457497121") (published "2007-11-13T15:52:00.000-05:00") (updated "2007-11-13T15:52:18.282-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "My point is not that there are libraries or progra...") (post-content "My point is not that there are libraries or programs in which set-car! is a good idea. My point is an opinion, perhaps badly expressed, on why each creates problems and which is worse. Sorry for the noise.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/2383833893457497121") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/2383833893457497121") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html?showComment=1194987120000#c2383833893457497121") (rel "alternate") (title "") (type "text/html"))) (author (name "Alan Watson") (uri "https://www.blogger.com/profile/05673202598799658808") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1842888151218385802") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1842888151218385802") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1555968585"))) (gd:extendedProperty ((name "blogger.displayTime") (value "November 13, 2007 at 3:52 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8695517614401685654") (published "2007-11-13T20:52:00.000-05:00") (updated "2007-11-13T20:52:59.054-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I tend to agree.  I do use set-car! and set-cdr! t...") (post-content "I tend to agree.  I do use set-car! and set-cdr! time to time, but mostly from my laziness to use more appropriate data structures instead.  Recently I also started to avoid the use of set-cdr! to create list from front to back, for it doesn't work well with call/cc." (br) (br) "However, there's one more area that I see the mutable pairs are indispensable; circular lists.  Though it has its own problems, it is sometimes very handy to express some kind of code concisely where I'd use infinite lazy list in Haskell.  It only needs mutation at construction time, and we can make it \"freeze\" so that it won't have the problem of \"the list changing during traversal\"." (br) (br) "Do you have some plan to support circular structures specially (e.g. srfi-38 notation or srfi-1's circular-list procedure hides mutation \"under the hood\" so that the users only see immutable, already constructed structures)?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/8695517614401685654") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/8695517614401685654") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html?showComment=1195005120000#c8695517614401685654") (rel "alternate") (title "") (type "text/html"))) (author (name "Shiro Kawai") (uri "https://www.blogger.com/profile/11384462521536952545") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1842888151218385802") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1842888151218385802") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-343002210"))) (gd:extendedProperty ((name "blogger.displayTime") (value "November 13, 2007 at 8:52 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8692827520331669120") (published "2007-11-13T22:16:00.000-05:00") (updated "2007-11-13T22:16:44.448-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Yes. Version 3.99.0.2 has `make-reader-graph' for ...") (post-content "Yes. Version 3.99.0.2 has `make-reader-graph' for creating cycles built from immutable pairs. We need a better name, but the current name reflects that `read' still supports the #n= and #n# graph notation. (We've dropped support for cyclic syntax objects, though, so `read-syntax' no longer supports the graph notation).") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/8692827520331669120") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/8692827520331669120") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html?showComment=1195010160000#c8692827520331669120") (rel "alternate") (title "") (type "text/html"))) (author (name "Matthew Flatt") (uri "https://www.blogger.com/profile/03369511886823036667") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1842888151218385802") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1842888151218385802") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1300564163"))) (gd:extendedProperty ((name "blogger.displayTime") (value "November 13, 2007 at 10:16 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6407965856943920959") (published "2007-11-18T00:55:00.000-05:00") (updated "2007-11-18T00:55:01.552-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Well, I've been online now for over 30 minutes, an...") (post-content "Well, I've been online now for over 30 minutes, and AFAIK, I haven't been hacked.  This is a banner day.  Hi Matt; great article!  Out of necessity, from a security standpoint, I have converted all my boxes to some flavor of *nix.  As soon as I can download 3.99, I'll try to reproduce the flavor of the data from my flatten benchmark article.  This time it will be different, simply because they'll be on a new OS.  However, I have a bunch of varients of the flatten algorithm, using both muttable and immutable methods.  As I recall from my earlier results, the biggest difference advantage to using mutation came about when a poor algorithm had been choosen to begin with, that required the reversal of the result list.  These quite substantially improved their performance with the use of reverse!   However, the more elegant functional solutions, under favorable conditions, actually out performed even the fastest mutable algorithms.  Not typically, but definitely always in the race.  The success of building functional solutions, which are also efficient is certainly achieved with other functional languages.  I'll have to redesign my queue routine, as you mentioned, but it will be worth the effort.  I'm looking forward to getting a copy on my box as soon as possible." (br) (br) "Take care." (br) (br) "--kylr") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/6407965856943920959") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/6407965856943920959") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html?showComment=1195365300000#c6407965856943920959") (rel "alternate") (title "") (type "text/html"))) (author (name "Kyle Smith") (uri "https://www.blogger.com/profile/05673570688024190864") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//i202.photobucket.com/albums/aa98/airfoil/KyleWithAmphibico.jpg") (width "20")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1842888151218385802") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1842888151218385802") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-58301530"))) (gd:extendedProperty ((name "blogger.displayTime") (value "November 18, 2007 at 12:55 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7665183598856724025") (published "2007-11-18T16:15:00.000-05:00") (updated "2007-11-18T16:15:44.438-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Did not observe any problem beyond the typical usa...") (post-content "Did not observe any problem beyond the typical usages noted in the article when I moved SSAX and SXML to R6RS libraries." (br) (br) "Typical use is in implementing \"efficient\" queues.  I expect an applicative queue such as found in Okasaki would work fine on modern hardware and scheme implementations." (br) (br) "I doubt there is a systemic problem out there.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/7665183598856724025") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/7665183598856724025") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html?showComment=1195420500000#c7665183598856724025") (rel "alternate") (title "") (type "text/html"))) (author (name "GreyLensman") (uri "https://www.blogger.com/profile/12063637186335293030") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1842888151218385802") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1842888151218385802") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-220271060"))) (gd:extendedProperty ((name "blogger.displayTime") (value "November 18, 2007 at 4:15 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7722090637948041934") (published "2007-11-21T13:18:00.000-05:00") (updated "2007-11-21T13:18:42.305-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "How difficult would it be to replace set! with exp...") (post-content "How difficult would it be to replace set! with explicit boxes?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/7722090637948041934") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/7722090637948041934") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html?showComment=1195669080000#c7722090637948041934") (rel "alternate") (title "") (type "text/html"))) (author (name "Ethan Aubin") (uri "https://www.blogger.com/profile/03726030135568605285") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1842888151218385802") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1842888151218385802") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1683771408"))) (gd:extendedProperty ((name "blogger.displayTime") (value "November 21, 2007 at 1:18 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4689625353064758738") (published "2007-11-26T16:14:00.000-05:00") (updated "2007-11-26T16:14:25.706-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Are you considering changing the behaviour of eq? ...") (post-content "Are you considering changing the behaviour of eq? or eqv? on (now immutable) pairs? Currently, two immutable pairs whose cars and cdrs are eq? can only be distinguished by eq? or eqv?. As such, should they really be considered to be distinct or is their apparent distinctiveness simply an artifact of the implementation that should be hidden from the programmer?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/4689625353064758738") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/4689625353064758738") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html?showComment=1196111640000#c4689625353064758738") (rel "alternate") (title "") (type "text/html"))) (author (name "Alan Watson") (uri "https://www.blogger.com/profile/05673202598799658808") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.alan-watson.org/me.jpg") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1842888151218385802") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1842888151218385802") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1555968585"))) (gd:extendedProperty ((name "blogger.displayTime") (value "November 26, 2007 at 4:14 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6249512446486746398") (published "2007-11-27T11:12:00.000-05:00") (updated "2007-11-27T11:12:31.208-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Wow, did I make a mistake." "<" "br" ">" "<" "br" ">" "<" "b" ">" "Background." "<" "/...") (post-content "Wow, did I make a mistake." (br) (br) (b "Background.") " In PLT Redex, the stepper uses mutable lists to represent the currently visible portion of the reduction graph. When someone clicks the \"next\" button, it does a set-cdr! to add something to the end of that graph." (br) (br) (b "The Mistake.") " When I converted the code to v4, I figured that I should preserve the mutation, so I went in and changed a few set-car!s to set-mcar!s and then changed about 15 or 20 uses of filter, for-each, ormap, list-ref, and friends to versions of those that worked on mutable pairs instead of immutable ones. This took about 2 hours." (br) (br) "Not too bad, you might think. Two hours? Sometimes fixing one little bug can take longer than that, days even. Got away cheaply, you might think ..." (br) (br) (b "What I Should Have Done.") " Today I decided that I wanted the code to work in both v4 and in earlier versions of PLT Scheme, since the code'll be on PLaneT, after all and not everyone is using v4 yet. Sigh. So now I need to go undo that work and copy the list instead of mutating its tail. So I did that." (br) (br) "5 minutes. Done. Working code." (br) (br) "10 more minutes: removing all of the now useless helper functions that dealt with the mutable-pair versions of filter, for-each, ormap, list-ref. " (br) (br) "Oh well. Lesson learned, I suppose.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/6249512446486746398") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/6249512446486746398") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html?showComment=1196179920000#c6249512446486746398") (rel "alternate") (title "") (type "text/html"))) (author (name "Robby") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//people.cs.uchicago.edu/~robby/portrait-2006.jpg") (width "13")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1842888151218385802") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1842888151218385802") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1090470180"))) (gd:extendedProperty ((name "blogger.displayTime") (value "November 27, 2007 at 11:12 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2211927397510401424") (published "2007-11-27T11:27:00.000-05:00") (updated "2007-11-27T11:27:46.753-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "On replacing set! with set-box!: in a sense, this ...") (post-content "On replacing set! with set-box!: in a sense, this is so easy that the compiler does it automatically. That is, mutable variables are already implemented via boxes. You always know statically whether a variable needs to be boxed and unboxed due to lexical scope plus rules on mutating module-defined identifiers. For essentially the same reason, `set!' doesn't really cause much trouble; programmers usually see `set!'s and know to treat the relevant variable with care --- in contrast with `set-car!'s, which could be in a library that you don't see.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/2211927397510401424") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/2211927397510401424") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html?showComment=1196180820000#c2211927397510401424") (rel "alternate") (title "") (type "text/html"))) (author (name "Matthew Flatt") (uri "https://www.blogger.com/profile/03369511886823036667") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1842888151218385802") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1842888151218385802") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1300564163"))) (gd:extendedProperty ((name "blogger.displayTime") (value "November 27, 2007 at 11:27 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8263836778853855303") (published "2007-11-27T11:32:00.000-05:00") (updated "2007-11-27T11:32:36.438-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "We have so far not changed the interaction of `con...") (post-content "We have so far not changed the interaction of `cons' with `eq?' or `eqv?'. Specifically, `cons', `list', etc. are guaranteed to create fresh cons cells, in the sense that `eq?' distinguishes them, even though the cons cells are immutable. I think we may want to remove this guarantee eventually, because it would make some constant-folding optimizations easier and enable hash-consing, but we'll take one step at a time.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/8263836778853855303") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/8263836778853855303") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html?showComment=1196181120000#c8263836778853855303") (rel "alternate") (title "") (type "text/html"))) (author (name "Matthew Flatt") (uri "https://www.blogger.com/profile/03369511886823036667") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1842888151218385802") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1842888151218385802") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1300564163"))) (gd:extendedProperty ((name "blogger.displayTime") (value "November 27, 2007 at 11:32 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-190710874758406819") (published "2007-12-15T22:30:00.000-05:00") (updated "2007-12-15T22:30:23.368-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "A little late, but ..." "<" "br" ">" "<" "br" ">" "Once one acknowledge...") (post-content "A little late, but ..." (br) (br) "Once one acknowledges value of circular/recursive list data, it follows that there is likely value in the native runtime creation of such data as may be used for example to express arbitrarily recursively defined hierarchical information; which beyond the trivial, seems seems like a significant loss to the language to push such capability outside the baseline scope of the language by default." (br) (br) "Yes, such capability may be defined and utilized as required although not as elegantly as if it were native; however it seems a shame to seriously consider alienating the previously native capability to dynamically formulate native list data from datum not known at program specification/compile time (i.e. the ability to formulate and manipulate such list datum from information extracted during run-time, as data bases typically are, can not be performed natively without set-car! set-cdr!, nor specified purely functionally); as the loss of such a potentially powerful and useful capability seems" (br) "like a poor trade in exchange for the questionable value of default immutable lists, especially as the mutability of function argument can most typically be easily determined within a function, and optimizations applied accordingly, and in the few cases where it can't, so what, presume it may be mutated. (If the concern is limited to map, then simply specify that map's arguments are presumed to not be mutated until terminated, or generally forbidden).") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/190710874758406819") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/190710874758406819") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html?showComment=1197775800000#c190710874758406819") (rel "alternate") (title "") (type "text/html"))) (author (name "pschlie") (uri "https://www.blogger.com/profile/02011776500958481158") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1842888151218385802") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1842888151218385802") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1670138954"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 15, 2007 at 10:30 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1528989589056209297") (published "2007-12-15T22:35:00.000-05:00") (updated "2007-12-15T22:35:34.320-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "The entire purpose of this experiment was to avoid...") (post-content "The entire purpose of this experiment was to avoid caveats like \"seems\", \"likely\" and \"potentially\". If you have real examples to show, that would be interesting. So far we have far better abstract arguments against mutation than for it, and no concrete experience suggesting it should be brought back." (br) (br) "Also, I should remind you that mcons (and friends) exist, as do mutable structs. These are as \"native\" as it gets.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/1528989589056209297") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/1528989589056209297") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html?showComment=1197776100000#c1528989589056209297") (rel "alternate") (title "") (type "text/html"))) (author (name "Robby") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//people.cs.uchicago.edu/~robby/portrait-2006.jpg") (width "13")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1842888151218385802") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1842888151218385802") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1090470180"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 15, 2007 at 10:35 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-837555612880103478") (published "2007-12-16T18:45:00.000-05:00") (updated "2007-12-16T18:45:53.679-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Somewhat more concrete: " "<" "br" ">" "<" "br" ">" "- presume the run-...") (post-content "Somewhat more concrete: " (br) (br) "- presume the run-time creation, storage and/or retrieval of arbitrarily recursive list structured data is useful (or please prove otherwise)." (br) (br) "  (Personally see no value in presenting any particular program utilizing such capabilities, as the potential usefulness of such data structures representing state transition graphs, or more generally arbitrarily self recursive data representations are self evident; just as I see no value in any example given of how list mutation may yield indeterminate behavior in the absents of the specification of evaluation order; as overall the less flexible and deterministic a language is, the less useful it tends to be. Thereby I view dropping native mutable lists in an effort to improve determinism, in effect an attempt to improve a deficiency by removing utility; as opposed to improving its utility, by removing a deficiency.)" (br) (br) "Implying:" (br) (br) "- a facility to create/manipulate such data at run-time is required." (br) (br) "  - mcons (and friends) are only rudimentarily facilitates, which exclusively operate on a now severely crippled data type because mutable lists have been alienated from the language (incompatible with car and friends) and thereby incompatible with the majority of all native list functions and thereby now require an entirely redundant and largely absent collection of functions to specified to operate on and utilize them (inclusive of their inability to be evaluated as code):" (br) (br) "- a facility to store and retrieve such data at run-time is required." (br) (br) "  - as there is no current reader support to denote mutable lists:" (br) (br) "      - (mcons 'a '{b}) -> {a . (b)} ; not {a b} as likely" (br) "        (cons  'a '(b)) -> (a b)     ; expected by analogy" (br) (br) "      - (define x (mcons '+ (mcons 1 (mcons 2 null)))) ; i.e. {+ 1 2}" (br) "        (with-output-to-file \"f\" (lambda () (print x)) 'text 'replace)" (br) "        (with-input-from-file \"f\" (lambda () (read)))" (br) "        => (+ 1 2) ; wrong" (br) (br) "      - (define x (mcons 1 null)) (set-mcdr! x x) ; i.e. #0={1 . #0}" (br) "        (with-output-to-file \"f\" (lambda () (print x)) 'text 'replace)" (br) "        (with-input-from-file \"f\" (lambda () (read)))" (br) "       => #0=(1 . #0#) ; wrong" (br) "      " (br) "       [not to mention (define x '#0=(1 . #0#)) isn't accepted anymore]" (br) (br) "So overall, scheme absent mutable lists removes an entire class of capabilities which which was never proven to be useless, in fact arguably known to be otherwise, nor given analogous facilities of comparable utility." (br) (br) "Yes, such facilities may be structured from non-native structured data types and a corresponding new set of support functions; just as in most languages; however scheme was previously unique in that such a capability was inherent. (while were at it, maybe list data types and functions should be removed entirely, as after all, they're not strictly necessary as evidenced by most all other languages)." (br) (br) "In hind sight, justifying mutable list removal because large classes of programs do not require them, or that the language's specification may be easier in their absents, or because the contract facility implementation isn't capable determining if list data is in fact potentially mutated; hardly seems reasonable. IMHO") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/837555612880103478") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/837555612880103478") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html?showComment=1197848700000#c837555612880103478") (rel "alternate") (title "") (type "text/html"))) (author (name "pschlie") (uri "https://www.blogger.com/profile/02011776500958481158") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1842888151218385802") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1842888151218385802") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1670138954"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 16, 2007 at 6:45 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3960889055134150547") (published "2007-12-16T18:56:00.000-05:00") (updated "2007-12-16T18:56:30.508-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Paul, this is not what I meant by concrete. No one...") (post-content "Paul, this is not what I meant by concrete. No one said (or attempted to prove) that mutable cons cells were useless. Indeed, we still support them, but we just do not use them by default anymore." (br) (br) "The comment \"justifying mutable list removal because large classes of programs do not require them\" misses half of the problem with mutable lists. The first half of the problem, in fact. Matthew's post clearly explains why mutable lists cause problems in concrete ways and, if you permit me to say so, makes a far more convincing abstract case against mutable pairs than your abstract arguments for them." (br) (br) "But, in any case, these abstract arguments (either way) ultimately need to be backed up with real programs. Let me encourage you once again to provide some to back up your arguments. We have found none in a large body of code. Have you investigated a body of code and found some?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/3960889055134150547") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/3960889055134150547") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html?showComment=1197849360000#c3960889055134150547") (rel "alternate") (title "") (type "text/html"))) (author (name "Robby") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//people.cs.uchicago.edu/~robby/portrait-2006.jpg") (width "13")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1842888151218385802") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1842888151218385802") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1090470180"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 16, 2007 at 6:56 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7834792009300031380") (published "2007-12-20T11:29:00.000-05:00") (updated "2007-12-20T11:29:26.002-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Some folks would call that a feature!") (post-content "Some folks would call that a feature!") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1126871850288180624/comments/default/7834792009300031380") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1126871850288180624/comments/default/7834792009300031380") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/12/your-security-hole-is-my-fun-hack-or.html?showComment=1198168140000#c7834792009300031380") (rel "alternate") (title "") (type "text/html"))) (author (name "Griff") (uri "https://www.blogger.com/profile/09439997834215273665") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/12/your-security-hole-is-my-fun-hack-or.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1126871850288180624") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1126871850288180624") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1104808594"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 20, 2007 at 11:29 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-571418179016168849") (published "2007-12-20T11:44:00.000-05:00") (updated "2007-12-20T11:44:46.512-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Oh, indeed! Virus authors consider C's lack of arr...") (post-content "Oh, indeed! Virus authors consider C's lack of array bounds checking a feature, no doubt. :)") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1126871850288180624/comments/default/571418179016168849") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1126871850288180624/comments/default/571418179016168849") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/12/your-security-hole-is-my-fun-hack-or.html?showComment=1198169040000#c571418179016168849") (rel "alternate") (title "") (type "text/html"))) (author (name "Robby") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//people.cs.uchicago.edu/~robby/portrait-2006.jpg") (width "13")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/12/your-security-hole-is-my-fun-hack-or.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1126871850288180624") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1126871850288180624") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1090470180"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 20, 2007 at 11:44 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8446955628916610811") (published "2007-12-28T09:39:00.000-05:00") (updated "2007-12-28T09:39:46.039-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "The problems you describe with mutability remind m...") (post-content "The problems you describe with mutability remind me of type-theory where each kind of thing is separated into its own type.  Then you can always use the types in conjunction with each other if you need the functionality of both." (br) (br) "For example, if you had the types `list' and `mutable' you could distinguish between an immutable list of immutable elements, an immutable list of mutable elements, a mutable list of immutable elements, and so on, and put this in your \"contract system\" (whatever that is)." (br) (br) "This not only documents the usage of things like mutability, but also allows the compiler (in theory) to check such constraints on inputs and outputs." (br) (br) "When a function like `map' expects an immutable list, it will simply use the `list' type without restricting the mutation of elements.  But in places where that could be harmful, a different type can be used.  The conventional Scheme way of allowing everything to be mutable prevents this separation of distinct properties of values." (br) (br) "I'm not too familiar with how Scheme implements things, but the general way this is done is to box things that are mutable.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/8446955628916610811") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/8446955628916610811") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html?showComment=1198852740000#c8446955628916610811") (rel "alternate") (title "") (type "text/html"))) (author (name "Jon T") (uri "https://www.blogger.com/profile/06761280566170515580") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1842888151218385802") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1842888151218385802") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-626335516"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 28, 2007 at 9:39 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6006494020653113848") (published "2007-12-29T17:17:00.000-05:00") (updated "2007-12-29T17:17:16.580-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "So ... which of the existing teachpacks seem close...") (post-content "So ... which of the existing teachpacks seem closest to your ideal?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/103836778351212601/comments/default/6006494020653113848") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/103836778351212601/comments/default/6006494020653113848") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/12/design-of-extended-exercises.html?showComment=1198966620000#c6006494020653113848") (rel "alternate") (title "") (type "text/html"))) (author (name "offby1") (uri "https://www.blogger.com/profile/01257566357465364171") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/12/design-of-extended-exercises.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-103836778351212601") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/103836778351212601") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-267629600"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 29, 2007 at 5:17 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7445197064585957820") (published "2008-01-22T11:17:00.000-05:00") (updated "2008-01-22T11:17:33.754-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Salting and hashing the student ids before publish...") (post-content "Salting and hashing the student ids before publishing them would protect identity as well, without depending on program-flow strategies, no?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3376141267131043957/comments/default/7445197064585957820") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3376141267131043957/comments/default/7445197064585957820") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/01/privacy-flaw-thwarted.html?showComment=1201018620000#c7445197064585957820") (rel "alternate") (title "") (type "text/html"))) (author (name "fawcett") (uri "https://www.blogger.com/profile/03670078611251538949") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/01/privacy-flaw-thwarted.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3376141267131043957") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3376141267131043957") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-95894464"))) (gd:extendedProperty ((name "blogger.displayTime") (value "January 22, 2008 at 11:17 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1973578137297718209") (published "2008-01-25T23:12:00.000-05:00") (updated "2008-01-25T23:12:17.761-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "In another five years or so you'll be where ML was...") (post-content "In another five years or so you'll be where ML was twenty years ago!  Better late than never, I suppose, but, really, what is the point?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/1973578137297718209") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/1973578137297718209") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html?showComment=1201320720000#c1973578137297718209") (rel "alternate") (title "") (type "text/html"))) (author (name "Existential Type") (uri "https://www.blogger.com/profile/05595505123938492280") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1842888151218385802") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1842888151218385802") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-89490487"))) (gd:extendedProperty ((name "blogger.displayTime") (value "January 25, 2008 at 11:12 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8573139025872795973") (published "2008-01-25T23:27:00.000-05:00") (updated "2008-01-25T23:27:06.958-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "\"Existential Type\": your comment begs the exact sa...") (post-content "\"Existential Type\": your comment begs the exact same reply with macros, except that five years is probably optimistic, and twenty years is an underestimate.  Or type reflection that maybe some day will get ML some of the advantages of Scheme." (br) (br) "(But this is, of course, a pointless flame, just like your comment.  FWIW, the main issue is legacy code, and switching to Scheme with immutable lists is slightly easier than switching to ML.  At least for us Scheme freaks.)") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/8573139025872795973") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/8573139025872795973") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html?showComment=1201321620000#c8573139025872795973") (rel "alternate") (title "") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.barzilay.org/images/eli1.jpg") (width "28")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1842888151218385802") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1842888151218385802") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-311455247"))) (gd:extendedProperty ((name "blogger.displayTime") (value "January 25, 2008 at 11:27 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2261075798391270220") (published "2008-01-26T15:15:00.000-05:00") (updated "2008-01-26T15:15:59.067-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I presume that the count for " "<" "b" ">" "quote" "<" "/b" ">" " includes...") (post-content "I presume that the count for " (b "quote") " includes " (b "'") "; I can hardly imagine writing " (b "quote") " as an identifier any more, except perhaps in the context " (b "'quote") "." (br) (br) "In addition, it's not surprising that " (b "foldl") " beats " (b "foldr") " in an eager language.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2026851843466892876/comments/default/2261075798391270220") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2026851843466892876/comments/default/2261075798391270220") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/09/how-many-occurrences-of-car-in-plt.html?showComment=1201378500000#c2261075798391270220") (rel "alternate") (title "") (type "text/html"))) (author (name "John Cowan") (uri "https://www.blogger.com/profile/11452247999156925669") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/09/how-many-occurrences-of-car-in-plt.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2026851843466892876") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2026851843466892876") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1478709735"))) (gd:extendedProperty ((name "blogger.displayTime") (value "January 26, 2008 at 3:15 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4237387628378440482") (published "2008-01-26T18:01:00.000-05:00") (updated "2008-01-26T18:01:36.099-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Yes, that's right quote refers to uses to ' as we ...") (post-content "Yes, that's right quote refers to uses to ' as we all (quote ...)") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2026851843466892876/comments/default/4237387628378440482") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2026851843466892876/comments/default/4237387628378440482") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/09/how-many-occurrences-of-car-in-plt.html?showComment=1201388460000#c4237387628378440482") (rel "alternate") (title "") (type "text/html"))) (author (name "Robby") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//people.cs.uchicago.edu/~robby/portrait-2006.jpg") (width "13")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/09/how-many-occurrences-of-car-in-plt.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2026851843466892876") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2026851843466892876") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1090470180"))) (gd:extendedProperty ((name "blogger.displayTime") (value "January 26, 2008 at 6:01 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8726167489677370314") (published "2008-01-26T19:41:00.000-05:00") (updated "2008-01-26T19:41:28.206-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "The conversion of my code took less than a day (ab...") (post-content "The conversion of my code took less than a day (about 10000 lines, a guess, for I never counted the nr of lines) There are two types of instances in which I used set-cdr!: for assoclists and imperative queues. Assoclists now have become immutable lists of mutable pairs with a hybrid-assq procedure added. The imperative queues remain mutable lists, the cdr of the last pair being the only one being updated. My code did not contain anything like append! or reverse!. I found no trouble in swithing to v3.99.0.9. I say yes to the better conditions for optimization." (br) "Jos Koot") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/8726167489677370314") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/8726167489677370314") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html?showComment=1201394460000#c8726167489677370314") (rel "alternate") (title "") (type "text/html"))) (author (name "jos koot") (uri "https://www.blogger.com/profile/15016475158264198208") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1842888151218385802") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1842888151218385802") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-130617223"))) (gd:extendedProperty ((name "blogger.displayTime") (value "January 26, 2008 at 7:41 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5921936266382113386") (published "2008-01-26T19:59:00.000-05:00") (updated "2008-01-26T19:59:19.429-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Eli, you seem forget that all Scheme fits into tin...") (post-content "Eli, you seem forget that all Scheme fits into tiny corner of ML, namely a single recursive datatype.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/5921936266382113386") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/5921936266382113386") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html?showComment=1201395540000#c5921936266382113386") (rel "alternate") (title "") (type "text/html"))) (author (name "Existential Type") (uri "https://www.blogger.com/profile/05595505123938492280") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1842888151218385802") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1842888151218385802") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-89490487"))) (gd:extendedProperty ((name "blogger.displayTime") (value "January 26, 2008 at 7:59 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2138977282522777986") (published "2008-01-26T21:30:00.000-05:00") (updated "2008-01-26T21:30:37.134-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Eli, I agree with you about the pointlessness of a...") (post-content "Eli, I agree with you about the pointlessness of an ML-vs-Scheme flame war.  Can you be more explicit about what you mean by \"type reflection\"?  That sounds interesting, but I have no idea what you're talking about.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/2138977282522777986") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/2138977282522777986") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html?showComment=1201401000000#c2138977282522777986") (rel "alternate") (title "") (type "text/html"))) (author (name "Michael") (uri "https://www.blogger.com/profile/00221993641853949677") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1842888151218385802") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1842888151218385802") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1662577972"))) (gd:extendedProperty ((name "blogger.displayTime") (value "January 26, 2008 at 9:30 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6423295391076542126") (published "2008-01-26T22:05:00.000-05:00") (updated "2008-01-26T22:05:33.663-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Existential Type: From this side of the fence I ca...") (post-content "Existential Type: From this side of the fence I can say that Scheme covers all of ML, with all types that were and will be written.  But this is a second pointless flame, and still irrelevant to the context.  I could just as well point at the many limitations of ML types (eg, what's the " (i "real") " type of map? sqrt? printf? collatz? GetFunction(\"foo\",\"bar.dll\")?).  But that's not going to do any good, so I'll stop replying.  Feel free to continue on the PLT list, or email me." (br) (br) "Michael: I'm talking about several efforts that attempt to get the benefits of a dynamic language into a static language like ML.  There was some work done on reflecting types (or reifying types) which makes it possible to sort of package a value together with a type object (in the run-time sense; it becomes a value).  IIRC, there was also something related to universal types that goes in the same direction." (br) (br) "Personally, I found that MLers who blindly bash Scheme for it's lack of types are just as bad as Schemers who blindly bash all static typing.  IMO (and in the opinion of many other good people I've talked to) there are very good advantages on both sides -- and the " (b "real") " challenge is to get dynamic languages like Scheme to benefit from the advantages of statically typed languages like ML, " (b "and") " vice versa.  Some people choose to work on just that (from either side), some people don't but appreciate those who do, and some people will inevitably continue to spit out useless comments even in a completely unrelated context, like the above anonymous poster.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/6423295391076542126") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/6423295391076542126") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html?showComment=1201403100000#c6423295391076542126") (rel "alternate") (title "") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.barzilay.org/images/eli1.jpg") (width "28")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1842888151218385802") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1842888151218385802") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-311455247"))) (gd:extendedProperty ((name "blogger.displayTime") (value "January 26, 2008 at 10:05 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8751223865351229888") (published "2008-01-30T00:40:00.000-05:00") (updated "2008-01-30T00:40:48.685-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Matthias, sorry to be commenting on such an old bl...") (post-content "Matthias, sorry to be commenting on such an old blog post ;-)" (br) (br) "This is a pretty cool example, but I think it would be clearer if the internal defines were desugared into a letrec.  It's very odd to see a function definition mutated from inside the function in the first place, but somehow it seems more natural in a letrec.  More importantly (for me at least), is that I can understand right away what the continuation of the letrec would be, but it's not at all obvious with the internal define -- it looks as though the continuation of the (define (generator) ...) code would continue by defining control-state again.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2698032372224392708/comments/default/8751223865351229888") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2698032372224392708/comments/default/8751223865351229888") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/07/callcc-and-self-modifying-code.html?showComment=1201671600000#c8751223865351229888") (rel "alternate") (title "") (type "text/html"))) (author (name "Michael") (uri "https://www.blogger.com/profile/00221993641853949677") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/07/callcc-and-self-modifying-code.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2698032372224392708") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2698032372224392708") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1662577972"))) (gd:extendedProperty ((name "blogger.displayTime") (value "January 30, 2008 at 12:40 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5227314451345068360") (published "2008-02-04T08:20:00.000-05:00") (updated "2008-02-04T08:20:18.535-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Hi..." "<" "br" ">" "<" "br" ">" "Any chance we could have that cute li...") (post-content "Hi..." (br) (br) "Any chance we could have that cute little embedded test case back in DrScheme? I use it heavily for practice pieces and small projects." (br) (br) "I'm stuck on version 352 until then." (br) (br) "yours, Marcus") (link ((href "https://www.blogger.com/feeds/2080885971644496896/21355758042095400/comments/default/5227314451345068360") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/21355758042095400/comments/default/5227314451345068360") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/12/plt-scheme-v372.html?showComment=1202131200000#c5227314451345068360") (rel "alternate") (title "") (type "text/html"))) (author (name "Marcus Baker") (uri "https://www.blogger.com/profile/02241295287582460014") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/12/plt-scheme-v372.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-21355758042095400") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/21355758042095400") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-156100676"))) (gd:extendedProperty ((name "blogger.displayTime") (value "February 4, 2008 at 8:20 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8846465339239262297") (published "2008-02-04T10:55:00.000-05:00") (updated "2008-02-04T10:55:56.862-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "We have switched to a teachpack for student tests;...") (post-content "We have switched to a teachpack for student tests; see the mailing list archives for more details.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/21355758042095400/comments/default/8846465339239262297") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/21355758042095400/comments/default/8846465339239262297") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/12/plt-scheme-v372.html?showComment=1202140500000#c8846465339239262297") (rel "alternate") (title "") (type "text/html"))) (author (name "Eli") (uri "https://www.blogger.com/profile/02119543756660164304") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/12/plt-scheme-v372.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-21355758042095400") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/21355758042095400") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-597056409"))) (gd:extendedProperty ((name "blogger.displayTime") (value "February 4, 2008 at 10:55 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8895905631024852314") (published "2008-02-22T05:41:00.000-05:00") (updated "2008-02-22T05:41:58.007-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Salting and hashing ids was a thought I had too.  ...") (post-content "Salting and hashing ids was a thought I had too.  But I think the " (a ((href "http://www.cs.brown.edu/~sk/Publications/Papers/Published/khmgpf-impl-use-plt-web-server-journal/") (rel "nofollow")) "paper") "'s Continue web server has control flow constructs and error recovery capabilities built-in that would have to be added to other web-based approaches.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3376141267131043957/comments/default/8895905631024852314") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3376141267131043957/comments/default/8895905631024852314") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/01/privacy-flaw-thwarted.html?showComment=1203676860000#c8895905631024852314") (rel "alternate") (title "") (type "text/html"))) (author (name "Geoff Knauth") (uri "https://www.blogger.com/profile/12025560607512616605") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//knauth.org/gsk/images/gsk-pa2000-48x48.jpg") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/01/privacy-flaw-thwarted.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3376141267131043957") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3376141267131043957") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1692477807"))) (gd:extendedProperty ((name "blogger.displayTime") (value "February 22, 2008 at 5:41 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3986862598206328151") (published "2008-02-23T11:20:00.000-05:00") (updated "2008-02-23T11:20:57.606-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text"))) (post-content "This comment has been removed by the author.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/903780350920969233/comments/default/3986862598206328151") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/903780350920969233/comments/default/3986862598206328151") (rel "self") (type "application/atom+xml"))) (author (name "lily") (uri "https://www.blogger.com/profile/06808354797289490434") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/02/dirty-looking-hygiene.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-903780350920969233") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/903780350920969233") (type "text/html"))) (gd:extendedProperty ((name "blogger.contentRemoved") (value "true"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-194632724"))) (gd:extendedProperty ((name "blogger.displayTime") (value "February 23, 2008 at 11:20 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1851530434787103041") (published "2008-04-03T07:19:00.000-04:00") (updated "2008-04-03T07:19:04.111-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "This is cute; it took me a minute to understand wh...") (post-content "This is cute; it took me a minute to understand what was going on.   On the other hand,  a few years ago I would have been scratching my head for hours." (br) (br) "One complaint though:  this code holds onto a return continuation longer than necessary, introducing the possibility of memory leaks and/or poor GC performance." (br) (br) "Is there some kind of generic technique for destroying a reference to a continuation \"on the way out\" as you call it?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2698032372224392708/comments/default/1851530434787103041") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2698032372224392708/comments/default/1851530434787103041") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/07/callcc-and-self-modifying-code.html?showComment=1207221540000#c1851530434787103041") (rel "alternate") (title "") (type "text/html"))) (author (name "Leon Smith") (uri "https://www.blogger.com/profile/06462854866941248768") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/07/callcc-and-self-modifying-code.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2698032372224392708") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2698032372224392708") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1146998807"))) (gd:extendedProperty ((name "blogger.displayTime") (value "April 3, 2008 at 7:19 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3767233489980653065") (published "2008-04-28T19:38:00.000-04:00") (updated "2008-04-28T19:38:24.536-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "The specification atop the macro reminds me of the...") (post-content "The specification atop the macro reminds me of the quip that \"any sufficiently well-commented lisp program contains an ML program in its comments\" (:") (link ((href "https://www.blogger.com/feeds/2080885971644496896/903780350920969233/comments/default/3767233489980653065") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/903780350920969233/comments/default/3767233489980653065") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/02/dirty-looking-hygiene.html?showComment=1209425880000#c3767233489980653065") (rel "alternate") (title "") (type "text/html"))) (author (name "Martin DeMello") (uri "https://www.blogger.com/profile/13347537989431523652") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/02/dirty-looking-hygiene.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-903780350920969233") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/903780350920969233") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1889279495"))) (gd:extendedProperty ((name "blogger.displayTime") (value "April 28, 2008 at 7:38 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3139353118755461226") (published "2008-04-29T05:35:00.000-04:00") (updated "2008-04-29T05:35:21.144-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "It's a shame that there is so little communication...") (post-content "It's a shame that there is so little communication between the Scheme and the Common Lisp communities. We could learn a lot from each other, and it is important to realize that this holds for both directions. I am glad that Christian Queinnec, Manuel Serrano and especially Michael Sperber were present at this year's International Lisp Conference (mostly attended by Common Lispers), and hope that this has a positive effective in that regard in the long run.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/7201123380885059455/comments/default/3139353118755461226") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/7201123380885059455/comments/default/3139353118755461226") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/06/small-is-beautiful-large-is-useful-and.html?showComment=1209461700000#c3139353118755461226") (rel "alternate") (title "") (type "text/html"))) (author (name "kuril") (uri "https://www.blogger.com/profile/06633729405044267442") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/06/small-is-beautiful-large-is-useful-and.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-7201123380885059455") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/7201123380885059455") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-2079332911"))) (gd:extendedProperty ((name "blogger.displayTime") (value "April 29, 2008 at 5:35 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-663383812983281447") (published "2008-06-04T10:11:00.000-04:00") (updated "2008-06-04T10:11:59.682-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Outstanding, I can hardly wait!" "<" "br" ">" "<" "br" ">" "JT" "<" "br" ">" "http:...") (post-content "Outstanding, I can hardly wait!" (br) (br) "JT" (br) "http://www.FireMe.To/Udi") (link ((href "https://www.blogger.com/feeds/2080885971644496896/266784924007072869/comments/default/663383812983281447") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/266784924007072869/comments/default/663383812983281447") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-40-is-coming-soon.html?showComment=1212588660000#c663383812983281447") (rel "alternate") (title "") (type "text/html"))) (author (name "Brad") (uri "https://www.blogger.com/profile/14589063566336014785") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-40-is-coming-soon.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-266784924007072869") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/266784924007072869") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-64121598"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 4, 2008 at 10:11 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6587729510116568460") (published "2008-06-04T10:49:00.000-04:00") (updated "2008-06-04T10:49:49.666-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I want it _now_!") (post-content "I want it _now_!") (link ((href "https://www.blogger.com/feeds/2080885971644496896/266784924007072869/comments/default/6587729510116568460") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/266784924007072869/comments/default/6587729510116568460") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-40-is-coming-soon.html?showComment=1212590940000#c6587729510116568460") (rel "alternate") (title "") (type "text/html"))) (author (name "Daniel") (uri "https://www.blogger.com/profile/12337296671553480365") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-40-is-coming-soon.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-266784924007072869") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/266784924007072869") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-59378103"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 4, 2008 at 10:49 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5067193337977678426") (published "2008-06-04T11:52:00.000-04:00") (updated "2008-06-04T11:52:17.259-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "daniel: the best I can do for now is point you to ...") (post-content "daniel: the best I can do for now is point you to the pre-releases builds online. But it should be soon!" (br) (br) "http://pre.plt-scheme.org/installers/") (link ((href "https://www.blogger.com/feeds/2080885971644496896/266784924007072869/comments/default/5067193337977678426") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/266784924007072869/comments/default/5067193337977678426") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-40-is-coming-soon.html?showComment=1212594720000#c5067193337977678426") (rel "alternate") (title "") (type "text/html"))) (author (name "Robby") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//people.cs.uchicago.edu/~robby/portrait-2006.jpg") (width "13")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-40-is-coming-soon.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-266784924007072869") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/266784924007072869") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1090470180"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 4, 2008 at 11:52 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6335688528950768958") (published "2008-06-04T11:53:00.000-04:00") (updated "2008-06-04T11:53:28.277-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Very exciting!  The new documentation especially h...") (post-content "Very exciting!  The new documentation especially helped me get started with PLT Scheme." (br) (br) "Thank you!") (link ((href "https://www.blogger.com/feeds/2080885971644496896/266784924007072869/comments/default/6335688528950768958") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/266784924007072869/comments/default/6335688528950768958") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-40-is-coming-soon.html?showComment=1212594780000#c6335688528950768958") (rel "alternate") (title "") (type "text/html"))) (author (name "David Vanderson") (uri "https://www.blogger.com/profile/00334549959328743800") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-40-is-coming-soon.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-266784924007072869") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/266784924007072869") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-968886218"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 4, 2008 at 11:53 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3121452435262585883") (published "2008-06-04T11:53:00.001-04:00") (updated "2008-06-04T11:53:58.181-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Congrats, all!  The re-emergence of Scheme in prog...") (post-content "Congrats, all!  The re-emergence of Scheme in programming courses is in large part thanks to your efforts.  Thank you!") (link ((href "https://www.blogger.com/feeds/2080885971644496896/266784924007072869/comments/default/3121452435262585883") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/266784924007072869/comments/default/3121452435262585883") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-40-is-coming-soon.html?showComment=1212594780001#c3121452435262585883") (rel "alternate") (title "") (type "text/html"))) (author (name "Duane Johnson") (uri "https://www.blogger.com/profile/05018718028789144349") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-40-is-coming-soon.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-266784924007072869") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/266784924007072869") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-2142533674"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 4, 2008 at 11:53 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4798777171968535929") (published "2008-06-04T17:00:00.000-04:00") (updated "2008-06-04T17:00:55.218-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Thanks, " "<" "br" ">" "<" "br" ">" "I was waiting for something fresh,...") (post-content "Thanks, " (br) (br) "I was waiting for something fresh, I've found it.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/266784924007072869/comments/default/4798777171968535929") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/266784924007072869/comments/default/4798777171968535929") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-40-is-coming-soon.html?showComment=1212613200000#c4798777171968535929") (rel "alternate") (title "") (type "text/html"))) (author (name "kib") (uri "https://www.blogger.com/profile/02475335739134506765") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-40-is-coming-soon.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-266784924007072869") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/266784924007072869") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-2105691947"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 4, 2008 at 5:00 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3915307416683197074") (published "2008-06-07T05:24:00.000-04:00") (updated "2008-06-07T05:24:27.494-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "In a better quality: http://www.youtube.com/watch?...") (post-content "In a better quality: http://www.youtube.com/watch?v=vgQO_kHl39g" "&fmt" "=18" (br) (br) "Now you can read the examples a bit better.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/6087611645085889801/comments/default/3915307416683197074") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/6087611645085889801/comments/default/3915307416683197074") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/06/tour-in-video.html?showComment=1212830640000#c3915307416683197074") (rel "alternate") (title "") (type "text/html"))) (author (name "stesch") (uri "https://www.blogger.com/profile/17316232031835503449") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/06/tour-in-video.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-6087611645085889801") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/6087611645085889801") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-68348382"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 7, 2008 at 5:24 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4090822787176610400") (published "2008-06-08T00:08:00.000-04:00") (updated "2008-06-08T00:08:25.794-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I already find DrScheme good enough for my needs. ...") (post-content "I already find DrScheme good enough for my needs. All that I wish to see is a good tutorial (like the one the Python guys have put together)." (br) (br) "The lack of a good \"official\" tutorial, coupled with the difficulty one encounters reading online versions of printed books (SICP), is keeping me from using Scheme as a primary development language (I'm a hobbyist programmer, and barely have enough resources to buy books etc.)") (link ((href "https://www.blogger.com/feeds/2080885971644496896/266784924007072869/comments/default/4090822787176610400") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/266784924007072869/comments/default/4090822787176610400") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-40-is-coming-soon.html?showComment=1212898080000#c4090822787176610400") (rel "alternate") (title "") (type "text/html"))) (author (name "General Maximus") (uri "https://www.blogger.com/profile/07444690683921609039") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-40-is-coming-soon.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-266784924007072869") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/266784924007072869") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1016114705"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 8, 2008 at 12:08 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8898616587966684953") (published "2008-06-08T00:13:00.000-04:00") (updated "2008-06-08T00:13:46.700-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "General Maximus: have you had a change to look at ...") (post-content "General Maximus: have you had a change to look at the v4.0 tutorials yet? They're at the link in the post (and soon will be on the main website).") (link ((href "https://www.blogger.com/feeds/2080885971644496896/266784924007072869/comments/default/8898616587966684953") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/266784924007072869/comments/default/8898616587966684953") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-40-is-coming-soon.html?showComment=1212898380000#c8898616587966684953") (rel "alternate") (title "") (type "text/html"))) (author (name "Robby") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//people.cs.uchicago.edu/~robby/portrait-2006.jpg") (width "13")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-40-is-coming-soon.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-266784924007072869") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/266784924007072869") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1090470180"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 8, 2008 at 12:13 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7313319028377620906") (published "2008-06-08T07:30:00.000-04:00") (updated "2008-06-08T07:30:31.303-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "You mean this one, right? :" "<" "br" ">" "http://pre.plt-sche...") (post-content "You mean this one, right? :" (br) "http://pre.plt-scheme.org/docs/html/guide/index.html" (br) (br) "I didn't look at it before. Looks pretty nice. Since I don't know much about Scheme, can you tell me how it is as an introductory tutorial?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/266784924007072869/comments/default/7313319028377620906") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/266784924007072869/comments/default/7313319028377620906") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-40-is-coming-soon.html?showComment=1212924600000#c7313319028377620906") (rel "alternate") (title "") (type "text/html"))) (author (name "General Maximus") (uri "https://www.blogger.com/profile/07444690683921609039") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-40-is-coming-soon.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-266784924007072869") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/266784924007072869") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1016114705"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 8, 2008 at 7:30 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-9128575741288309734") (published "2008-06-08T07:35:00.000-04:00") (updated "2008-06-08T07:35:19.767-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "That one is the one that covers the most ground an...") (post-content "That one is the one that covers the most ground and definitely should be useful, but if you're new to Scheme I would start with the two much shorter tutorials (below) and move to that one as you need more specific information for some particular task." (br) (br) "http://pre.plt-scheme.org/docs/html/quick/" (br) (br) "http://pre.plt-scheme.org/docs/html/more/") (link ((href "https://www.blogger.com/feeds/2080885971644496896/266784924007072869/comments/default/9128575741288309734") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/266784924007072869/comments/default/9128575741288309734") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-40-is-coming-soon.html?showComment=1212924900000#c9128575741288309734") (rel "alternate") (title "") (type "text/html"))) (author (name "Robby") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//people.cs.uchicago.edu/~robby/portrait-2006.jpg") (width "13")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-40-is-coming-soon.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-266784924007072869") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/266784924007072869") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1090470180"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 8, 2008 at 7:35 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2553240668967099936") (published "2008-06-08T13:22:00.000-04:00") (updated "2008-06-08T13:22:37.324-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I only see the 3.99.0.26 pre-release up on http://...") (post-content "I only see the 3.99.0.26 pre-release up on http://pre.plt-scheme.org/installers/." (br) (br) "Are the 4.0 pre-releases up somewhere?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/266784924007072869/comments/default/2553240668967099936") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/266784924007072869/comments/default/2553240668967099936") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-40-is-coming-soon.html?showComment=1212945720000#c2553240668967099936") (rel "alternate") (title "") (type "text/html"))) (author (name "databus") (uri "https://www.blogger.com/profile/18202202148784959297") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-40-is-coming-soon.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-266784924007072869") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/266784924007072869") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-734160684"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 8, 2008 at 1:22 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5035071181322091610") (published "2008-06-08T15:08:00.000-04:00") (updated "2008-06-08T15:08:30.718-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "3.99.x is the pre-release for 4.0.") (post-content "3.99.x is the pre-release for 4.0.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/266784924007072869/comments/default/5035071181322091610") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/266784924007072869/comments/default/5035071181322091610") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-40-is-coming-soon.html?showComment=1212952080000#c5035071181322091610") (rel "alternate") (title "") (type "text/html"))) (author (name "Robby") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//people.cs.uchicago.edu/~robby/portrait-2006.jpg") (width "13")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-40-is-coming-soon.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-266784924007072869") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/266784924007072869") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1090470180"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 8, 2008 at 3:08 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2036023595278533491") (published "2008-06-08T15:48:00.000-04:00") (updated "2008-06-08T15:48:48.446-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Great, thanks Robby.") (post-content "Great, thanks Robby.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/266784924007072869/comments/default/2036023595278533491") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/266784924007072869/comments/default/2036023595278533491") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-40-is-coming-soon.html?showComment=1212954480000#c2036023595278533491") (rel "alternate") (title "") (type "text/html"))) (author (name "databus") (uri "https://www.blogger.com/profile/18202202148784959297") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-40-is-coming-soon.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-266784924007072869") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/266784924007072869") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-734160684"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 8, 2008 at 3:48 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5703029797312021145") (published "2008-06-12T10:12:00.000-04:00") (updated "2008-06-12T10:12:13.447-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I just downloaded PLT Scheme 4.0, and I haven't us...") (post-content "I just downloaded PLT Scheme 4.0, and I haven't used Scheme in a long time.  Was a long time CL user.  How do I set the language to be the complete scheme language with R6RS?  I tried the documentation online and asking in IRC, but no dice.  Any suggestions?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/4036024601885652110/comments/default/5703029797312021145") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/4036024601885652110/comments/default/5703029797312021145") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-4.html?showComment=1213279920000#c5703029797312021145") (rel "alternate") (title "") (type "text/html"))) (author (name "Eric") (uri "https://www.blogger.com/profile/06780925337376142176") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-4.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-4036024601885652110") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/4036024601885652110") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-360120983"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 12, 2008 at 10:12 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2584202517405190028") (published "2008-06-12T10:40:00.000-04:00") (updated "2008-06-12T10:40:58.672-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Use the module language and put " "<" "br" ">" "<" "br" ">" "  #!r6rs" "<" "b...") (post-content "Use the module language and put " (br) (br) "  #!r6rs" (br) (br) "as the first line in your file." (br) (br) "(Or, with that line, you can use mzscheme from the commandline too, ie \"mzscheme file.ss\")") (link ((href "https://www.blogger.com/feeds/2080885971644496896/4036024601885652110/comments/default/2584202517405190028") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/4036024601885652110/comments/default/2584202517405190028") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-4.html?showComment=1213281600000#c2584202517405190028") (rel "alternate") (title "") (type "text/html"))) (author (name "Robby") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//people.cs.uchicago.edu/~robby/portrait-2006.jpg") (width "13")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-4.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-4036024601885652110") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/4036024601885652110") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1090470180"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 12, 2008 at 10:40 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4077876372560250352") (published "2008-06-12T10:59:00.000-04:00") (updated "2008-06-12T10:59:54.887-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I chose Module, clicked Run and then put #!r6rs at...") (post-content "I chose Module, clicked Run and then put #!r6rs at the REPL, didn't like it.  So I put #!r6rs in the definitions area (above the repl).  Then followed it by a factorial function.  It doesn't complain about the #!r6rs anymore, but now it complains about \"expected an import declaration\".  If I choose Pretty Big or R5RS, everything is hunky doory.  Why can't there just be a R6RS mode?" (br) (br) "I guess I better read up on this 'module' language.  I really just wanted to try this out.  I must be missing something.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/4036024601885652110/comments/default/4077876372560250352") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/4036024601885652110/comments/default/4077876372560250352") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-4.html?showComment=1213282740000#c4077876372560250352") (rel "alternate") (title "") (type "text/html"))) (author (name "Eric") (uri "https://www.blogger.com/profile/06780925337376142176") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-4.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-4036024601885652110") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/4036024601885652110") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-360120983"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 12, 2008 at 10:59 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6548102618473604352") (published "2008-06-12T11:23:00.000-04:00") (updated "2008-06-12T11:23:51.858-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Isn't your question about r6rs rather than module?...") (post-content "Isn't your question about r6rs rather than module?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/4036024601885652110/comments/default/6548102618473604352") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/4036024601885652110/comments/default/6548102618473604352") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-4.html?showComment=1213284180000#c6548102618473604352") (rel "alternate") (title "") (type "text/html"))) (author (name "matthias") (uri "https://www.blogger.com/profile/00000181081270224360") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.ccs.neu.edu/home/matthias/Images/felleisen1.jpg") (width "23")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-4.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-4036024601885652110") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/4036024601885652110") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-56163577"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 12, 2008 at 11:23 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5721898989009658802") (published "2008-06-12T11:26:00.000-04:00") (updated "2008-06-12T11:26:54.396-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "All I want is to start up PLT Scheme and be able t...") (post-content "All I want is to start up PLT Scheme and be able to write code which conforms to R6RS.  Nothing else.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/4036024601885652110/comments/default/5721898989009658802") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/4036024601885652110/comments/default/5721898989009658802") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-4.html?showComment=1213284360000#c5721898989009658802") (rel "alternate") (title "") (type "text/html"))) (author (name "Eric") (uri "https://www.blogger.com/profile/06780925337376142176") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-4.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-4036024601885652110") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/4036024601885652110") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-360120983"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 12, 2008 at 11:26 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6097393049232608142") (published "2008-06-12T11:41:00.000-04:00") (updated "2008-06-12T11:41:09.229-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Code that conforms to R6RS starts with `(import .....") (post-content "Code that conforms to R6RS starts with `(import ...)' at a minimum. Your other alternative is to start with `(library ... (export ...) (import ...) ...)'." (br) (br) "To run R6RS programs/libraries in DrScheme, you also have to start with `#!r6rs', even though R6RS itself doesn't require that. Yes, in the Module language. Experience so far has convinced us that it's better to declare a program's language in the source, instead of having a zillion language choices in a GUI dialog; that's why we've avoided adding an \"R6RS\" option in DrScheme's langauge dialog (and why we've removed several PLT-specific options at the same time)." (br) (br) "Meanwhile, maybe you can help us improve the documentation. Using the online docs, I would have guessed that you'd go to http://docs.plt-scheme.org/, follow the \"R6RS\" link, and then read the first chapter on running R6RS programs. Can you tell us more about the path you took and how it failed you?" (br) (br) "Thanks!") (link ((href "https://www.blogger.com/feeds/2080885971644496896/4036024601885652110/comments/default/6097393049232608142") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/4036024601885652110/comments/default/6097393049232608142") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-4.html?showComment=1213285260000#c6097393049232608142") (rel "alternate") (title "") (type "text/html"))) (author (name "Matthew Flatt") (uri "https://www.blogger.com/profile/03369511886823036667") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-4.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-4036024601885652110") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/4036024601885652110") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1300564163"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 12, 2008 at 11:41 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1793938491700555887") (published "2008-06-12T12:00:00.000-04:00") (updated "2008-06-12T12:00:56.064-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "RE: \"Meanwhile, maybe you can help us improve the ...") (post-content "RE: \"Meanwhile, maybe you can help us improve the documentation. Using the online docs, I would have guessed that you'd go to http://docs.plt-scheme.org/, follow the \"R6RS\" link, and then read the first chapter on running R6RS programs. Can you tell us more about the path you took and how it failed you?\"" (br) (br) "-----------------------------" (br) (br) "There was no real method to my madness.  I fired up PLT Scheme.  I saw no language was selected.  I haven't used  scheme in a long time, but when I did I would usually just select R5RS or Pretty Big and then just start coding.  So, I thought I would go and do the same thing, except now that R6RS is implemented, I might was well switch to that by default.  So I went to select a language.  I didn't see R6RS.  So I read all the descriptions of the others, none of which really means anything to me.  The small blurb at the bottom doesn't really say enough to convey the differences.  All I knew is that I wanted R6RS.  I couldn't find it or make heads or tails of any of it, so I decided to go to plt-scheme website and look at docs.  On the docs page I did a search for 'language'.  As I was looking for documentation on the differences of the particular languages.  I saw the R6RS link but I thought that was a spec, or description of the language itself.  I was just interested in how to get the language setup so I could work in PLT Scheme.  (ie. I was viewing that as the first step before I would read in detail about R6RS).  So failing to find anything there, my next step was to google it, which of course comes up with overwhelming results which I scanned a few and then stopped and asked on this blog.  And so here we stand." (br) (br) "Basically I was just looking for a quick canvas to 'go'.  I just wanted to try it, I didn't really want to think about it. (never had to before, so maybe thats why)") (link ((href "https://www.blogger.com/feeds/2080885971644496896/4036024601885652110/comments/default/1793938491700555887") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/4036024601885652110/comments/default/1793938491700555887") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-4.html?showComment=1213286400000#c1793938491700555887") (rel "alternate") (title "") (type "text/html"))) (author (name "Eric") (uri "https://www.blogger.com/profile/06780925337376142176") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-4.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-4036024601885652110") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/4036024601885652110") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-360120983"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 12, 2008 at 12:00 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-852437310728348576") (published "2008-06-12T12:11:00.000-04:00") (updated "2008-06-12T12:11:53.466-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "What about having an R6RS option and just dumping ...") (post-content "What about having an R6RS option and just dumping the \"#!r6rs (import (rnrs)) ;put code here\" directly into the definition pane when its selected.  You could even follow it with a modal window explaining that with r6rs, you must precede all files with this syntax blah blah and have a \"do not show again\" checkbox.  Even have a link to the online documentation for more details.  I would have figured that out pretty quick :).") (link ((href "https://www.blogger.com/feeds/2080885971644496896/4036024601885652110/comments/default/852437310728348576") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/4036024601885652110/comments/default/852437310728348576") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-4.html?showComment=1213287060000#c852437310728348576") (rel "alternate") (title "") (type "text/html"))) (author (name "Eric") (uri "https://www.blogger.com/profile/06780925337376142176") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-4.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-4036024601885652110") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/4036024601885652110") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-360120983"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 12, 2008 at 12:11 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-9109629427714026670") (published "2008-06-12T13:40:00.000-04:00") (updated "2008-06-12T13:40:01.296-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "That's an interesting idea. It sounds similar to t...") (post-content "That's an interesting idea. It sounds similar to the way that Visual Studio or XCode will create a project based on a template --- except that instead of a pile of project settings, DrScheme would just give you a few starting lines of text.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/4036024601885652110/comments/default/9109629427714026670") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/4036024601885652110/comments/default/9109629427714026670") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-4.html?showComment=1213292400000#c9109629427714026670") (rel "alternate") (title "") (type "text/html"))) (author (name "Matthew Flatt") (uri "https://www.blogger.com/profile/03369511886823036667") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-4.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-4036024601885652110") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/4036024601885652110") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1300564163"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 12, 2008 at 1:40 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2930610528196972456") (published "2008-06-12T14:23:00.000-04:00") (updated "2008-06-12T14:23:43.307-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Horay!  Thanks so much to everyone working on PLT ...") (post-content "Horay!  Thanks so much to everyone working on PLT Scheme.  I'm really enjoying it." (br) (br) "I especially enjoy the amazing support and patience from PLT members." (br) (br) "I like the new plt-scheme.org look as well.  I think it's much simpler to navigate." (br) (br) "Again, thank you!") (link ((href "https://www.blogger.com/feeds/2080885971644496896/4036024601885652110/comments/default/2930610528196972456") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/4036024601885652110/comments/default/2930610528196972456") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-4.html?showComment=1213294980000#c2930610528196972456") (rel "alternate") (title "") (type "text/html"))) (author (name "David Vanderson") (uri "https://www.blogger.com/profile/00334549959328743800") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-4.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-4036024601885652110") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/4036024601885652110") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-968886218"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 12, 2008 at 2:23 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4496586410062169881") (published "2008-06-13T18:28:00.000-04:00") (updated "2008-06-13T18:28:05.259-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "i love it so far, but.." "<" "br" ">" "<" "br" ">" "and you've probably...") (post-content "i love it so far, but.." (br) (br) "and you've probably heard this a lot before..." (br) (br) (br) "... when are we going to see a plt sql database abstraction for recent plt-schemes?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/4036024601885652110/comments/default/4496586410062169881") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/4036024601885652110/comments/default/4496586410062169881") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-4.html?showComment=1213396080000#c4496586410062169881") (rel "alternate") (title "") (type "text/html"))) (author (name "Jon Philpott") (uri "https://www.blogger.com/profile/03555202233315573257") (email "noreply@blogger.com") (gd:image ((height "21") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//photos1.blogger.com/blogger/5072/3186/1600/wedding.jpg") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-4.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-4036024601885652110") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/4036024601885652110") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1462209304"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 13, 2008 at 6:28 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6462037210477359570") (published "2008-06-19T17:15:00.000-04:00") (updated "2008-06-19T17:15:12.602-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "man, this is great. plt definitely rocks!") (post-content "man, this is great. plt definitely rocks!") (link ((href "https://www.blogger.com/feeds/2080885971644496896/4036024601885652110/comments/default/6462037210477359570") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/4036024601885652110/comments/default/6462037210477359570") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-4.html?showComment=1213910100000#c6462037210477359570") (rel "alternate") (title "") (type "text/html"))) (author (name "bolognese") (uri "https://www.blogger.com/profile/03822445644287782610") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-4.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-4036024601885652110") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/4036024601885652110") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1906158238"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 19, 2008 at 5:15 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-9051157646791227199") (published "2008-06-23T12:02:00.000-04:00") (updated "2008-06-23T12:02:58.457-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "If you are a user of  the " "<" "b" ">" "world.ss" "<" "/b" ">" ", its int...") (post-content "If you are a user of  the " (b "world.ss") ", its interface has changed: " (br) (br) "-- " (b "end-of-time") " has been removed" (br) (br) "++ " (b "(stop-when last-world?)") " has been added") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2394879006392807599/comments/default/9051157646791227199") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2394879006392807599/comments/default/9051157646791227199") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/06/plt-scheme-v401.html?showComment=1214236920000#c9051157646791227199") (rel "alternate") (title "") (type "text/html"))) (author (name "matthias") (uri "https://www.blogger.com/profile/00000181081270224360") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.ccs.neu.edu/home/matthias/Images/felleisen1.jpg") (width "23")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/06/plt-scheme-v401.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2394879006392807599") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2394879006392807599") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-56163577"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 23, 2008 at 12:02 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3120226282552805395") (published "2008-06-24T06:42:00.000-04:00") (updated "2008-06-24T06:42:25.574-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Don't you just love it when language maintainers d...") (post-content "Don't you just love it when language maintainers drop a feature because someone, somewhere, might misuse it?" (br) (br) "What's next? Dropping the number zero, because it can cause a divide-by-zero error? " (br) (br) "I'm de-installing PLT today and switching to an implementation which doesn't think I'm an idiot.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/3120226282552805395") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/3120226282552805395") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html?showComment=1214304120000#c3120226282552805395") (rel "alternate") (title "") (type "text/html"))) (author (name "T.") (uri "https://www.blogger.com/profile/06234046154576035909") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1842888151218385802") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1842888151218385802") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1581392073"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 24, 2008 at 6:42 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8916174256639447592") (published "2008-06-24T10:51:00.000-04:00") (updated "2008-06-24T10:51:46.513-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "T: In fact, *most* modern languages" "<" "br" ">" "dropped the...") (post-content "T: In fact, *most* modern languages" (br) "dropped the number zero as a" (br) "pointer.  Most languages also" (br) "restrict you from using a ton of" (br) "other features, so which" (br) "implementation are you going to" (br) "install: C? assembler? maybe" (br) "you'll get a soldering iron?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/8916174256639447592") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/8916174256639447592") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html?showComment=1214319060000#c8916174256639447592") (rel "alternate") (title "") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.barzilay.org/images/eli1.jpg") (width "28")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1842888151218385802") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1842888151218385802") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-311455247"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 24, 2008 at 10:51 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4165866064900636153") (published "2008-06-24T22:03:00.000-04:00") (updated "2008-06-24T22:03:17.323-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "T: You " "<" "b" ">" "do" "<" "/b" ">" " realize, don't you, that set-car!...") (post-content "T: You " (b "do") " realize, don't you, that set-car! and set-cdr! are still available in PLT Scheme 4.0, only as a library instead of as a built-in feature?  Given that, I don't see what you are so upset about.  You're free to use set-car! and set-cdr! as much as you want.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/4165866064900636153") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/4165866064900636153") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html?showComment=1214359380000#c4165866064900636153") (rel "alternate") (title "") (type "text/html"))) (author (name "Michael Vanier") (uri "https://www.blogger.com/profile/00221993641853949677") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1842888151218385802") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1842888151218385802") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1662577972"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 24, 2008 at 10:03 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2536024295641292874") (published "2008-06-29T13:54:00.000-04:00") (updated "2008-11-11T18:51:22.220-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text"))) (post-content "This comment has been removed by the author.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/4036024601885652110/comments/default/2536024295641292874") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/4036024601885652110/comments/default/2536024295641292874") (rel "self") (type "application/atom+xml"))) (author (name "hyperlogic") (uri "https://www.blogger.com/profile/10907084109510731093") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//bp3.blogger.com/_3LIsLvOrI84/R1suSLKugZI/AAAAAAAAABE/J_u3gBG5Cfc/S220-s32/tony.jpg") (width "22")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-4.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-4036024601885652110") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/4036024601885652110") (type "text/html"))) (gd:extendedProperty ((name "blogger.contentRemoved") (value "true"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1208628246"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 29, 2008 at 1:54 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3921191009147822259") (published "2008-07-30T11:58:00.000-04:00") (updated "2008-07-30T11:58:41.831-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "It is better that it is intuitive or obvious to pe...") (post-content "It is better that it is intuitive or obvious to people how the anchoring works, then where it is anchored." (br) (br) "Sure we've all been trained by our favorite web browsers, but we're also fast learners ;)." (br) (br) "That said, I'm quite used to the anchor being the start of the file.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3416142740906973366/comments/default/3921191009147822259") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3416142740906973366/comments/default/3921191009147822259") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/07/search-in-drscheme.html?showComment=1217433480000#c3921191009147822259") (rel "alternate") (title "") (type "text/html"))) (author (name "grant rettke") (uri "https://www.blogger.com/profile/09439997834215273665") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//bp2.blogger.com/_NaL_QCOmC2s/SAuSjQZ4jVI/AAAAAAAAAA0/hcbll2lQdec/S220-s32/GrantRettkeSmall.png") (width "25")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/07/search-in-drscheme.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3416142740906973366") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3416142740906973366") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1104808594"))) (gd:extendedProperty ((name "blogger.displayTime") (value "July 30, 2008 at 11:58 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6089460733413701071") (published "2008-08-06T10:19:00.000-04:00") (updated "2008-08-06T10:19:23.818-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "On behalf of a faculty pusblisher i would like to ...") (post-content "On behalf of a faculty pusblisher i would like to ask if is there someone that can point me the best way to address a message concerning the authorization for distribution of the \"Dr. Scheme\" application in a CD-ROM that will include an eBook in Portuguese called : how to programme in scheme." (br) (br) "Can anyone help me?" (br) (br) "you can write me to feuped@fe.up.pt") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1280588230791861473/comments/default/6089460733413701071") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1280588230791861473/comments/default/6089460733413701071") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/07/plt-scheme-version-4.html?showComment=1218032340000#c6089460733413701071") (rel "alternate") (title "") (type "text/html"))) (author (name "nportela") (uri "https://www.blogger.com/profile/16530522536109501037") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/07/plt-scheme-version-4.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1280588230791861473") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1280588230791861473") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-466410295"))) (gd:extendedProperty ((name "blogger.displayTime") (value "August 6, 2008 at 10:19 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7791286203820632713") (published "2008-10-17T16:47:00.000-04:00") (updated "2008-10-17T16:47:22.729-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Hi. Just trying to find simply-scheme.ss teachpack...") (post-content "Hi. Just trying to find simply-scheme.ss teachpack for DrScheme....was hoping you could point me in the right direction. Thanks.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2747116959164987330/comments/default/7791286203820632713") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2747116959164987330/comments/default/7791286203820632713") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/10/web-application-development-in-plt.html?showComment=1224276420000#c7791286203820632713") (rel "alternate") (title "") (type "text/html"))) (author (name "Jerome") (uri "https://www.blogger.com/profile/17888831843278849819") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/10/web-application-development-in-plt.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2747116959164987330") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2747116959164987330") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1898890068"))) (gd:extendedProperty ((name "blogger.displayTime") (value "October 17, 2008 at 4:47 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7526813406030631519") (published "2008-10-17T17:10:00.000-04:00") (updated "2008-10-17T17:10:39.466-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "If it is what I'm thinking, then you can get it at...") (post-content "If it is what I'm thinking, then you can get it at " (a ((href "http://planet.plt-scheme.org") (rel "nofollow")) "PLaneT") ". Search for it or its author, Danny Yoo (dyoo).") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2747116959164987330/comments/default/7526813406030631519") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2747116959164987330/comments/default/7526813406030631519") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/10/web-application-development-in-plt.html?showComment=1224277800000#c7526813406030631519") (rel "alternate") (title "") (type "text/html"))) (author (name "Jay McCarthy") (uri "https://www.blogger.com/profile/07912023932333508057") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/10/web-application-development-in-plt.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2747116959164987330") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2747116959164987330") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-665606500"))) (gd:extendedProperty ((name "blogger.displayTime") (value "October 17, 2008 at 5:10 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7480218579262515937") (published "2008-12-01T12:26:00.000-05:00") (updated "2008-12-01T12:26:08.536-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "<" "b" ">" "<" "i" ">" "Very usefull, i will use this... But i'm sea...") (post-content (b (i "Very usefull, i will use this... But i'm searching in documentation of Dr Scheme a tool to comunicate with paralel port of my computer. Can this possible?"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/7126646559691060317/comments/default/7480218579262515937") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/7126646559691060317/comments/default/7480218579262515937") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/11/plt-scheme-v413.html?showComment=1228152360000#c7480218579262515937") (rel "alternate") (title "") (type "text/html"))) (author (name "W4r10") (uri "https://www.blogger.com/profile/08061595555253943140") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/11/plt-scheme-v413.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-7126646559691060317") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/7126646559691060317") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-855982940"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 1, 2008 at 12:26 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6055540700314012834") (published "2008-12-01T16:01:00.000-05:00") (updated "2008-12-01T16:01:48.522-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Which operating system?") (post-content "Which operating system?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/7126646559691060317/comments/default/6055540700314012834") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/7126646559691060317/comments/default/6055540700314012834") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/11/plt-scheme-v413.html?showComment=1228165260000#c6055540700314012834") (rel "alternate") (title "") (type "text/html"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/11/plt-scheme-v413.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-7126646559691060317") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/7126646559691060317") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1852501234"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 1, 2008 at 4:01 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7531506046564637994") (published "2008-12-10T12:46:00.000-05:00") (updated "2008-12-10T12:46:52.851-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "hi, i am working with dr scheme 3.72. can someone ...") (post-content "hi, i am working with dr scheme 3.72. can someone please tell me how to read and write data to a file in scheme code??? i need this quick as i am stuck in a project because of the same problem.....help!!!!!") (link ((href "https://www.blogger.com/feeds/2080885971644496896/4036024601885652110/comments/default/7531506046564637994") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/4036024601885652110/comments/default/7531506046564637994") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-4.html?showComment=1228931160000#c7531506046564637994") (rel "alternate") (title "") (type "text/html"))) (author (name "Maverick") (uri "https://www.blogger.com/profile/00302161575533817658") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-4.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-4036024601885652110") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/4036024601885652110") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1493892003"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 10, 2008 at 12:46 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5826455789456041217") (published "2008-12-10T14:12:00.000-05:00") (updated "2008-12-10T14:12:40.835-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "1) google for \"PLT scheme read from file\"" "<" "br" ">" "2) us...") (post-content "1) google for \"PLT scheme read from file\"" (br) "2) use DrScheme's built-in Help Desk." (br) "3) write to the PLT Mailing list.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/4036024601885652110/comments/default/5826455789456041217") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/4036024601885652110/comments/default/5826455789456041217") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-4.html?showComment=1228936320000#c5826455789456041217") (rel "alternate") (title "") (type "text/html"))) (author (name "John Clements") (uri "https://www.blogger.com/profile/15701081040575095781") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-4.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-4036024601885652110") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/4036024601885652110") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-997603040"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 10, 2008 at 2:12 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6562963691128607030") (published "2008-12-23T19:48:00.000-05:00") (updated "2008-12-23T19:48:27.303-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Hi, perhaps this is a really stupid question, but ...") (post-content "Hi, perhaps this is a really stupid question, but which language was your code snippet written in?  If I try and run it with DrScheme in ASL it throws an error on the require function." (br) "I can get it to execute with Essentials of Programming Languages 3rd language, but then I had to define add1 and build-list.  After that, it still errors on the gnuploy-hardcopy, which I presume means this is the wrong language.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/7007357599951577374/comments/default/6562963691128607030") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/7007357599951577374/comments/default/6562963691128607030") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/11/simple-gnuplotting.html?showComment=1230079680000#c6562963691128607030") (rel "alternate") (title "") (type "text/html"))) (author (name "Daniel") (uri "https://www.blogger.com/profile/11001096764248420609") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/11/simple-gnuplotting.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-7007357599951577374") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/7007357599951577374") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-769215082"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 23, 2008 at 7:48 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7550813567149302975") (published "2008-12-24T05:01:00.000-05:00") (updated "2008-12-24T05:01:51.904-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Hi Daniel," "<" "br" ">" "<" "br" ">" "Add the line" "<" "br" ">" "<" "br" ">" "    " "<" "b" ">" "#lang...") (post-content "Hi Daniel," (br) (br) "Add the line" (br) (br) "    " (b "#lang scheme") (br) (br) "and run it in the \"module\" language." (br) (br) "Merry Christmas," (br) "Jens Axel") (link ((href "https://www.blogger.com/feeds/2080885971644496896/7007357599951577374/comments/default/7550813567149302975") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/7007357599951577374/comments/default/7550813567149302975") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/11/simple-gnuplotting.html?showComment=1230112860000#c7550813567149302975") (rel "alternate") (title "") (type "text/html"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/11/simple-gnuplotting.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-7007357599951577374") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/7007357599951577374") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1852501234"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 24, 2008 at 5:01 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2515903516980712479") (published "2009-01-21T04:44:00.000-05:00") (updated "2009-01-21T04:44:36.692-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Hello, " "<" "br" ">" "<" "br" ">" "Let me notify you that the current ...") (post-content "Hello, " (br) (br) "Let me notify you that the current version of MzScheme does not start on my old win98 machine." (br) (br) "I've been using 4.1.1. for some time and it's been working all fine.  To my dismay, however, when I tried to run the newly installed one, it just caused crash and I had to reboot the PC.  The same thing happned with mzc.exe, too." (br) (br) "I can't figure out where the problem is, but I hope it will be solved anyway. (Or will the support of win95 family be discontinued?)") (link ((href "https://www.blogger.com/feeds/2080885971644496896/619826297249082925/comments/default/2515903516980712479") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/619826297249082925/comments/default/2515903516980712479") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/01/plt-scheme-version-4.html?showComment=1232531040000#c2515903516980712479") (rel "alternate") (title "") (type "text/html"))) (author (name "Madoka") (uri "https://www.blogger.com/profile/01378142375427513403") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/01/plt-scheme-version-4.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-619826297249082925") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/619826297249082925") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-744426214"))) (gd:extendedProperty ((name "blogger.displayTime") (value "January 21, 2009 at 4:44 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3752874592748944111") (published "2009-01-23T22:51:00.000-05:00") (updated "2009-01-23T22:51:06.476-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Win95 family should be discontinued. End of story....") (post-content "Win95 family should be discontinued. End of story.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/619826297249082925/comments/default/3752874592748944111") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/619826297249082925/comments/default/3752874592748944111") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/01/plt-scheme-version-4.html?showComment=1232769060000#c3752874592748944111") (rel "alternate") (title "") (type "text/html"))) (author (name "Bob") (uri "https://www.blogger.com/profile/05513580456463140264") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/01/plt-scheme-version-4.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-619826297249082925") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/619826297249082925") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1123402806"))) (gd:extendedProperty ((name "blogger.displayTime") (value "January 23, 2009 at 10:51 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-9150386212346133545") (published "2009-01-26T17:34:00.000-05:00") (updated "2009-01-26T17:34:04.708-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Greetings Fellows." "<" "br" ">" "<" "br" ">" "Im getting this error on...") (post-content "Greetings Fellows." (br) (br) "Im getting this error on XP/OSX in about DrScheme -" ">" " our software license" (br) (br) "procedure send-main-page: expects 0 arguments plus optional arguments with keywords #:fragment, #:notify, #:query, and #:sub, given 1: " "\"" "license/index.html" "\"" (br) (br) " === context ===" (br) "/Applications/PLTScheme/collects/scheme/private/more-scheme.ss:155:2: call-with-break-parameterization" (br) "/Applications/PLTScheme/collects/scheme/private/more-scheme.ss:271:2: call-with-exception-handler" (br) (br) "Best Regards") (link ((href "https://www.blogger.com/feeds/2080885971644496896/619826297249082925/comments/default/9150386212346133545") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/619826297249082925/comments/default/9150386212346133545") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/01/plt-scheme-version-4.html?showComment=1233009240000#c9150386212346133545") (rel "alternate") (title "") (type "text/html"))) (author (name "Jesus Boadas") (uri "https://www.blogger.com/profile/12989405895513749324") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/01/plt-scheme-version-4.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-619826297249082925") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/619826297249082925") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-753482387"))) (gd:extendedProperty ((name "blogger.displayTime") (value "January 26, 2009 at 5:34 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1098913728512229679") (published "2009-01-27T11:34:00.000-05:00") (updated "2009-01-27T11:34:14.583-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "The \"software license\" problem is fixed for the ne...") (post-content "The \"software license\" problem is fixed for the next version.  As for the Windows98 problem, we still didn't find what the problem is...") (link ((href "https://www.blogger.com/feeds/2080885971644496896/619826297249082925/comments/default/1098913728512229679") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/619826297249082925/comments/default/1098913728512229679") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/01/plt-scheme-version-4.html?showComment=1233074040000#c1098913728512229679") (rel "alternate") (title "") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.barzilay.org/images/eli1.jpg") (width "28")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/01/plt-scheme-version-4.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-619826297249082925") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/619826297249082925") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-311455247"))) (gd:extendedProperty ((name "blogger.displayTime") (value "January 27, 2009 at 11:34 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1716124314612450499") (published "2009-01-27T12:08:00.000-05:00") (updated "2009-01-27T12:08:01.560-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Madoka: thanks for letting us know. We have restor...") (post-content "Madoka: thanks for letting us know. We have restored pre-XP compatibility for the next version. If you'd like to try the 4.1.4.2 snapshot, see http://pre.plt-scheme.org/installers/") (link ((href "https://www.blogger.com/feeds/2080885971644496896/619826297249082925/comments/default/1716124314612450499") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/619826297249082925/comments/default/1716124314612450499") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/01/plt-scheme-version-4.html?showComment=1233076080000#c1716124314612450499") (rel "alternate") (title "") (type "text/html"))) (author (name "Matthew Flatt") (uri "https://www.blogger.com/profile/03369511886823036667") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/01/plt-scheme-version-4.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-619826297249082925") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/619826297249082925") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1300564163"))) (gd:extendedProperty ((name "blogger.displayTime") (value "January 27, 2009 at 12:08 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2000723079660995757") (published "2009-03-03T18:10:00.000-05:00") (updated "2009-03-03T18:10:36.302-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "you really need r6rs option OR simplify docs." "<" "br" ">" "i...") (post-content "you really need r6rs option OR simplify docs." (br) "its counter-intuitive with having r5rs." (br) "nobody would think to put language to module. " (br) "even though called r6rs module language." (br) (br) "for documentation recommend something like this ditto- " (br) "point zero : demo on r6rs" (br) "START DRSCHEME" (br) "PUT LANGUAGE TO MODULE" (br) "PUT THIS INTO DEFINITION WINDOW" (br) " #!r6rs" (br) "  (library (examples hello)" (br) "    (export greet)" (br) "    (import (rnrs))" (br) "  " (br) "    (define (greet)" (br) "      (display \"hello\\n\")))" (br) "CLICK RUN") (link ((href "https://www.blogger.com/feeds/2080885971644496896/4036024601885652110/comments/default/2000723079660995757") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/4036024601885652110/comments/default/2000723079660995757") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-4.html?showComment=1236121800000#c2000723079660995757") (rel "alternate") (title "") (type "text/html"))) (author (name "terry") (uri "https://www.blogger.com/profile/12054598146602806162") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/06/plt-scheme-version-4.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-4036024601885652110") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/4036024601885652110") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-601089393"))) (gd:extendedProperty ((name "blogger.displayTime") (value "March 3, 2009 at 6:10 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6417197910018744233") (published "2009-03-22T07:09:00.000-04:00") (updated "2009-03-22T07:09:29.035-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "nice.  I'm new to scheme and using plt scheme to b...") (post-content "nice.  I'm new to scheme and using plt scheme to build a web prototype... " (br) (br) "After years of C++, I must say I love the language and environment." (br) (br) "I really appreciate the work you guys put into this - will be nice to have the url aliasing of this release.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/109123988427683012/comments/default/6417197910018744233") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/109123988427683012/comments/default/6417197910018744233") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/03/plt-scheme-v415.html?showComment=1237720140000#c6417197910018744233") (rel "alternate") (title "") (type "text/html"))) (author (name "gord") (uri "https://www.blogger.com/profile/15771858772588523199") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//bp0.blogger.com/_CaNx-rKnBSQ/RyBGgyEPtrI/AAAAAAAAAB0/nGSjJXMf2Po/s32/gordon.jpg") (width "26")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/03/plt-scheme-v415.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-109123988427683012") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/109123988427683012") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1833840532"))) (gd:extendedProperty ((name "blogger.displayTime") (value "March 22, 2009 at 7:09 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-659445385615512035") (published "2009-03-22T09:49:00.000-04:00") (updated "2009-03-22T09:49:15.058-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "We're glad you like it! I'd be very interested to ...") (post-content "We're glad you like it! I'd be very interested to know any of the problems you " (i "do") " have with the Web framework, because I might be able to make it " (i "even") " better.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/109123988427683012/comments/default/659445385615512035") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/109123988427683012/comments/default/659445385615512035") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/03/plt-scheme-v415.html?showComment=1237729740000#c659445385615512035") (rel "alternate") (title "") (type "text/html"))) (author (name "Jay McCarthy") (uri "https://www.blogger.com/profile/07912023932333508057") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/03/plt-scheme-v415.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-109123988427683012") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/109123988427683012") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-665606500"))) (gd:extendedProperty ((name "blogger.displayTime") (value "March 22, 2009 at 9:49 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4581469787568655071") (published "2009-03-22T11:45:00.000-04:00") (updated "2009-03-22T11:45:31.442-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Pretty cool stuff dude!" "<" "br" ">" "<" "br" ">" "RT" "<" "br" ">" "www.Privacy-C...") (post-content "Pretty cool stuff dude!" (br) (br) "RT" (br) "www.Privacy-Center.net") (link ((href "https://www.blogger.com/feeds/2080885971644496896/109123988427683012/comments/default/4581469787568655071") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/109123988427683012/comments/default/4581469787568655071") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/03/plt-scheme-v415.html?showComment=1237736700000#c4581469787568655071") (rel "alternate") (title "") (type "text/html"))) (author (name "Harold Fowler") (uri "https://www.blogger.com/profile/08018983019271676117") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/03/plt-scheme-v415.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-109123988427683012") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/109123988427683012") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-280173820"))) (gd:extendedProperty ((name "blogger.displayTime") (value "March 22, 2009 at 11:45 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3979401204294040441") (published "2009-03-29T14:24:00.000-04:00") (updated "2009-03-29T14:30:39.282-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text"))) (post-content "This comment has been removed by the author.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/3979401204294040441") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/3979401204294040441") (rel "self") (type "application/atom+xml"))) (author (name "Kyle Cronin") (uri "https://www.blogger.com/profile/11282646583773380070") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8595329905636585805") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8595329905636585805") (type "text/html"))) (gd:extendedProperty ((name "blogger.contentRemoved") (value "true"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1795952077"))) (gd:extendedProperty ((name "blogger.displayTime") (value "March 29, 2009 at 2:24 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3400458946052234083") (published "2009-03-29T14:41:00.000-04:00") (updated "2009-03-29T14:41:42.464-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Why not provide the ability to do both? Reloading ...") (post-content "Why not provide the ability to do both? Reloading an expression and reloading the entire buffer are two different things that, while their functionality somewhat overlaps, provide two distinct ways of interacting with Lisp/Scheme expressions. You can have your big \"Run\" button for students new to Scheme, but also perhaps provide a keyboard shortcut that would send a definition or expression to the current REPL. One advantage to this is that often times when I'm testing my code I'll create temporary variables with dummy data in the REPL, and being able to reload a definition without recreating the test data would be quite a timesaver. In other words, both mechanisms have their uses, and there's no reason why both can't be included." (br) "(this is a revision of my first reply, mainly due to some grammar issues)") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/3400458946052234083") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/3400458946052234083") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html?showComment=1238352060000#c3400458946052234083") (rel "alternate") (title "") (type "text/html"))) (author (name "Kyle Cronin") (uri "https://www.blogger.com/profile/11282646583773380070") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8595329905636585805") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8595329905636585805") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1795952077"))) (gd:extendedProperty ((name "blogger.displayTime") (value "March 29, 2009 at 2:41 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5397921743435034255") (published "2009-03-29T15:40:00.000-04:00") (updated "2009-03-29T15:40:17.375-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I can understand the motivation behind the design....") (post-content "I can understand the motivation behind the design. But this way of working does not work well with my way of developing a program incrementally." (br) (br) "Let's say you are developing the procedure string-prefix? which answers if a string is a prefix of another. You have a file utils.scm with the definition of string-prefix?" (br) (br) "Now you want to test it. Start the REPL and try your definition with a couple of examples. Iterate the process until you have a correct function." (br) (br) "The bad thing here is that all the tests you have developed are only in the REPL and are not saved in the file utils.scm. So if you continue working on your program later and need to verify the definition of string-prefix? you must re-type and re-engineer a test suite for it." (br) (br) "The way I do it, is to have the test suite in comments around the definition and send those tests with send exp and watch for the results.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/5397921743435034255") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/5397921743435034255") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html?showComment=1238355600000#c5397921743435034255") (rel "alternate") (title "") (type "text/html"))) (author (name "Pierre") (uri "https://www.blogger.com/profile/02105344081263526130") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8595329905636585805") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8595329905636585805") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-581200691"))) (gd:extendedProperty ((name "blogger.displayTime") (value "March 29, 2009 at 3:40 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4634319983147857041") (published "2009-03-29T15:58:00.000-04:00") (updated "2009-03-29T15:58:27.778-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I, too, do not see why it can't be an option.  One...") (post-content "I, too, do not see why it can't be an option.  One of the frustrations I have with the REPL in DrScheme is related to the error-flagging whenever I define something in the REPL.  " (br) (br) "Yes, dang it, I *KNOW* it's inconsistent with the definitions window." (br) (br) "Could it possibly be an option?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/4634319983147857041") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/4634319983147857041") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html?showComment=1238356680000#c4634319983147857041") (rel "alternate") (title "") (type "text/html"))) (author (name "Yakov") (uri "https://www.blogger.com/profile/04024751031976348316") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8595329905636585805") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8595329905636585805") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-2112903444"))) (gd:extendedProperty ((name "blogger.displayTime") (value "March 29, 2009 at 3:58 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7772047325427378042") (published "2009-03-29T16:37:00.000-04:00") (updated "2009-03-29T16:37:02.963-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I am guessing that most people avoid this by doing...") (post-content "I am guessing that most people avoid this by doing the exploratory" (br) "part of the programming inside of the REPL and when they are happy" (br) "with new functions they do a:" (br) (br) "M:S:right-arrow" (br) "C:c" (br) "C:F6" (br) "C:v") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/7772047325427378042") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/7772047325427378042") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html?showComment=1238359020000#c7772047325427378042") (rel "alternate") (title "") (type "text/html"))) (author (name "grant rettke") (uri "https://www.blogger.com/profile/09439997834215273665") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_NaL_QCOmC2s/SU59EVByZ2I/AAAAAAAAABE/WK5EiDdNawY/S220-s32/GrantRettkeBC2MKE-HEADSHOT.png") (width "26")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8595329905636585805") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8595329905636585805") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1104808594"))) (gd:extendedProperty ((name "blogger.displayTime") (value "March 29, 2009 at 4:37 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4357503995647973182") (published "2009-03-29T18:10:00.000-04:00") (updated "2009-03-29T18:10:07.932-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Another useful feature gone because somebody think...") (post-content "Another useful feature gone because somebody thinks they know better what is good for other people than those people themselves.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/4357503995647973182") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/4357503995647973182") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html?showComment=1238364600000#c4357503995647973182") (rel "alternate") (title "") (type "text/html"))) (author (name "Pascal Costanza") (uri "https://www.blogger.com/profile/04512975624438301971") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//bp1.blogger.com/_DIhRAGqWubM/SBVnDJc6vsI/AAAAAAAAAAM/oWU7nSP-yzU/S220-s32/me.jpg") (width "25")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8595329905636585805") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8595329905636585805") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1775558073"))) (gd:extendedProperty ((name "blogger.displayTime") (value "March 29, 2009 at 6:10 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-9131556820174995322") (published "2009-03-29T18:13:00.000-04:00") (updated "2009-03-29T18:13:15.336-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Just like `goto'.") (post-content "Just like `goto'.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/9131556820174995322") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/9131556820174995322") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html?showComment=1238364780000#c9131556820174995322") (rel "alternate") (title "") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.barzilay.org/images/eli1.jpg") (width "28")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8595329905636585805") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8595329905636585805") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-311455247"))) (gd:extendedProperty ((name "blogger.displayTime") (value "March 29, 2009 at 6:13 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3032574488480775645") (published "2009-03-29T18:16:00.000-04:00") (updated "2009-03-29T18:16:10.236-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Pascal: Someone will probably write a DrScheme plu...") (post-content "Pascal: Someone will probably write a DrScheme plugin to add this feature.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/3032574488480775645") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/3032574488480775645") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html?showComment=1238364960000#c3032574488480775645") (rel "alternate") (title "") (type "text/html"))) (author (name "grant rettke") (uri "https://www.blogger.com/profile/09439997834215273665") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_NaL_QCOmC2s/SU59EVByZ2I/AAAAAAAAABE/WK5EiDdNawY/S220-s32/GrantRettkeBC2MKE-HEADSHOT.png") (width "26")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8595329905636585805") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8595329905636585805") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1104808594"))) (gd:extendedProperty ((name "blogger.displayTime") (value "March 29, 2009 at 6:16 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1160584305168499273") (published "2009-03-29T18:20:00.000-04:00") (updated "2009-03-29T18:20:17.487-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "\"Another feature gone ...\" -- I didn't know that f...") (post-content "\"Another feature gone ...\" -- I didn't know that features go away via someone's effort; I thought they came *in* via someone's effort. I must have been doing it wrong all along!") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/1160584305168499273") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/1160584305168499273") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html?showComment=1238365200000#c1160584305168499273") (rel "alternate") (title "") (type "text/html"))) (author (name "Robby") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//people.cs.uchicago.edu/~robby/portrait-2006.jpg") (width "13")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8595329905636585805") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8595329905636585805") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1090470180"))) (gd:extendedProperty ((name "blogger.displayTime") (value "March 29, 2009 at 6:20 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6786181610451889004") (published "2009-03-29T18:33:00.000-04:00") (updated "2009-03-29T18:33:22.135-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "See " "<" "a href=\"http://p-cos.blogspot.com/2009/03/cre...") (post-content "See " (a ((href "http://p-cos.blogspot.com/2009/03/credo.html") (rel "nofollow")) "this quote") " from Steele and Sussman.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/6786181610451889004") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/6786181610451889004") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html?showComment=1238365980000#c6786181610451889004") (rel "alternate") (title "") (type "text/html"))) (author (name "Pascal Costanza") (uri "https://www.blogger.com/profile/04512975624438301971") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//bp1.blogger.com/_DIhRAGqWubM/SBVnDJc6vsI/AAAAAAAAAAM/oWU7nSP-yzU/S220-s32/me.jpg") (width "25")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8595329905636585805") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8595329905636585805") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1775558073"))) (gd:extendedProperty ((name "blogger.displayTime") (value "March 29, 2009 at 6:33 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3187489497306553558") (published "2009-03-29T18:50:00.000-04:00") (updated "2009-03-29T18:50:54.375-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Pascal," "<" "br" ">" "Just to be clear: yes, I know about usi...") (post-content "Pascal," (br) "Just to be clear: yes, I know about using `lambda' as a `goto'.  In a sane language like Scheme, `goto' is gone -- but only on the superficial level of what you see when you browse through the report or the manual." (br) "An incremental REPL is gone from PLT Scheme in a similarly superficial way: DrScheme does not support it -- but it's still part of the language, and you can still fire up MzScheme and talk to it like any other REPL.  More than that, as said in previous comments: it wouldn't be too hard to implement a send-last-sexpr functionality in DrScheme.  Why was it done so far?  For the exact same reason that nobody implemented a `prog' macro in PLT: nobody really needed it.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/3187489497306553558") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/3187489497306553558") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html?showComment=1238367000000#c3187489497306553558") (rel "alternate") (title "") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.barzilay.org/images/eli1.jpg") (width "28")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8595329905636585805") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8595329905636585805") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-311455247"))) (gd:extendedProperty ((name "blogger.displayTime") (value "March 29, 2009 at 6:50 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1702253925322820952") (published "2009-03-30T05:56:00.000-04:00") (updated "2009-03-30T05:56:46.576-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Eli, the article above argues that it is a feature...") (post-content "Eli, the article above argues that it is a feature designed into DrScheme. It is one reason I never got warm with DrScheme, it does not support the style of interaction I like. I'm old. Bearded. Lisp hacker. I'm probably not the 'target' for it. Yeah, how I liked MacScheme - that was fun.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/1702253925322820952") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/1702253925322820952") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html?showComment=1238406960000#c1702253925322820952") (rel "alternate") (title "") (type "text/html"))) (author (name "Rainer") (uri "https://www.blogger.com/profile/11268786995966440127") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8595329905636585805") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8595329905636585805") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1311173577"))) (gd:extendedProperty ((name "blogger.displayTime") (value "March 30, 2009 at 5:56 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2058240404857093138") (published "2009-03-30T08:25:00.000-04:00") (updated "2009-03-30T08:25:41.347-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "That was interesting. I am new to Scheme (PLT Sche...") (post-content "That was interesting. I am new to Scheme (PLT Scheme) and I have only played with DrScheme so I didn't know there was any other \"way\" to do it." (br) (br) "Now, I have read the responses from the \"incrementalists\" and I see the point they are making. Couldn't what they want be just another \"mode\" for DrScheme? You change the option to \"Incremental REPL\" or something and you get the way of working they like.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/2058240404857093138") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/2058240404857093138") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html?showComment=1238415900000#c2058240404857093138") (rel "alternate") (title "") (type "text/html"))) (author (name "Robert") (uri "https://www.blogger.com/profile/05513580456463140264") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8595329905636585805") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8595329905636585805") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1123402806"))) (gd:extendedProperty ((name "blogger.displayTime") (value "March 30, 2009 at 8:25 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4363680010726149259") (published "2009-03-30T10:37:00.000-04:00") (updated "2009-03-30T10:37:59.663-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Rainer: yes, it is a feature designed into DrSchem...") (post-content "Rainer: yes, it is a feature designed into DrScheme.  But as mentioned above several times now, it doesn't contradict having the incremental kind of REPL too: all that is needed for that is a simple send-to-repl key, and that's really not too hard to do." (br) "See also Robby's reply: it took effort to implement the resetting functionality -- an effort that was made due to the design decision. So DrScheme has an additional feature -- and implementing a send-to-repl key just happens to be a something that is not going to use that feature (making it even easier to implement)." (br) "Back for the reason why it wasn't implemented so far: it's because once people got used to it, they liked it.  Once they liked it, they saw no need to implement support for the old mode of work.  It's actually quite similar to why we use S-expression syntax: once people got used to that, they didn't see any reason to go back and implement M-expressions as originally planned.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/4363680010726149259") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/4363680010726149259") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html?showComment=1238423820000#c4363680010726149259") (rel "alternate") (title "") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.barzilay.org/images/eli1.jpg") (width "28")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8595329905636585805") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8595329905636585805") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-311455247"))) (gd:extendedProperty ((name "blogger.displayTime") (value "March 30, 2009 at 10:37 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4430296485856122447") (published "2009-03-30T21:47:00.000-04:00") (updated "2009-03-30T21:47:43.356-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I do the vast majority of my programming as a scie...") (post-content "I do the vast majority of my programming as a scientist (in Matlab, unfortunately).  However, I recently did some consulting work where the language I used was not important and so chose to use PLTScheme.  Like my scientific work, though, this consulting involved a lot of large data sets which one wanted to load, and then interactively transform - generally speaking such \"exploratory data analysis\" is not a process for which large scale program design is very useful.  What is useful is to be able to load large data sets (or perform long simulations or calculations) once, storing them in variables in a running interpreter, and then interactively plot and/or analyze the results - a process which often involves sending partial expressions to a running process to be evaluated.  Had I been able to do this in DrScheme I might have used the environment.  The absence of this feature was definitely irksome enough that I decided to use Emacs and Quack for my development instead." (br) (br) "I don't know how many other programmers out there are use their programming languages as extensions of their ability to visualize and analyze data rather than as systems to design applications, but I would suspect it is a fair number.  For them, it may be worth the confusion to allow incremental compilation/evaluation.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/4430296485856122447") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/4430296485856122447") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html?showComment=1238464020000#c4430296485856122447") (rel "alternate") (title "") (type "text/html"))) (author (name "J.V. Toups") (uri "https://www.blogger.com/profile/06898786195752837412") (email "noreply@blogger.com") (gd:image ((height "20") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//2.bp.blogspot.com/_q-KqPstDuuE/SagpQuYpHtI/AAAAAAAAAEQ/9Us0yI07JYg/s32-R/n2729953_40634428_1942.jpg") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8595329905636585805") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8595329905636585805") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1194270766"))) (gd:extendedProperty ((name "blogger.displayTime") (value "March 30, 2009 at 9:47 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6080703334065867949") (published "2009-03-31T06:37:00.000-04:00") (updated "2009-03-31T06:37:52.717-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "No matter -- old Lispers can just post " "<" "br" ">" "to them...") (post-content "No matter -- old Lispers can just post " (br) "to them newfangled Wikis to see the " (br) "effect of small changes in state on " (br) "the big picture." (br) (br) "-- Paul") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/6080703334065867949") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/6080703334065867949") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html?showComment=1238495820000#c6080703334065867949") (rel "alternate") (title "") (type "text/html"))) (author (name "steck") (uri "https://www.blogger.com/profile/13416750891822431224") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8595329905636585805") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8595329905636585805") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1284969587"))) (gd:extendedProperty ((name "blogger.displayTime") (value "March 31, 2009 at 6:37 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6041679912864743630") (published "2009-03-31T10:58:00.000-04:00") (updated "2009-03-31T10:58:04.165-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "J.V., the data analysis problem is precisely the k...") (post-content "J.V., the data analysis problem is precisely the kind of process where a specialized environment is possibly superior to the old incremental Emacs mode. Just like writing shell scripts is neat once you have figured out how to use the Language dialog to preset command line arguments.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/6041679912864743630") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/6041679912864743630") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html?showComment=1238511480000#c6041679912864743630") (rel "alternate") (title "") (type "text/html"))) (author (name "matthias") (uri "https://www.blogger.com/profile/00000181081270224360") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.ccs.neu.edu/home/matthias/Images/felleisen1.jpg") (width "23")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8595329905636585805") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8595329905636585805") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-56163577"))) (gd:extendedProperty ((name "blogger.displayTime") (value "March 31, 2009 at 10:58 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7726784594237616245") (published "2009-04-02T13:47:00.000-04:00") (updated "2009-04-02T13:47:12.229-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Why so much fuss about it?  Like Grant pointed out...") (post-content "Why so much fuss about it?  Like Grant pointed out, I generally develop and refine functions in the REPL and when I'm satisfied with it, I write it to the definitions buffer.  You may also copy from the definitions, copy on the REPL and further refine it, despite the \"out of sync\" alert.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/7726784594237616245") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/7726784594237616245") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html?showComment=1238694420000#c7726784594237616245") (rel "alternate") (title "") (type "text/html"))) (author (name "namekuseijin") (uri "https://www.blogger.com/profile/02436340179949427584") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.gravatar.com/avatar.php?gravatar_id=a51741ed3632a45027c2ea4340374b9d&size=80&rating=R") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8595329905636585805") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8595329905636585805") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1374278847"))) (gd:extendedProperty ((name "blogger.displayTime") (value "April 2, 2009 at 1:47 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-556431263578213872") (published "2009-04-02T15:19:00.000-04:00") (updated "2009-04-02T15:19:42.279-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "namekuseijin," "<" "br" ">" "<" "br" ">" "Sure, you can also program wi...") (post-content "namekuseijin," (br) (br) "Sure, you can also program with one arm tied behind your back. It's just not very helpful." (br) (br) "The fact that you're programming in this style proves that you would benefit from a less restrictive environment. It also proves that the argument that \"nobody implemented it, because nobody needed it\" is not really valid. We have actually already seen a few people mentioning here that they would \"need\" it. But unfortunately, many programmers just use whatever they are given and don't question their tools too much, and instead use workarounds, like you seem to do in this case." (br) (br) "You see this also a lot in the Java world. So, indeed, nothing much is really fundamental and critical to anything...") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/556431263578213872") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/556431263578213872") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html?showComment=1238699940000#c556431263578213872") (rel "alternate") (title "") (type "text/html"))) (author (name "Pascal Costanza") (uri "https://www.blogger.com/profile/04512975624438301971") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//bp1.blogger.com/_DIhRAGqWubM/SBVnDJc6vsI/AAAAAAAAAAM/oWU7nSP-yzU/S220-s32/me.jpg") (width "25")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8595329905636585805") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8595329905636585805") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1775558073"))) (gd:extendedProperty ((name "blogger.displayTime") (value "April 2, 2009 at 3:19 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3615388645647272782") (published "2009-04-02T15:26:00.000-04:00") (updated "2009-04-02T15:26:34.049-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "\"A less restrictive environment\" is bogus: the env...") (post-content "\"A less restrictive environment\" is bogus: the environment lacks a keypress that makes copy-from-definitions-paste-to-repl easier, but it is *not* restricted.  Confusing that with \"a restriction\" is what makes you draw other bogus conclusions, so I'll stop here.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/3615388645647272782") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/3615388645647272782") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html?showComment=1238700360000#c3615388645647272782") (rel "alternate") (title "") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.barzilay.org/images/eli1.jpg") (width "28")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8595329905636585805") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8595329905636585805") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-311455247"))) (gd:extendedProperty ((name "blogger.displayTime") (value "April 2, 2009 at 3:26 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3584574213139314148") (published "2009-04-03T23:55:00.000-04:00") (updated "2009-04-03T23:55:13.225-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Pascal, like I said I usually just work out the fu...") (post-content "Pascal, like I said I usually just work out the functions at the excellent command line -- complete with full command history, completion and parenthetical editing -- and then paste to the definitions once I" 39 "m done." (br) (br) "If I ever have to redefine it, I may just either access the command history (even from previous closed sessions) or, from your usual emacs position when doing the same (in the tail of a definition), do:" (br) "Alt+Shift+" "<" "- (to select the definition)" (br) "Ctrl+C (to copy)" (br) "Ctrl+D (do go to interactions)" (br) "Ctrl+V+Enter (to rerun the definition)" (br) (br) "Hardly Earth-shattering, specially in the face of the powerful command-line editing.  But yeah, the above procedure could be turned into a single step with something as keybinding customization.  Section 3.3.7 of the DrScheme environment manual spill out the details." (br) (br) "I" 39 "ve grown on Emacs, but got fed up of all the baroqueness and hand dextery.  I" 39 "m no virtuoso pianist.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/3584574213139314148") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/3584574213139314148") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html?showComment=1238817300000#c3584574213139314148") (rel "alternate") (title "") (type "text/html"))) (author (name "namekuseijin") (uri "https://www.blogger.com/profile/02436340179949427584") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.gravatar.com/avatar.php?gravatar_id=a51741ed3632a45027c2ea4340374b9d&size=80&rating=R") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8595329905636585805") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8595329905636585805") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1374278847"))) (gd:extendedProperty ((name "blogger.displayTime") (value "April 3, 2009 at 11:55 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5559851310499460421") (published "2009-04-04T16:43:00.000-04:00") (updated "2009-04-04T16:43:42.018-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "namekuseijin," "<" "br" ">" "<" "br" ">" "Sure, it's possible to find w...") (post-content "namekuseijin," (br) (br) "Sure, it's possible to find workarounds to get what you want. And there may indeed be very good reasons to stick to these workarounds, because you deem other things more important than this." (br) (br) "But note that your suggested workaround makes things even harder to follow than what Matthias describes in his blog posting. Not only do you now have to track which definitions actually resemble closest the current state of the image, you also have to track them down in a long list of definitions that is ordered by history rather than by some program logic." (br) (br) "By the way, emacs is a straw man here. I don't like emacs that much either. But there are much better alternatives, like the IDEs for Macintosh Common Lisp, LispWorks, Allegro Common Lisp, and Corman Lisp, to name just a few current ones." (br) (br) "For example, in LispWorks I can choose to define the current selected form in the buffer - or even undefine it! - by clicking the respective entries in the contextual menu that I get, as usual, by right-clicking. I can also select several forms in a row and define or undefine them in one go, which makes it already a lot easier to have some confidence in a consistent state of the system. And by using a system definition facility, it is also quite straightforward to do a complete reload of everything, but " (i "without") " invalidating all the data on which I want to test my definitions." (br) (br) "But that's Common Lisp, and that's worse than Scheme in every respect, right? So much for religion...") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/5559851310499460421") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/5559851310499460421") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html?showComment=1238877780000#c5559851310499460421") (rel "alternate") (title "") (type "text/html"))) (author (name "Pascal Costanza") (uri "https://www.blogger.com/profile/04512975624438301971") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//bp1.blogger.com/_DIhRAGqWubM/SBVnDJc6vsI/AAAAAAAAAAM/oWU7nSP-yzU/S220-s32/me.jpg") (width "25")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8595329905636585805") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8595329905636585805") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1775558073"))) (gd:extendedProperty ((name "blogger.displayTime") (value "April 4, 2009 at 4:43 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8417632137458344453") (published "2009-04-04T17:20:00.000-04:00") (updated "2009-04-04T17:20:10.095-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Pascal: your comments go down a line where each is...") (post-content "Pascal: your comments go down a line where each is more bogus than the previous.  You now claim that namekuseijin's method is harder because definitions don't follow some mythical \"program logic\".  With any conventional REPL (including the one in DrScheme and in MzScheme) there is no \"program logic\" that dictates the ordering of definitions entered on the REPL -- there is just the history of whatever you happen to have typed in.  The core of Matthias's post is exactly about that: this history leads to hidden dependencies (and therefore bugs) that are not evident in your code." (br) (br) "Yes, there are some Lisps that will allow you to dump the current runtime image -- and yes, you can use that as a kind of a formalization of the history as \"the code\" -- but trying to write real software (one that requires maintenance) this way is crazy.  The problems involved in doing this kind of development are hard, and -- AFAIK -- no Lisp is actually trying to solve them *properly*.  Ad-hoc \"solutions\" involve tools similar to what you mention: undefining a name, retroactively defining a name, etc.  CLOS is a good example in the retroactive-change attempt: defining an already existing class has some complex semantics that try to update previously defined instances, and that tends to work only with very simple classes.  In the more common cases you end up facing a need for `update-instance-for-redefined-class' -- which means that you now need to actually write code around the problem inherent in REPLs.  Worse, if the redefinition is due to change in your source, this code is a one-time throwaway tool that will never be used outside of your currently outdated REPL." (br) (br) "IME, I found myself reaching a similar conclusion to Matthias: in theory, I can maintain the REPL, and I can invest some effort in doing so by writing update methods.  In practice, it's just easier to restart the REPL and be done with it.  It's nice to have a REPL, and it's easy to get carried away with it to the point where I write code for the sake of not killing it -- and at that point a relevant question is whether the REPL is helping me or whether I'm helping the REPL." (br) (br) "The bottom line is that the Lisp world is infested with loading-order problems, and there are a good number of packages (and correspondingly a good amount of human effort) that try to solve these issues.  And this is not some theoretical \"we had a problem and now it's solved\" -- I see people who are running into these problems today, and I see people who are working on these problems today.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/8417632137458344453") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/8417632137458344453") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html?showComment=1238880000000#c8417632137458344453") (rel "alternate") (title "") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.barzilay.org/images/eli1.jpg") (width "28")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8595329905636585805") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8595329905636585805") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-311455247"))) (gd:extendedProperty ((name "blogger.displayTime") (value "April 4, 2009 at 5:20 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7224733030433901597") (published "2009-04-04T17:33:00.000-04:00") (updated "2009-04-04T17:33:54.103-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Eli," "<" "br" ">" "<" "br" ">" "If you send definitions from the buffe...") (post-content "Eli," (br) (br) "If you send definitions from the buffer to the image, or send commands to undefine them, then you can preserve the arrangement of the program text according to some program logic. This has nothing to do with the REPL. (Corman Lisp seems very interesting here because it actually does not make the distinction between a buffer and a REPL anymore, but gives you only buffers from which you can interact with the image.)" (br) (br) "It's good that you have reached some conclusions and stick to a certain programming style. But why do you (or Matthias) make attempts to impose your own views on others?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/7224733030433901597") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/7224733030433901597") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html?showComment=1238880780000#c7224733030433901597") (rel "alternate") (title "") (type "text/html"))) (author (name "Pascal Costanza") (uri "https://www.blogger.com/profile/04512975624438301971") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//bp1.blogger.com/_DIhRAGqWubM/SBVnDJc6vsI/AAAAAAAAAAM/oWU7nSP-yzU/S220-s32/me.jpg") (width "25")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8595329905636585805") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8595329905636585805") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1775558073"))) (gd:extendedProperty ((name "blogger.displayTime") (value "April 4, 2009 at 5:33 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4127729207850260515") (published "2009-04-04T17:40:00.000-04:00") (updated "2009-04-04T17:40:54.987-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Never thought blogs could be as amusing as usenet....") (post-content "Never thought blogs could be as amusing as usenet. :)" (br) (br) "In any case, I'll get onto Corman Lisp when I'm fed up with DrScheme's interaction style.  should take a while...") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/4127729207850260515") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/4127729207850260515") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html?showComment=1238881200000#c4127729207850260515") (rel "alternate") (title "") (type "text/html"))) (author (name "namekuseijin") (uri "https://www.blogger.com/profile/02436340179949427584") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.gravatar.com/avatar.php?gravatar_id=a51741ed3632a45027c2ea4340374b9d&size=80&rating=R") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8595329905636585805") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8595329905636585805") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1374278847"))) (gd:extendedProperty ((name "blogger.displayTime") (value "April 4, 2009 at 5:40 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7473456467888646305") (published "2009-04-04T17:49:00.000-04:00") (updated "2009-04-04T17:49:43.006-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Pascal," "<" "br" ">" "<" "br" ">" "  No one is imposing their will on ...") (post-content "Pascal," (br) (br) "  No one is imposing their will on others." (br) (br) "Indeed, others have explaining how one might build the kind of interactions you propose into DrScheme, if you were so inclined. As I said in a rather obtuse way earlier (for which I apologize), it takes work to do such things. If someone deems it important, they can certainly do it. I'd be more than happy to help if said person gets stuck in trying.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/7473456467888646305") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/7473456467888646305") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html?showComment=1238881740000#c7473456467888646305") (rel "alternate") (title "") (type "text/html"))) (author (name "Robby") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//people.cs.uchicago.edu/~robby/portrait-2006.jpg") (width "13")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8595329905636585805") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8595329905636585805") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1090470180"))) (gd:extendedProperty ((name "blogger.displayTime") (value "April 4, 2009 at 5:49 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3319743675730551877") (published "2009-04-04T17:59:00.000-04:00") (updated "2009-04-04T17:59:15.950-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Pascal," "<" "br" ">" "<" "br" ">" "Re \"If you send definitions from th...") (post-content "Pascal," (br) (br) "Re \"If you send definitions from the buffer to the image, or send commands to undefine them\" -- that would be equivalent to writing your program with `eval'.  While this is available in a number of languages including outside of the Lisp world, I have yet to see anyone writing \"Real\" code that way, for exactly the same reason I mentioned earlier: maintaining such code would be a nightmare.  (And this is even if your environment provides your with more powerful eval-like primitives like querying the current bindings, or removing a binding -- all existing in MzScheme (and in DrScheme, of course) too, BTW.)" (br) (br) "And re \"make attempts to impose your own views on others\" -- where did I do that??  MzScheme *does* have these feature, DrScheme only *adds* a feature on top of MzScheme.  Like I said about 2000 times now, the only thing that is actually missing from DrScheme would be a convenient \"send the current expression to the REPL\" key -- which is very likely to be very easy to add.  I also said that nobody did this because nobody has seen any burning need to do so.  I can tell you even more: I *do* use the REPL to debug code every once in a while. Why didn't I bother adding that feature?  Well, I said that too: I know where Emacs is when I need it, and Emacs is already doing what Emacs is doing very well -- I have absolutely no desire to compete with it.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/3319743675730551877") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/3319743675730551877") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html?showComment=1238882340000#c3319743675730551877") (rel "alternate") (title "") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.barzilay.org/images/eli1.jpg") (width "28")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8595329905636585805") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8595329905636585805") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-311455247"))) (gd:extendedProperty ((name "blogger.displayTime") (value "April 4, 2009 at 5:59 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8124970546781548253") (published "2009-04-08T02:48:00.000-04:00") (updated "2009-04-08T02:48:16.431-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Having read through the comments, while I can unde...") (post-content "Having read through the comments, while I can understand the reasoning behind not having a \"send the current expression to the REPL\" key, it seems that there are two distinct schools of thought here, with no middle ground." (br) (br) "The best way to support both schools would probably be to have two distinct modes, one for each of both.  I, for one, could definitely use both, each for different purposes." (br) (br) "One reason that I still keep MIT/GNU Scheme around is that I like its feature to use C-x C-e to return the current expression to the REPL.  It is actually convenient when working through such a book as SICP, because then I can keep a running log of the current session history without resetting the session every time I change a definition.  It is also one reason that I haven't used DrScheme for SICP yet." (br) (br) "On the other hand, I can see Matthias's point in re-starting the REPL and re-loading the definitions buffer for users who have difficulty in keeping track of the state of the REPL." (br) (br) "Considering that effort was spent in making DrScheme's REPL transparent, and that it wasn't transparent before, why not retain the current mode in as a \"non-interactive mode,\" and simply create an alternative \"interactive mode\" based on code from the code base of an earlier version of DrScheme before that change was made." (br) (br) "This should not take too much effort, and should be acceptable by both camps.  It would resolve this conflict, and add a useful alternative, making DrScheme acceptable to both schools of interaction.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/8124970546781548253") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/8124970546781548253") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html?showComment=1239173280000#c8124970546781548253") (rel "alternate") (title "") (type "text/html"))) (author (name "Benjamin L. Russell") (uri "https://www.blogger.com/profile/09444840965135769384") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8595329905636585805") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8595329905636585805") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-323503944"))) (gd:extendedProperty ((name "blogger.displayTime") (value "April 8, 2009 at 2:48 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4759236118158908158") (published "2009-04-19T00:03:00.000-04:00") (updated "2009-04-19T00:03:08.994-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "The link is broken in this article, please fix.") (post-content "The link is broken in this article, please fix.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3788111355860084168/comments/default/4759236118158908158") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3788111355860084168/comments/default/4759236118158908158") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/05/looking-for-small-scheme-scripts.html?showComment=1240113780000#c4759236118158908158") (rel "alternate") (title "") (type "text/html"))) (author (name "Julian") (uri "https://www.blogger.com/profile/01474362581293613303") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/05/looking-for-small-scheme-scripts.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3788111355860084168") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3788111355860084168") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-532326758"))) (gd:extendedProperty ((name "blogger.displayTime") (value "April 19, 2009 at 12:03 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4712270548242025450") (published "2009-04-19T08:43:00.000-04:00") (updated "2009-04-19T08:43:37.688-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I see three links (two to the typed scheme main pa...") (post-content "I see three links (two to the typed scheme main page and one to Sam's email). They all seem okay to me.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3788111355860084168/comments/default/4712270548242025450") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3788111355860084168/comments/default/4712270548242025450") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/05/looking-for-small-scheme-scripts.html?showComment=1240144980000#c4712270548242025450") (rel "alternate") (title "") (type "text/html"))) (author (name "Robby") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//people.cs.uchicago.edu/~robby/portrait-2006.jpg") (width "13")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/05/looking-for-small-scheme-scripts.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3788111355860084168") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3788111355860084168") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1090470180"))) (gd:extendedProperty ((name "blogger.displayTime") (value "April 19, 2009 at 8:43 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3886319857335982817") (published "2009-05-06T10:11:00.000-04:00") (updated "2009-05-06T10:11:28.479-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "As Shriram pointed out in email, he and I conjectu...") (post-content "As Shriram pointed out in email, he and I conjectured that there was an intimate relationship between s/s and call/cc in 2002. When I then gave my Oxford lecture, some German attendees (from Mike's or Peter's group, I believe) implemented call/cc via s/s. Question is what this really means.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2334413198277409498/comments/default/3886319857335982817") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2334413198277409498/comments/default/3886319857335982817") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/05/what-is-sendsuspend.html?showComment=1241619060000#c3886319857335982817") (rel "alternate") (title "") (type "text/html"))) (author (name "matthias") (uri "https://www.blogger.com/profile/00000181081270224360") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.ccs.neu.edu/home/matthias/Images/felleisen1.jpg") (width "23")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/05/what-is-sendsuspend.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2334413198277409498") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2334413198277409498") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-56163577"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 6, 2009 at 10:11 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1444910105617568532") (published "2009-05-24T14:51:10.373-04:00") (updated "2009-05-24T14:51:10.373-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "turing tarpit? next corner right and there you are...") (post-content "turing tarpit? next corner right and there you are ;)" (br) (br) "As you are quite aware, your \"solution\" changes the cost of macro-expansion to quadric. This is in constrast to linear cost for native syntax-case AND native ER-macros. As it is quite possible to implement syntax-case in terms of ER-transformers (or syntactic-closures) without loosing the linear complexity, many people claim that these two are more basic than syntax-case ... and therefore should be in the actual standard." (br) (br) "Whats your opinion eli?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1513383412261723218/comments/default/1444910105617568532") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1513383412261723218/comments/default/1444910105617568532") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/05/explicit-renaming-macros-implicitly.html?showComment=1243191070373#c1444910105617568532") (rel "alternate") (title "") (type "text/html"))) (author (name "derSlom") (uri "https://www.blogger.com/profile/12160110480520538395") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/05/explicit-renaming-macros-implicitly.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1513383412261723218") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1513383412261723218") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1315436050"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 24, 2009 at 2:51 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7551106443146820517") (published "2009-05-24T15:29:45.968-04:00") (updated "2009-05-24T15:29:45.968-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "to also add useful something besides nitpicking, I...") (post-content "to also add useful something besides nitpicking, I have been down that road as well: http://paste.lisp.org/display/41754") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1513383412261723218/comments/default/7551106443146820517") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1513383412261723218/comments/default/7551106443146820517") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/05/explicit-renaming-macros-implicitly.html?showComment=1243193385968#c7551106443146820517") (rel "alternate") (title "") (type "text/html"))) (author (name "derSlom") (uri "https://www.blogger.com/profile/12160110480520538395") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/05/explicit-renaming-macros-implicitly.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1513383412261723218") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1513383412261723218") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1315436050"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 24, 2009 at 3:29 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1928664524994649529") (published "2009-05-24T20:20:37.804-04:00") (updated "2009-05-24T20:20:37.804-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Although I don't know of any formal proofs of this...") (post-content "Although I don't know of any formal proofs of this, I don't believe that either ER or syntactic closures can express syntax case, nor can syntax case (in the original formulation) express ER.  " (br) (br) "Also, ER really doesn't have a clear specification, so it's hard to make sure that an ER implementation that matches the original note works with actual code.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1513383412261723218/comments/default/1928664524994649529") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1513383412261723218/comments/default/1928664524994649529") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/05/explicit-renaming-macros-implicitly.html?showComment=1243210837804#c1928664524994649529") (rel "alternate") (title "") (type "text/html"))) (author (name "Sam TH") (uri "https://www.blogger.com/profile/12049111326816937908") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/05/explicit-renaming-macros-implicitly.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1513383412261723218") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1513383412261723218") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1574730235"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 24, 2009 at 8:20 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8263949040761608566") (published "2009-05-24T21:20:02.916-04:00") (updated "2009-05-24T21:20:02.916-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "derSlom: Yes, it is a demonstration of how to do E...") (post-content "derSlom: Yes, it is a demonstration of how to do ER-style for people who like that for the listed reason, and as a demonstration that syntax values don't require black magic, it's not a complete library.  Expanding it into a library will require adding a hash table to (1) unwrap each syntax value once and get the cost loss back, and (2) to associate each unwrapped list with the lost syntactic information (which, I think, will also solve the `#%app' problem).  BTW, unlike your code, I'm talking about a persistent hash, allowing you to add information to existing syntax values." (br) (br) "Sam: that sounds right, but I explicitly avoided that too.  I do think, though, that it's possible to express ER using something like the above -- even with #%app.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1513383412261723218/comments/default/8263949040761608566") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1513383412261723218/comments/default/8263949040761608566") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/05/explicit-renaming-macros-implicitly.html?showComment=1243214402916#c8263949040761608566") (rel "alternate") (title "") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.barzilay.org/images/eli1.jpg") (width "28")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/05/explicit-renaming-macros-implicitly.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1513383412261723218") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1513383412261723218") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-311455247"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 24, 2009 at 9:20 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3679618140671133925") (published "2009-06-01T15:50:26.877-04:00") (updated "2009-06-01T15:50:26.877-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "The rate of progress on PLT is quite impressive. I...") (post-content "The rate of progress on PLT is quite impressive. I just wish that downloading and installing updates were a bit more automatic. Maybe it'll be included in 4.3? *crosses fingers* ;-)") (link ((href "https://www.blogger.com/feeds/2080885971644496896/655377273386641529/comments/default/3679618140671133925") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/655377273386641529/comments/default/3679618140671133925") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/06/plt-scheme-v42.html?showComment=1243885826877#c3679618140671133925") (rel "alternate") (title "") (type "text/html"))) (author (name "Kyle Cronin") (uri "https://www.blogger.com/profile/11282646583773380070") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/06/plt-scheme-v42.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-655377273386641529") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/655377273386641529") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1795952077"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 1, 2009 at 3:50 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2242898397039029421") (published "2009-06-01T15:57:38.673-04:00") (updated "2009-06-01T15:57:38.673-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Kyle: You can check for updates from the help menu...") (post-content "Kyle: You can check for updates from the help menu, and this will also have an option to check for updates every some time.  When there is an update, you get the option of going to the website to download the new one.  (Making the actual update happen automatically would be pretty difficult...)") (link ((href "https://www.blogger.com/feeds/2080885971644496896/655377273386641529/comments/default/2242898397039029421") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/655377273386641529/comments/default/2242898397039029421") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/06/plt-scheme-v42.html?showComment=1243886258673#c2242898397039029421") (rel "alternate") (title "") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.barzilay.org/images/eli1.jpg") (width "28")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/06/plt-scheme-v42.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-655377273386641529") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/655377273386641529") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-311455247"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 1, 2009 at 3:57 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6626373069743663779") (published "2009-07-29T03:31:04.123-04:00") (updated "2009-07-29T03:31:04.123-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I tried to install the 4.2 version, and I got " "&" "quo...") (post-content "I tried to install the 4.2 version, and I got " "\"" "Error launching installer" "\"" ". I tried this multiple times from multiple mirrors. Doesn" 39 "t work." (br) "My system is a laptop with: Windows XP Professional Version 2002 Service Pack 3, Intel Core 2 Duo CPU, T7250 @ 2.00GHz, 2GB RAM.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/655377273386641529/comments/default/6626373069743663779") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/655377273386641529/comments/default/6626373069743663779") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/06/plt-scheme-v42.html?showComment=1248852664123#c6626373069743663779") (rel "alternate") (title "") (type "text/html"))) (author (name "y") (uri "https://www.blogger.com/profile/11820096112295097502") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/06/plt-scheme-v42.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-655377273386641529") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/655377273386641529") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1079236126"))) (gd:extendedProperty ((name "blogger.displayTime") (value "July 29, 2009 at 3:31 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7415522559258014431") (published "2009-07-29T18:37:58.783-04:00") (updated "2009-07-29T18:37:58.783-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Hi\n\nI installed drscheme 4.2 recently and everythi...") (post-content "Hi" (br) (br) "I installed drscheme 4.2 recently and everything was fine and working until I restarted my system and when I tried running the development environment again I get a strange error, Uninstalling/Reinstalling even to another location does not help. please help me, I tried looking for a location wherin temporary or configuration data are stored, but i couldnt find any, this error seems to be related with the splash screen:" (br) (br) (b "draw-bitmap in dc(%): expected argument of type (bitmap% object" ">" ") given #f" (br) (br) " === context ===" (br) "C:\\Users\\mehdi\\Documents\\PLT\\collects\\drscheme\\private\\drscheme-normal.ss:208:15") (br) (br) "I forgot, my OS is Vista Home Basic." (br) (br) "Thank you.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/655377273386641529/comments/default/7415522559258014431") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/655377273386641529/comments/default/7415522559258014431") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/06/plt-scheme-v42.html?showComment=1248907078783#c7415522559258014431") (rel "alternate") (title "") (type "text/html"))) (author (name "arcana") (uri "https://www.blogger.com/profile/18167305766755903074") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/06/plt-scheme-v42.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-655377273386641529") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/655377273386641529") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1046319930"))) (gd:extendedProperty ((name "blogger.displayTime") (value "July 29, 2009 at 6:37 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7391107196168229955") (published "2009-07-29T20:14:30.264-04:00") (updated "2009-07-29T20:14:30.264-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Ok I have found the bug...\n\nHow to explain this, 3...") (post-content "Ok I have found the bug..." (br) (br) "How to explain this, 30th of july is the buggy day... May be it" 39 "s because this is a special day, i" 39 "ve heard that drscheme" 39 "s splash screen shows information about the special days, and most likely, an icon or a bitmap is missing in there, that is why a " "\"" "false" "\"" " parameter is passed instead of a bitmap object." (br) (br) "However, I" 39 "ve taken a look at scheme-normal.ss, it seems that the special days are hard coded, unfortunately I" 39 "m not even an American so I" 39 "ve got no idea what special event is today!" (br) (br) "Anyway, sorry for disturbance !") (link ((href "https://www.blogger.com/feeds/2080885971644496896/655377273386641529/comments/default/7391107196168229955") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/655377273386641529/comments/default/7391107196168229955") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/06/plt-scheme-v42.html?showComment=1248912870264#c7391107196168229955") (rel "alternate") (title "") (type "text/html"))) (author (name "arcana") (uri "https://www.blogger.com/profile/18167305766755903074") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/06/plt-scheme-v42.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-655377273386641529") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/655377273386641529") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1046319930"))) (gd:extendedProperty ((name "blogger.displayTime") (value "July 29, 2009 at 8:14 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7773505100354418574") (published "2009-08-01T02:41:19.636-04:00") (updated "2009-08-01T02:41:19.636-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Hi, I have a Windows Laptop, and am getting " "&" "quot;...") (post-content "Hi, I have a Windows Laptop, and am getting " "\"" "Error launching installer" "\"" " for 4.2.1. My machine" 39 "s particulars are:" (br) "Microsoft Windows XP Professional" (br) "Version 2002 Service Pack 3" (br) "Dell Latitude D630" (br) "Intel Core 2 Duo CPU" (br) "T7250 @ 2.00GHz" (br) "1.99 GB of RAM") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3859338948523565949/comments/default/7773505100354418574") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3859338948523565949/comments/default/7773505100354418574") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/07/plt-scheme-v421.html?showComment=1249108879636#c7773505100354418574") (rel "alternate") (title "") (type "text/html"))) (author (name "y") (uri "https://www.blogger.com/profile/11820096112295097502") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/07/plt-scheme-v421.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3859338948523565949") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3859338948523565949") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1079236126"))) (gd:extendedProperty ((name "blogger.displayTime") (value "August 1, 2009 at 2:41 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8975935907236534914") (published "2009-08-30T13:13:13.016-04:00") (updated "2009-08-30T13:13:13.016-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "(Sorry about my non-native English and bad colloca...") (post-content "(Sorry about my non-native English and bad collocations.)" (br) (br) "Well, I think the biggest problem with the concept of modules coupled with the core is when we make this question to ourselves: " "\"" "what is really important to put on core? Is it module? Is it another thing else?" "\"" (br) (br) "Anyway, I think one great point of R6RS is about define Unicode as standard... Am I too wrong??") (link ((href "https://www.blogger.com/feeds/2080885971644496896/994848006948347841/comments/default/8975935907236534914") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/994848006948347841/comments/default/8975935907236534914") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/06/r6rs-is-perfect.html?showComment=1251652393016#c8975935907236534914") (rel "alternate") (title "") (type "text/html"))) (author (name "SpamKids") (uri "https://www.blogger.com/profile/14307956571228760995") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//3.bp.blogspot.com/_L3c6aqKZy2k/SWYxRZ19LVI/AAAAAAAAAUU/kRVaq6Z2xQc/S220-s32/SK.png") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/06/r6rs-is-perfect.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-994848006948347841") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/994848006948347841") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-655469685"))) (gd:extendedProperty ((name "blogger.displayTime") (value "August 30, 2009 at 1:13 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6696369508633278222") (published "2009-12-07T14:18:18.960-05:00") (updated "2009-12-07T14:18:18.960-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Why is the touch explicit? \n\nWhy don" "&" "#39;t you use...") (post-content "Why is the touch explicit? " (br) (br) "Why don" 39 "t you use future-strict primitives to force future values?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2650374273353885414/comments/default/6696369508633278222") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2650374273353885414/comments/default/6696369508633278222") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/12/futures-fine-grained-parallelism-in-plt.html?showComment=1260213498960#c6696369508633278222") (rel "alternate") (title "") (type "text/html"))) (author (name "matthias") (uri "https://www.blogger.com/profile/00000181081270224360") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.ccs.neu.edu/home/matthias/Images/felleisen1.jpg") (width "23")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/12/futures-fine-grained-parallelism-in-plt.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2650374273353885414") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2650374273353885414") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-56163577"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 7, 2009 at 2:18 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-870460587769693396") (published "2009-12-07T14:20:25.568-05:00") (updated "2009-12-07T14:20:25.568-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "One could build another layer on top of this one t...") (post-content "One could build another layer on top of this one to do things like that (and perhaps we should not have taken over the names " 39 "future" 39 " and " 39 "touch" 39 " and let a library like that have them)." (br) (br) "touch is explicit so that the runtime system primitives that depend on a particular context are well-defined (eg, exception handlers and continuation marks).") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2650374273353885414/comments/default/870460587769693396") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2650374273353885414/comments/default/870460587769693396") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/12/futures-fine-grained-parallelism-in-plt.html?showComment=1260213625568#c870460587769693396") (rel "alternate") (title "") (type "text/html"))) (author (name "Robby") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//people.cs.uchicago.edu/~robby/portrait-2006.jpg") (width "13")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/12/futures-fine-grained-parallelism-in-plt.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2650374273353885414") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2650374273353885414") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1090470180"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 7, 2009 at 2:20 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4790200523004836383") (published "2009-12-07T18:01:46.555-05:00") (updated "2009-12-07T18:01:46.555-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Will never versions have it enabled by default for...") (post-content "Will never versions have it enabled by default for the OSX package?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2650374273353885414/comments/default/4790200523004836383") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2650374273353885414/comments/default/4790200523004836383") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/12/futures-fine-grained-parallelism-in-plt.html?showComment=1260226906555#c4790200523004836383") (rel "alternate") (title "") (type "text/html"))) (author (name "Robert") (uri "https://www.blogger.com/profile/05513580456463140264") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/12/futures-fine-grained-parallelism-in-plt.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2650374273353885414") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2650374273353885414") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1123402806"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 7, 2009 at 6:01 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-870416012416562134") (published "2009-12-07T18:05:59.366-05:00") (updated "2009-12-07T18:05:59.366-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Eventually, yes. But it is easy to build under mac...") (post-content "Eventually, yes. But it is easy to build under mac os x. Just make sure you have the developer tool installed and then it is only a few simple commands in a Terminal window.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2650374273353885414/comments/default/870416012416562134") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2650374273353885414/comments/default/870416012416562134") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/12/futures-fine-grained-parallelism-in-plt.html?showComment=1260227159366#c870416012416562134") (rel "alternate") (title "") (type "text/html"))) (author (name "Robby") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//people.cs.uchicago.edu/~robby/portrait-2006.jpg") (width "13")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/12/futures-fine-grained-parallelism-in-plt.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2650374273353885414") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2650374273353885414") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1090470180"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 7, 2009 at 6:05 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1569813356691646935") (published "2009-12-07T18:31:17.086-05:00") (updated "2009-12-07T18:31:17.086-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Does that " "&" "quot;mess up" "&" "quot; anything with the pa...") (post-content "Does that " "\"" "mess up" "\"" " anything with the packaged installation?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2650374273353885414/comments/default/1569813356691646935") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2650374273353885414/comments/default/1569813356691646935") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/12/futures-fine-grained-parallelism-in-plt.html?showComment=1260228677086#c1569813356691646935") (rel "alternate") (title "") (type "text/html"))) (author (name "Robert") (uri "https://www.blogger.com/profile/05513580456463140264") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/12/futures-fine-grained-parallelism-in-plt.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2650374273353885414") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2650374273353885414") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1123402806"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 7, 2009 at 6:31 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2241449250613785873") (published "2009-12-07T18:39:21.913-05:00") (updated "2009-12-07T18:39:21.913-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "No. You can have as many versions as you want, com...") (post-content "No. You can have as many versions as you want, completely separate. (Double clicking in the finder will always choose one of the open drschemes; I haven" 39 "t figured out what the OS does when none of them are open.)") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2650374273353885414/comments/default/2241449250613785873") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2650374273353885414/comments/default/2241449250613785873") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/12/futures-fine-grained-parallelism-in-plt.html?showComment=1260229161913#c2241449250613785873") (rel "alternate") (title "") (type "text/html"))) (author (name "Robby") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//people.cs.uchicago.edu/~robby/portrait-2006.jpg") (width "13")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/12/futures-fine-grained-parallelism-in-plt.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2650374273353885414") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2650374273353885414") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1090470180"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 7, 2009 at 6:39 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8644641826200863214") (published "2009-12-20T07:11:12.798-05:00") (updated "2009-12-20T07:11:12.798-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "It seems to me that delay/thread in scheme/promise...") (post-content "It seems to me that delay/thread in scheme/promise has an analogous existing interface to a later forced-touched promise-future.  Outside the very important and appreciated implementation difference of having multiple CPUs, where does the analogy fall short enough to require a different set of functions?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2650374273353885414/comments/default/8644641826200863214") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2650374273353885414/comments/default/8644641826200863214") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/12/futures-fine-grained-parallelism-in-plt.html?showComment=1261311072798#c8644641826200863214") (rel "alternate") (title "") (type "text/html"))) (author (name "griffinish") (uri "https://www.blogger.com/profile/16994898111283078052") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/12/futures-fine-grained-parallelism-in-plt.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2650374273353885414") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2650374273353885414") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1322069881"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 20, 2009 at 7:11 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1460877733141968017") (published "2009-12-20T17:24:18.361-05:00") (updated "2009-12-20T17:24:18.361-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Well, parallelism is an important difference, of c...") (post-content "Well, parallelism is an important difference, of course (enough that warrants its own, separate api so programmers know what they are getting), but another difference is that with promises the computation won" 39 "t get " "\"" "frozen" "\"" " in the way that futures can get frozen.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2650374273353885414/comments/default/1460877733141968017") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2650374273353885414/comments/default/1460877733141968017") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/12/futures-fine-grained-parallelism-in-plt.html?showComment=1261347858361#c1460877733141968017") (rel "alternate") (title "") (type "text/html"))) (author (name "Robby") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//people.cs.uchicago.edu/~robby/portrait-2006.jpg") (width "13")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/12/futures-fine-grained-parallelism-in-plt.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2650374273353885414") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2650374273353885414") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1090470180"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 20, 2009 at 5:24 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4411220959991688186") (published "2009-12-23T10:35:05.131-05:00") (updated "2009-12-23T10:35:05.131-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Hellow. Could you please advice something like PLT...") (post-content "Hellow. Could you please advice something like PLT but for SBCL. Sorry for the oftopic.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3907084013741018564/comments/default/4411220959991688186") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3907084013741018564/comments/default/4411220959991688186") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/08/plt-modules-and-separate-compilation.html?showComment=1261582505131#c4411220959991688186") (rel "alternate") (title "") (type "text/html"))) (author (name "Dmitrenko Evgenij") (uri "https://www.blogger.com/profile/12015207008541337948") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/08/plt-modules-and-separate-compilation.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3907084013741018564") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3907084013741018564") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-658465250"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 23, 2009 at 10:35 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1474338011296869260") (published "2010-01-02T14:21:35.862-05:00") (updated "2010-01-02T14:21:35.862-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "You can also find the (german) course from TÃ¼binge...") (post-content "You can also find the (german) course from TÃ¼bingen (uses DrScheme) " (a ((href "http://timms.uni-tuebingen.de/Browser/Browser01.aspx?path=/Universit%C3%A4t+T%C3%BCbingen/Fakult%C3%A4t+f%C3%BCr+Informations-+und+Kognitionswissenschaften/Wilhelm-Schickard-Institut+f%C3%BCr+Informatik/Vorlesung+Informatik+1+WiSe+2008-2009/") (rel "nofollow")) "online") ".") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8205870831316099176/comments/default/1474338011296869260") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8205870831316099176/comments/default/1474338011296869260") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/01/scheme-videos-lectures-and-talks-thanks.html?showComment=1262460095862#c1474338011296869260") (rel "alternate") (title "") (type "text/html"))) (author (name "Roger Braun") (uri "https://www.blogger.com/profile/03906937593362610061") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/01/scheme-videos-lectures-and-talks-thanks.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8205870831316099176") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8205870831316099176") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1673781534"))) (gd:extendedProperty ((name "blogger.displayTime") (value "January 2, 2010 at 2:21 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5625467911592645575") (published "2010-01-03T03:43:19.140-05:00") (updated "2010-01-03T03:43:19.140-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "The Using PLT Scheme in the Game Industry: link se...") (post-content "The Using PLT Scheme in the Game Industry: link seems to be all in russian is that right?" (br) (br) "//olme") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8205870831316099176/comments/default/5625467911592645575") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8205870831316099176/comments/default/5625467911592645575") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/01/scheme-videos-lectures-and-talks-thanks.html?showComment=1262508199140#c5625467911592645575") (rel "alternate") (title "") (type "text/html"))) (author (name "Anders") (uri "https://www.blogger.com/profile/17812128425168326358") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/01/scheme-videos-lectures-and-talks-thanks.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8205870831316099176") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8205870831316099176") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-474378281"))) (gd:extendedProperty ((name "blogger.displayTime") (value "January 3, 2010 at 3:43 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6158186340791512543") (published "2010-01-03T12:12:57.849-05:00") (updated "2010-01-03T12:12:57.849-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Awesome.  Serialization is one of the things I" "&" "#39...") (post-content "Awesome.  Serialization is one of the things I" 39 "m looking for right now, so I" 39 "m glad my favorite distro is making it easier.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/6441102098879154048/comments/default/6158186340791512543") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/6441102098879154048/comments/default/6158186340791512543") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/06/serializable-closures-in-plt-scheme.html?showComment=1262538777849#c6158186340791512543") (rel "alternate") (title "") (type "text/html"))) (author (name "Zachary") (uri "https://www.blogger.com/profile/06055515765180704709") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/06/serializable-closures-in-plt-scheme.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-6441102098879154048") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/6441102098879154048") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-42421346"))) (gd:extendedProperty ((name "blogger.displayTime") (value "January 3, 2010 at 12:12 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8653031257032402519") (published "2010-01-22T11:13:20.119-05:00") (updated "2010-01-22T11:13:20.119-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Ok, so here is a try to create a keybinding to pus...") (post-content "Ok, so here is a try to create a keybinding to push a sexp to the interaction windows (I" 39 "m not sure I will personally use this though):" (br) (br) "In " "\"" "keys.ss" "\"" " that defines my DrScheme keybindings, I bind " "\"" "c:e" "\"" " with a function that takes an editor and an event." (br) "Then I use:" (br) "(send (send editor get-keymap) call-function " "\"" "select-backward-sexp" "\"" " editor event #f)" (br) "and calls alike with " "\"" "shift-focus" "\"" ", " "\"" "copy-clipboard" "\"" ", ..." (br) (br) "The problem is once " "\"" "shift-focus" "\"" " has been called, the focused editor has changed, but I don" 39 "t know what it is, so I can" 39 "t call " "\"" "paste-clipboard" "\"" " on the new editor (the interaction window in fact, which I" 39 "m not sure is really an editor)." (br) "So how do I get the editor under focus? Or how do I get the interactions editor?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/8653031257032402519") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/8653031257032402519") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html?showComment=1264176800119#c8653031257032402519") (rel "alternate") (title "") (type "text/html"))) (author (name "Laurent") (uri "https://www.blogger.com/profile/18317864132967373178") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8595329905636585805") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8595329905636585805") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-437702566"))) (gd:extendedProperty ((name "blogger.displayTime") (value "January 22, 2010 at 11:13 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8030956123270548537") (published "2010-01-27T22:25:42.975-05:00") (updated "2010-01-27T22:30:44.060-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I know this is an old, and probably dead thread, b...") (post-content "I know this is an old, and probably dead thread, but I did want to respond to one post." (br) (br) "----Quote----" (br) "Robby said..." (br) "..." (br) "    But, in any case, these abstract arguments (either way) ultimately need to be backed up with real programs. Let me encourage you once again to provide some to back up your arguments. We have found none in a large body of code. Have you investigated a body of code and found some?" (br) "    December 16, 2007 6:56 PM " (br) "----End Quote----" (br) (br) "Over 25 years ago, I used set-cdr! in a PC Scheme implementation of N-Queens for an AI class.  Besides using set-cdr!, calls to move a queen were properly tail recursive.  I noticed the PLT Scheme benchmark didn" 39 "t use tail recursion for moves, so I modified my code to match the benchmark.  The following times compare the improvements for just using set-cdr! and for using set-cdr! combined with tail recursion:" (br) (br) "PLT Scheme Benchmark:" (br) ">" " (begin (collect-garbage) (time (nqueens 15)))" (br) "cpu time: 158899 real time: 158982 gc time: 16920" (br) "2279184" (br) "(execution time = cpu time - gc time = 142.0s)" (br) (br) "set-cdr! version:" (br) ">" " (begin (collect-garbage) (time (N-Queens 15)))" (br) "cpu time: 138616 real time: 138787 gc time: 3286" (br) "2279184" (br) "(execution time = cpu time - gc time = 135.3s)" (br) (br) "set-cdr! plus properly tail recursive moves:" (br) ">" " (begin (collect-garbage) (time (N-Queens 15)))" (br) "cpu time: 119845 real time: 120061 gc time: 3284" (br) "2279184" (br) "(execution time = cpu time - gc time = 116.5s)" (br) (br) "As you can see, using set-cdr! improved overall cpu time by about the same amount as using properly tail recursive moves.  The major performance improvement for set-cdr! came from reduced garbage collection.  N-Queens is just one example of back-tracking used to traverse a search space.  Any time the search space can be pruned before the back-tracking call is made, and restored on return from the call, set-cdr! should yield improved performance.  It" 39 "s also very localized, as shown by the following code snippet:" (br) (br) "(else" (br) "..(set-mcdr! prior-column (mcdr column))" (br) "..(begin0" (br) "....(place" "&" "move safe-columns" (br) "...........(mcdr safe-columns) safe-columns" (br) "...........(cons (mcar column) solution) count)" (br) "....(set-mcdr! prior-column column))))))" (br) (br) "In the above example, prior-column and column traverse the list, while safe-columns always points to it" 39 "s beginning.  The list is never copied, just manipulated with set-mcdr! as the search space is traversed.  Also, the list goes from 0 to N to simplify handling prior-column." (br) (br) "Gene Snider") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/8030956123270548537") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/8030956123270548537") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html?showComment=1264649142975#c8030956123270548537") (rel "alternate") (title "") (type "text/html"))) (author (name "Gene Snider") (uri "https://www.blogger.com/profile/00423361760377955988") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1842888151218385802") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1842888151218385802") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1625356294"))) (gd:extendedProperty ((name "blogger.displayTime") (value "January 27, 2010 at 10:25 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1920270734137092392") (published "2010-01-29T16:42:24.576-05:00") (updated "2010-01-29T16:42:24.576-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Could it be possible to add Guile 1.9.7 to that li...") (post-content "Could it be possible to add Guile 1.9.7 to that list?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8793911366542740014/comments/default/1920270734137092392") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8793911366542740014/comments/default/1920270734137092392") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/01/benchmarks.html?showComment=1264801344576#c1920270734137092392") (rel "alternate") (title "") (type "text/html"))) (author (name "dales@vxitech.com") (uri "https://www.blogger.com/profile/16735009223230596858") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/01/benchmarks.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8793911366542740014") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8793911366542740014") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1700341608"))) (gd:extendedProperty ((name "blogger.displayTime") (value "January 29, 2010 at 4:42 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2590810965500309350") (published "2010-01-29T21:16:46.931-05:00") (updated "2010-01-29T21:16:46.931-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Although I don" "&" "#39;t want to stay in the benchmark...") (post-content "Although I don" 39 "t want to stay in the benchmark-running business, Guile 1.9.7 does seem to be much faster than 1.8.7. So, I" 39 "ve replaced 1.8.7 with 1.9.7 in the benchmark results.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8793911366542740014/comments/default/2590810965500309350") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8793911366542740014/comments/default/2590810965500309350") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/01/benchmarks.html?showComment=1264817806931#c2590810965500309350") (rel "alternate") (title "") (type "text/html"))) (author (name "Matthew Flatt") (uri "https://www.blogger.com/profile/03369511886823036667") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/01/benchmarks.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8793911366542740014") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8793911366542740014") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1300564163"))) (gd:extendedProperty ((name "blogger.displayTime") (value "January 29, 2010 at 9:16 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2625665530903391736") (published "2010-01-30T08:14:13.955-05:00") (updated "2010-01-30T08:14:13.955-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Thanks for adding Guile 1.9.7. I wonder though, di...") (post-content "Thanks for adding Guile 1.9.7. I wonder though, did you include the runtime for the first Guile run? Guile will compile files the first time they" 39 "re run, and then used the cached object file later." (br) (br) "I ask because my old slow laptop is getting better times than the ones you list. Perhaps you inadvertantly included that first compilation time." (br) (br) "In any case, congrats on those great PLT results! :)" (br) (br) "Happy hacking," (br) (br) "Andy") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8793911366542740014/comments/default/2625665530903391736") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8793911366542740014/comments/default/2625665530903391736") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/01/benchmarks.html?showComment=1264857253955#c2625665530903391736") (rel "alternate") (title "") (type "text/html"))) (author (name "Andy Wingo") (uri "https://www.blogger.com/profile/02844056561982747723") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/01/benchmarks.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8793911366542740014") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8793911366542740014") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-633201543"))) (gd:extendedProperty ((name "blogger.displayTime") (value "January 30, 2010 at 8:14 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1576679861444363420") (published "2010-01-30T11:10:13.894-05:00") (updated "2010-01-30T11:10:13.894-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I don" "&" "#39;t think that compilation time is include...") (post-content "I don" 39 "t think that compilation time is included, since run time is measured within the program using `(times)" 39 ". Also, clearing out the cache before running doesn" 39 "t seem to give different results than running a second time.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8793911366542740014/comments/default/1576679861444363420") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8793911366542740014/comments/default/1576679861444363420") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/01/benchmarks.html?showComment=1264867813894#c1576679861444363420") (rel "alternate") (title "") (type "text/html"))) (author (name "Matthew Flatt") (uri "https://www.blogger.com/profile/03369511886823036667") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/01/benchmarks.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8793911366542740014") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8793911366542740014") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1300564163"))) (gd:extendedProperty ((name "blogger.displayTime") (value "January 30, 2010 at 11:10 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-256284421225173209") (published "2010-01-30T14:22:58.538-05:00") (updated "2010-01-30T14:22:58.538-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Good point regarding the use of `time" "&" "#39;. Ah wel...") (post-content "Good point regarding the use of `time" 39 ". Ah well, a Lisp is never finished, is it. Thanks for the response, and happy hacking :)") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8793911366542740014/comments/default/256284421225173209") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8793911366542740014/comments/default/256284421225173209") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/01/benchmarks.html?showComment=1264879378538#c256284421225173209") (rel "alternate") (title "") (type "text/html"))) (author (name "Andy Wingo") (uri "https://www.blogger.com/profile/02844056561982747723") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/01/benchmarks.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8793911366542740014") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8793911366542740014") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-633201543"))) (gd:extendedProperty ((name "blogger.displayTime") (value "January 30, 2010 at 2:22 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1904653401710379918") (published "2010-02-12T03:17:08.506-05:00") (updated "2010-02-12T03:36:09.294-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "This is very, very, shiny. I might use this in my ...") (post-content "This is very, very, shiny. I might use this in my master" 39 "s thesis.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/6441102098879154048/comments/default/1904653401710379918") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/6441102098879154048/comments/default/1904653401710379918") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/06/serializable-closures-in-plt-scheme.html?showComment=1265962628506#c1904653401710379918") (rel "alternate") (title "") (type "text/html"))) (author (name "Alex") (uri "https://www.blogger.com/profile/09949746500664734044") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/06/serializable-closures-in-plt-scheme.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-6441102098879154048") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/6441102098879154048") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1065144182"))) (gd:extendedProperty ((name "blogger.displayTime") (value "February 12, 2010 at 3:17 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2959812788804508430") (published "2010-03-01T00:04:47.912-05:00") (updated "2010-03-01T00:04:47.912-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Okay, I" "&" "#39;ll give it a go on the scale you indic...") (post-content "Okay, I" 39 "ll give it a go on the scale you indicate: ... 282 billion? (9^12)") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8557185805751063148/comments/default/2959812788804508430") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8557185805751063148/comments/default/2959812788804508430") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/02/dags-vs-trees.html?showComment=1267419887912#c2959812788804508430") (rel "alternate") (title "") (type "text/html"))) (author (name "Kohath") (uri "https://www.blogger.com/profile/12242792031255007733") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/02/dags-vs-trees.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8557185805751063148") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8557185805751063148") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1355730239"))) (gd:extendedProperty ((name "blogger.displayTime") (value "March 1, 2010 at 12:04 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-9188992745818858930") (published "2010-03-02T06:47:53.712-05:00") (updated "2010-03-02T06:47:53.712-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Sadly, not close. Lets make this easier. If you" "&" "#3...") (post-content "Sadly, not close. Lets make this easier. If you" 39 "re within a trillion of the correct answer, you win.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8557185805751063148/comments/default/9188992745818858930") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8557185805751063148/comments/default/9188992745818858930") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/02/dags-vs-trees.html?showComment=1267530473712#c9188992745818858930") (rel "alternate") (title "") (type "text/html"))) (author (name "Robby") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//people.cs.uchicago.edu/~robby/portrait-2006.jpg") (width "13")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/02/dags-vs-trees.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8557185805751063148") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8557185805751063148") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1090470180"))) (gd:extendedProperty ((name "blogger.displayTime") (value "March 2, 2010 at 6:47 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4042734768151221460") (published "2010-03-03T07:23:59.875-05:00") (updated "2010-03-03T07:23:59.875-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "There are 102,295,446,100,979 nodes. Which is a lo...") (post-content "There are 102,295,446,100,979 nodes. Which is a lot. If we somehow used only a single pixel per node (at the standard 72dpi) that would require a monitor that was more that 2 miles square to display the entire thing.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8557185805751063148/comments/default/4042734768151221460") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8557185805751063148/comments/default/4042734768151221460") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/02/dags-vs-trees.html?showComment=1267619039875#c4042734768151221460") (rel "alternate") (title "") (type "text/html"))) (author (name "Robby") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//people.cs.uchicago.edu/~robby/portrait-2006.jpg") (width "13")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/02/dags-vs-trees.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8557185805751063148") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8557185805751063148") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1090470180"))) (gd:extendedProperty ((name "blogger.displayTime") (value "March 3, 2010 at 7:23 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6762314692620920298") (published "2010-03-09T03:41:11.519-05:00") (updated "2010-03-09T03:41:11.519-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Also curious if you drew the diagram in PLT-Scheme...") (post-content "Also curious if you drew the diagram in PLT-Scheme and how. :)") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3811154831217235895/comments/default/6762314692620920298") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3811154831217235895/comments/default/6762314692620920298") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/03/talk-at-flourish.html?showComment=1268124071519#c6762314692620920298") (rel "alternate") (title "") (type "text/html"))) (author (name "Paulo Matos") (uri "https://www.blogger.com/profile/14230665265989619245") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/03/talk-at-flourish.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3811154831217235895") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3811154831217235895") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-29901559"))) (gd:extendedProperty ((name "blogger.displayTime") (value "March 9, 2010 at 3:41 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7519834328281307480") (published "2010-03-09T07:23:11.333-05:00") (updated "2010-03-09T07:23:11.333-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I wrote a plt script to get the data and then drop...") (post-content "I wrote a plt script to get the data and then dropped it into twopi (a part of graphviz) to get the layout information for the graph but actually drew it using slideshow (since I wanted to tweak the drawing a little bit)") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3811154831217235895/comments/default/7519834328281307480") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3811154831217235895/comments/default/7519834328281307480") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/03/talk-at-flourish.html?showComment=1268137391333#c7519834328281307480") (rel "alternate") (title "") (type "text/html"))) (author (name "Robby") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//people.cs.uchicago.edu/~robby/portrait-2006.jpg") (width "13")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/03/talk-at-flourish.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3811154831217235895") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3811154831217235895") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1090470180"))) (gd:extendedProperty ((name "blogger.displayTime") (value "March 9, 2010 at 7:23 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2595343578721413150") (published "2010-04-02T22:04:02.693-04:00") (updated "2010-04-02T22:04:02.693-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Just wondering...does the future hold a 64-bit ver...") (post-content "Just wondering...does the future hold a 64-bit version for OSX?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2610566504959049790/comments/default/2595343578721413150") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2610566504959049790/comments/default/2595343578721413150") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/04/plt-scheme-v425.html?showComment=1270260242693#c2595343578721413150") (rel "alternate") (title "") (type "text/html"))) (author (name "Robert") (uri "https://www.blogger.com/profile/05513580456463140264") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/04/plt-scheme-v425.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2610566504959049790") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2610566504959049790") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1123402806"))) (gd:extendedProperty ((name "blogger.displayTime") (value "April 2, 2010 at 10:04 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4751590959093246865") (published "2010-04-14T17:01:12.269-04:00") (updated "2010-04-14T17:19:39.179-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Way to go PLT Scheme 4.x.  You" "&" "#39;ve just made it...") (post-content "Way to go PLT Scheme 4.x.  You" 39 "ve just made it impossible for me to use your Scheme to work through the exercises in The Scheme Programming Language (4th edition) -- see for example Exercise 2.9.3 on page 55." (br) (br) "As if learning a language like Scheme isn" 39 "t hard enough for us poor suckers trying to break out of the imperative/object world.  Do you really have to add yet more beautiful impediments?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/4751590959093246865") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/4751590959093246865") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html?showComment=1271278872269#c4751590959093246865") (rel "alternate") (title "") (type "text/html"))) (author (name "Mike Taylor") (uri "https://www.blogger.com/profile/06039663158335543317") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//www.miketaylor.org.uk/me.jpeg") (width "24")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1842888151218385802") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1842888151218385802") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-216225524"))) (gd:extendedProperty ((name "blogger.displayTime") (value "April 14, 2010 at 5:01 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1033332558673957124") (published "2010-05-13T18:35:41.494-04:00") (updated "2010-05-13T19:05:14.622-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Mike, mcons, mcar, mcdr, set-mcar!, and set-mcdr! ...") (post-content "Mike, mcons, mcar, mcdr, set-mcar!, and set-mcdr! are provided by scheme already.  Just add (require scheme/mpair) to your definitions to get more mutable pair functionality.  You will need to use slightly different function names, e.g. mlist, mlength, etc.  The /scheme/mpair module is well documented." (br) (br) "When I first wrote N-Queens, returning the solutions was a requirement.  So naturally I built the solutions with cons for later return.  After my earlier post, I realized that two additional lines of code would eliminate all cons operations.  Now, it doesn" 39 "t garbage collect until N = 17:" (br) (br) ">" " (begin (collect-garbage) (time (N-Queens 17)))" (br) "cpu time: 6670485 real time: 6702624 gc time: 618" (br) "95815104" (br) "618ms time in gc while taking 1 hour and 51 minutes to determine 95,815,104 solutions isn" 39 "t bad." (br) (br) "The key is:" (br) "(else" (br) "..(set-mcdr! prior-column (mcdr column))                    ..(set-mcdr! column solution)" (br) "..(begin0" (br) "....(next-queen safe-columns column new-count)" (br) "....(set-mcdr! column (mcdr prior-column))" (br) "....(set-mcdr! prior-column column)))" (br) (br) "Gene") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/1033332558673957124") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1842888151218385802/comments/default/1033332558673957124") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html?showComment=1273790141494#c1033332558673957124") (rel "alternate") (title "") (type "text/html"))) (author (name "Gene Snider") (uri "https://www.blogger.com/profile/00423361760377955988") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/11/getting-rid-of-set-car-and-set-cdr.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1842888151218385802") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1842888151218385802") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1625356294"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 13, 2010 at 6:35 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1649652746046099017") (published "2010-06-08T08:41:50.025-04:00") (updated "2010-06-08T08:41:50.025-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Why call it Racket?") (post-content "Why call it Racket?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8429284126611343134/comments/default/1649652746046099017") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8429284126611343134/comments/default/1649652746046099017") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/06/plt-is-happy-to-announce-release-of.html?showComment=1276000910025#c1649652746046099017") (rel "alternate") (title "") (type "text/html"))) (author (name "Steve Knight") (uri "https://www.blogger.com/profile/05585380688950757792") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/06/plt-is-happy-to-announce-release-of.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8429284126611343134") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8429284126611343134") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1656757732"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 8, 2010 at 8:41 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-9211690885481350258") (published "2010-06-08T09:07:34.065-04:00") (updated "2010-06-08T09:07:34.065-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "<" "a href=\"http://www.racket-lang.org/new-name.html\"...") (post-content (a ((href "http://www.racket-lang.org/new-name.html") (rel "nofollow")) "http://www.racket-lang.org/new-name.html")) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8429284126611343134/comments/default/9211690885481350258") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8429284126611343134/comments/default/9211690885481350258") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/06/plt-is-happy-to-announce-release-of.html?showComment=1276002454065#c9211690885481350258") (rel "alternate") (title "") (type "text/html"))) (author (name "Robby") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//people.cs.uchicago.edu/~robby/portrait-2006.jpg") (width "13")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/06/plt-is-happy-to-announce-release-of.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8429284126611343134") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8429284126611343134") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1090470180"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 8, 2010 at 9:07 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2953112872696787803") (published "2010-06-08T10:07:04.211-04:00") (updated "2010-06-08T10:07:04.211-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I don" "&" "#39;t mind the name change per se, but typin...") (post-content "I don" 39 "t mind the name change per se, but typing " "\"" "racket" "\"" " in Google understandably returns links to tennis and sports. :-) (Yeah, I know " "\"" "plt racket" "\"" " works better.)" (br) (br) "Now if they just decide to add a grid widget and cross-platform ODBC support, I" 39 "d be a happy camper...") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8429284126611343134/comments/default/2953112872696787803") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8429284126611343134/comments/default/2953112872696787803") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/06/plt-is-happy-to-announce-release-of.html?showComment=1276006024211#c2953112872696787803") (rel "alternate") (title "") (type "text/html"))) (author (name "robwalker01") (uri "https://www.blogger.com/profile/01360933806808064322") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/06/plt-is-happy-to-announce-release-of.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8429284126611343134") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8429284126611343134") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1601929761"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 8, 2010 at 10:07 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8556485447445021908") (published "2010-06-08T17:26:09.913-04:00") (updated "2010-06-08T17:26:09.913-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Besides the name, what is diferent from version 4....") (post-content "Besides the name, what is diferent from version 4.5?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8429284126611343134/comments/default/8556485447445021908") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8429284126611343134/comments/default/8556485447445021908") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/06/plt-is-happy-to-announce-release-of.html?showComment=1276032369913#c8556485447445021908") (rel "alternate") (title "") (type "text/html"))) (author (name "claudio.naoto") (uri "https://www.blogger.com/profile/10271248471756542186") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/06/plt-is-happy-to-announce-release-of.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8429284126611343134") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8429284126611343134") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1470165073"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 8, 2010 at 5:26 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7956631640373929942") (published "2010-06-08T17:49:07.580-04:00") (updated "2010-06-08T17:49:07.580-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "There were the usual bug fixes here and there, but...") (post-content "There were the usual bug fixes here and there, but you" 39 "re right that this release cycle was mostly the work of renaming things. (4.2.5 was the previous release, tho).") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8429284126611343134/comments/default/7956631640373929942") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8429284126611343134/comments/default/7956631640373929942") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/06/plt-is-happy-to-announce-release-of.html?showComment=1276033747580#c7956631640373929942") (rel "alternate") (title "") (type "text/html"))) (author (name "Robby") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//people.cs.uchicago.edu/~robby/portrait-2006.jpg") (width "13")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/06/plt-is-happy-to-announce-release-of.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8429284126611343134") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8429284126611343134") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1090470180"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 8, 2010 at 5:49 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-452998328816345503") (published "2010-06-17T22:43:22.459-04:00") (updated "2010-06-17T22:43:22.459-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Racket is just an organized scheme. The name still...") (post-content "Racket is just an organized scheme. The name still brings up connotations of something nefarious. What is in a name? I" 39 "m good with it if it continues to run on a proper OpenBSD platform. Will Apple let something, so expressive as âRacketâ,  the honor of being available from their apps store, for use with the iPad? Now that would be the app to write, however, unless Apple has changed their minds, no interpretive languages, that I" 39 "m aware of, have made it to iTunes. I wonder if they would allow a syntax informed code editor to be offered for the iPad. If they actually could keep folks from hacking their product, then they might have my support; but they can" 39 "t put enough restraints on their SDK, to adequatelty maintain system security, so why bother with the silly attempts at maintaining control. I believe the answer can be seen with clarity if one looks at a five year chart of Apple stock. If you wish to call it Racket, then let" 39 "s make some noise with it.  You really do need to offer for sale Racket logo" 39 "d posters, cups, t-shirts, baseball hats, and stickers for my four year old son." (br) (br) "--kyle") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8429284126611343134/comments/default/452998328816345503") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8429284126611343134/comments/default/452998328816345503") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/06/plt-is-happy-to-announce-release-of.html?showComment=1276829002459#c452998328816345503") (rel "alternate") (title "") (type "text/html"))) (author (name "Kyle Smith") (uri "https://www.blogger.com/profile/05673570688024190864") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//i202.photobucket.com/albums/aa98/airfoil/KyleWithAmphibico.jpg") (width "20")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/06/plt-is-happy-to-announce-release-of.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8429284126611343134") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8429284126611343134") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-58301530"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 17, 2010 at 10:43 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2032075193661819956") (published "2010-08-06T19:39:22.553-04:00") (updated "2010-08-06T19:39:22.553-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Can you please add a note to the download page whe...") (post-content "Can you please add a note to the download page when a compilable linux source is available?  And while you" 39 "re testing, try making an rpm with shared libraries enabled.  I" 39 "ve been trying to do that since 4.1.2 using the Fedora spec file, and mzscheme always seg faults." (br) (br) "Thanks," (br) "Gene") (link ((href "https://www.blogger.com/feeds/2080885971644496896/6909673633196173269/comments/default/2032075193661819956") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/6909673633196173269/comments/default/2032075193661819956") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/08/racket-v501.html?showComment=1281137962553#c2032075193661819956") (rel "alternate") (title "") (type "text/html"))) (author (name "Gene Snider") (uri "https://www.blogger.com/profile/00423361760377955988") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/08/racket-v501.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-6909673633196173269") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/6909673633196173269") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1625356294"))) (gd:extendedProperty ((name "blogger.displayTime") (value "August 6, 2010 at 7:39 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1971934839878880639") (published "2010-08-14T19:39:02.818-04:00") (updated "2010-08-14T19:39:02.818-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Thank you very much!  Racket 5.0.1 successfully bu...") (post-content "Thank you very much!  Racket 5.0.1 successfully builds an rpm with shared libraries enabled on Fedora 14.  Now to get the package maintainer up to speed." (br) (br) "Gene") (link ((href "https://www.blogger.com/feeds/2080885971644496896/6909673633196173269/comments/default/1971934839878880639") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/6909673633196173269/comments/default/1971934839878880639") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/08/racket-v501.html?showComment=1281829142818#c1971934839878880639") (rel "alternate") (title "") (type "text/html"))) (author (name "Gene Snider") (uri "https://www.blogger.com/profile/00423361760377955988") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/08/racket-v501.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-6909673633196173269") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/6909673633196173269") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1625356294"))) (gd:extendedProperty ((name "blogger.displayTime") (value "August 14, 2010 at 7:39 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5445426869811850172") (published "2010-09-15T16:55:31.953-04:00") (updated "2010-09-15T16:55:31.953-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "&" "gt; The typechecker can figure out from the use o...") (post-content ">" " The typechecker can figure out from the use of number? that the occurrence of x is always going to be a number." (br) (br) "Presumably that should be " "\"" "the second occurrence of x" "\"" "?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3502770032653104859/comments/default/5445426869811850172") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3502770032653104859/comments/default/5445426869811850172") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/09/extending-typed-racket-part-1.html?showComment=1284584131953#c5445426869811850172") (rel "alternate") (title "") (type "text/html"))) (author (name "alexey-rom") (uri "http://alexey-rom.livejournal.com/") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img1.blogblog.com/img/openid16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/09/extending-typed-racket-part-1.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3502770032653104859") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3502770032653104859") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1157963941"))) (gd:extendedProperty ((name "blogger.displayTime") (value "September 15, 2010 at 4:55 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1696309612746771604") (published "2010-11-02T19:06:27.826-04:00") (updated "2010-11-02T19:06:27.826-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Awesome sauce. Can" "&" "#39;t wait to try it out!\n\nI ca...") (post-content "Awesome sauce. Can" 39 "t wait to try it out!" (br) (br) "I came across racket a couple of weeks ago when a link to your site came up on HN." (br) (br) "This is some seriously great kit you" 39 "ve put together. I" 39 "m having a lot of fun with this language. Coming from CL, it" 39 "s actually a rather pleasant transition. Definitely a step-up from the Python/C++ I do at my day job." (br) (br) "Keep up the good work! :)") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1382320702984482359/comments/default/1696309612746771604") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1382320702984482359/comments/default/1696309612746771604") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/10/two-state-solution-native-and.html?showComment=1288739187826#c1696309612746771604") (rel "alternate") (title "") (type "text/html"))) (author (name "j_king") (uri "https://www.blogger.com/profile/09068573729010320573") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/10/two-state-solution-native-and.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1382320702984482359") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1382320702984482359") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1032047794"))) (gd:extendedProperty ((name "blogger.displayTime") (value "November 2, 2010 at 7:06 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2570917914398528740") (published "2010-12-08T15:18:44.946-05:00") (updated "2010-12-08T15:18:44.946-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "This is fantastic!  Good show!") (post-content "This is fantastic!  Good show!") (link ((href "https://www.blogger.com/feeds/2080885971644496896/149573500831144101/comments/default/2570917914398528740") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/149573500831144101/comments/default/2570917914398528740") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/12/racket-version-5.html?showComment=1291839524946#c2570917914398528740") (rel "alternate") (title "") (type "text/html"))) (author (name "steck") (uri "https://www.blogger.com/profile/13416750891822431224") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/12/racket-version-5.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-149573500831144101") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/149573500831144101") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1284969587"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 8, 2010 at 3:18 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4638967598315596689") (published "2010-12-08T16:59:10.727-05:00") (updated "2010-12-08T16:59:10.727-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "There is a problem on Windows Vista Professional x...") (post-content "There is a problem on Windows Vista Professional x64:" (br) (br) "ffi-obj: couldn" 39 "t get " "\"" "GetWindowLongPtrW" "\"" " from " "\"" "user32.dll" "\"" " (The specified proce" (br) "dure could not be found.; errno=127)" (br) (br) " === context ===" (br) "D:\\p\\racket\\collects\\ffi\\unsafe.rkt:176:2: get-ffi-obj*" (br) "D:\\p\\racket\\collects\\mred\\private\\wx\\win32\\utils.rkt: [running body]" (br) "D:\\p\\racket\\collects\\mred\\private\\wx\\win32\\sound.rkt: [traversing imports]" (br) "D:\\p\\racket\\collects\\mred\\private\\wx\\win32\\procs.rkt: [traversing imports]" (br) "D:\\p\\racket\\collects\\mred\\private\\wx\\common\\cursor.rkt: [traversing imports]" (br) "D:\\p\\racket\\collects\\mred\\private\\kernel.rkt: [traversing imports]" (br) "D:\\p\\racket\\collects\\mred\\private\\check.rkt: [traversing imports]" (br) "D:\\p\\racket\\collects\\mred\\mred.rkt: [traversing imports]" (br) "D:\\p\\racket\\collects\\mred\\main.rkt: [traversing imports]" (br) "D:\\p\\racket\\collects\\racket\\gui\\base.rkt: [traversing imports]" (br) "D:\\p\\racket\\collects\\drracket\\drracket.rkt: [traversing imports]" (br) (br) (br) "[Exited. Close box or Ctrl-C closes the console.]") (link ((href "https://www.blogger.com/feeds/2080885971644496896/149573500831144101/comments/default/4638967598315596689") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/149573500831144101/comments/default/4638967598315596689") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/12/racket-version-5.html?showComment=1291845550727#c4638967598315596689") (rel "alternate") (title "") (type "text/html"))) (author (name "malkia") (uri "https://www.blogger.com/profile/07408170618420648277") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/12/racket-version-5.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-149573500831144101") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/149573500831144101") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1559755232"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 8, 2010 at 4:59 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-520500595872803108") (published "2010-12-08T17:46:16.709-05:00") (updated "2010-12-08T17:46:16.709-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "malkia --- thanks for the report. I really should ...") (post-content "malkia --- thanks for the report. I really should have checked whether our latest build was in good shape before posting. It turns out that this bug has been fixed, but machine-configuration issues have prevented a new build from completing since Sunday. We" 39 "ll get a working Windows build up soon.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/149573500831144101/comments/default/520500595872803108") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/149573500831144101/comments/default/520500595872803108") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/12/racket-version-5.html?showComment=1291848376709#c520500595872803108") (rel "alternate") (title "") (type "text/html"))) (author (name "Matthew Flatt") (uri "https://www.blogger.com/profile/03369511886823036667") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/12/racket-version-5.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-149573500831144101") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/149573500831144101") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1300564163"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 8, 2010 at 5:46 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5820532127063846567") (published "2010-12-08T19:37:04.220-05:00") (updated "2010-12-08T19:37:04.220-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "How did " "&" "quot;delimited continuations [] help work...") (post-content "How did " "\"" "delimited continuations [] help work around those limitations" "\"" "?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/149573500831144101/comments/default/5820532127063846567") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/149573500831144101/comments/default/5820532127063846567") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/12/racket-version-5.html?showComment=1291855024220#c5820532127063846567") (rel "alternate") (title "") (type "text/html"))) (author (name "grant rettke") (uri "https://www.blogger.com/profile/09439997834215273665") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_NaL_QCOmC2s/SU59EVByZ2I/AAAAAAAAABE/WK5EiDdNawY/S220-s32/GrantRettkeBC2MKE-HEADSHOT.png") (width "26")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/12/racket-version-5.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-149573500831144101") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/149573500831144101") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1104808594"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 8, 2010 at 7:37 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-937057812546669978") (published "2010-12-09T01:51:59.642-05:00") (updated "2010-12-09T01:51:59.642-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "When you said that event loop were insisting on th...") (post-content "When you said that event loop were insisting on there only being one per process, were you thinking of GTK or only Mac/Win? AFAIK you can have multiple glib event loops without issue. You typically have one per thread, but that" 39 "s not the same thing as one per process.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/149573500831144101/comments/default/937057812546669978") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/149573500831144101/comments/default/937057812546669978") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/12/racket-version-5.html?showComment=1291877519642#c937057812546669978") (rel "alternate") (title "") (type "text/html"))) (author (name "joseph") (uri "http://joseph.garvin.myvidoop.com/") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img1.blogblog.com/img/openid16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/12/racket-version-5.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-149573500831144101") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/149573500831144101") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-81439110"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 9, 2010 at 1:51 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4693413257034319945") (published "2010-12-09T07:28:26.349-05:00") (updated "2010-12-09T07:28:26.349-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Delimited continuations help when a particular cal...") (post-content "Delimited continuations help when a particular callback must be executed before further events are handled. For example, while you drag a scroll thumb on some platforms, the toolbox is in charge of the event loop; if handling a scroll-changed event calls code that takes forever, then the whole GUI system becomes stuck. Delimited continuations let Racket call arbitrary code to handle the scroll event, and if it doesn" 39 "t complete fast enough, a continuation is captured and resumed sometime later, allowing the GUI to partially respond meanwhile. This use of delimited continuations is similar to a use to implement threads, but without facets of threads (such as thread-specific data) that would get in the way.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/149573500831144101/comments/default/4693413257034319945") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/149573500831144101/comments/default/4693413257034319945") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/12/racket-version-5.html?showComment=1291897706349#c4693413257034319945") (rel "alternate") (title "") (type "text/html"))) (author (name "Matthew Flatt") (uri "https://www.blogger.com/profile/03369511886823036667") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/12/racket-version-5.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-149573500831144101") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/149573500831144101") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1300564163"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 9, 2010 at 7:28 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-156890754983978695") (published "2010-12-09T07:53:12.244-05:00") (updated "2010-12-09T07:53:12.244-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "On one event loop per process: I was thinking of C...") (post-content "On one event loop per process: I was thinking of Cocoa and Gtk. Maybe I" 39 "m wrong about Gtk. I know that glib supports multiple event loops, but my impression was that the generality isn" 39 "t preserved through the Gtk layer. I couldn" 39 "t get multiple event loops to work in Gtk, and I got the impression from the docs and web searches that it couldn" 39 "t work, but I" 39 "d welcome a pointer to a little example showing a program with multiple Gtk event loops.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/149573500831144101/comments/default/156890754983978695") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/149573500831144101/comments/default/156890754983978695") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/12/racket-version-5.html?showComment=1291899192244#c156890754983978695") (rel "alternate") (title "") (type "text/html"))) (author (name "Matthew Flatt") (uri "https://www.blogger.com/profile/03369511886823036667") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/12/racket-version-5.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-149573500831144101") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/149573500831144101") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1300564163"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 9, 2010 at 7:53 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8500632850621772030") (published "2010-12-10T06:43:36.320-05:00") (updated "2010-12-10T06:43:36.320-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Great! Is there any plan to include/use the gtk tr...") (post-content "Great! Is there any plan to include/use the gtk tree store or add  multiple columns to the actual list-box?" (br) (br) "I was planning to create a simple gui with the typical database access showing the contents in a table grid.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/149573500831144101/comments/default/8500632850621772030") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/149573500831144101/comments/default/8500632850621772030") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/12/racket-version-5.html?showComment=1291981416320#c8500632850621772030") (rel "alternate") (title "") (type "text/html"))) (author (name "aleix") (uri "https://www.blogger.com/profile/13784615324775341867") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/12/racket-version-5.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-149573500831144101") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/149573500831144101") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1375182251"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 10, 2010 at 6:43 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2176998311435551374") (published "2010-12-10T08:53:14.787-05:00") (updated "2010-12-10T08:53:14.787-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "What is the best book to learn " "&" "quot;Racket" "&" "quot; ...") (post-content "What is the best book to learn " "\"" "Racket" "\"" " and Scheme with? Doese the HtDP still hold?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/149573500831144101/comments/default/2176998311435551374") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/149573500831144101/comments/default/2176998311435551374") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/12/racket-version-5.html?showComment=1291989194787#c2176998311435551374") (rel "alternate") (title "") (type "text/html"))) (author (name "Robert") (uri "https://www.blogger.com/profile/05513580456463140264") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/12/racket-version-5.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-149573500831144101") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/149573500831144101") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1123402806"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 10, 2010 at 8:53 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6244682148221439932") (published "2010-12-10T08:59:07.157-05:00") (updated "2010-12-10T08:59:07.157-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Yes, there are plans to enable multi-column list b...") (post-content "Yes, there are plans to enable multi-column list boxes and other new things. I" 39 "m not sure how soon those will be available, but probably soon.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/149573500831144101/comments/default/6244682148221439932") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/149573500831144101/comments/default/6244682148221439932") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/12/racket-version-5.html?showComment=1291989547157#c6244682148221439932") (rel "alternate") (title "") (type "text/html"))) (author (name "Matthew Flatt") (uri "https://www.blogger.com/profile/03369511886823036667") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/12/racket-version-5.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-149573500831144101") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/149573500831144101") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1300564163"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 10, 2010 at 8:59 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1029728197866717608") (published "2010-12-10T09:00:34.440-05:00") (updated "2010-12-10T09:00:34.440-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "To get started with Racket, see http://docs.racket...") (post-content "To get started with Racket, see http://docs.racket-lang.org/getting-started/ . HtDP is still a good starting point.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/149573500831144101/comments/default/1029728197866717608") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/149573500831144101/comments/default/1029728197866717608") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/12/racket-version-5.html?showComment=1291989634440#c1029728197866717608") (rel "alternate") (title "") (type "text/html"))) (author (name "Matthew Flatt") (uri "https://www.blogger.com/profile/03369511886823036667") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/12/racket-version-5.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-149573500831144101") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/149573500831144101") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1300564163"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 10, 2010 at 9:00 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6954827599214094732") (published "2010-12-10T11:30:10.741-05:00") (updated "2010-12-10T11:30:10.741-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "For anyone that tried the Windows build and ran in...") (post-content "For anyone that tried the Windows build and ran into problems -- there is now a new build that should work: http://pre.racket-lang.org/installers") (link ((href "https://www.blogger.com/feeds/2080885971644496896/149573500831144101/comments/default/6954827599214094732") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/149573500831144101/comments/default/6954827599214094732") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/12/racket-version-5.html?showComment=1291998610741#c6954827599214094732") (rel "alternate") (title "") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_lx1aK_XwT-o/SxSPoMzJgLI/AAAAAAAAAA8/v5ASXddGsSc/s32-R/eli-small.jpg") (width "28")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/12/racket-version-5.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-149573500831144101") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/149573500831144101") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-311455247"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 10, 2010 at 11:30 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-344630547537445638") (published "2010-12-21T06:58:03.505-05:00") (updated "2010-12-21T06:58:03.505-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Great! Thanks for all the hard work.") (post-content "Great! Thanks for all the hard work.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/149573500831144101/comments/default/344630547537445638") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/149573500831144101/comments/default/344630547537445638") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2010/12/racket-version-5.html?showComment=1292932683505#c344630547537445638") (rel "alternate") (title "") (type "text/html"))) (author (name "Sunny") (uri "https://www.blogger.com/profile/00207379474463087635") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2010/12/racket-version-5.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-149573500831144101") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/149573500831144101") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1111141276"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 21, 2010 at 6:58 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6567417113321550685") (published "2011-02-19T16:29:08.963-05:00") (updated "2011-02-19T16:29:08.963-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Wow, that was a bunch of work.  I" "&" "#39;ve been lurk...") (post-content "Wow, that was a bunch of work.  I" 39 "ve been lurking, trying the nightly build about every week.  Congratulations on the successful rewrite and thank you for the effort.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2611063075276519104/comments/default/6567417113321550685") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2611063075276519104/comments/default/6567417113321550685") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/02/racket-v51.html?showComment=1298150948963#c6567417113321550685") (rel "alternate") (title "") (type "text/html"))) (author (name "griffinish") (uri "https://www.blogger.com/profile/16994898111283078052") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2011/02/racket-v51.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2611063075276519104") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2611063075276519104") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1322069881"))) (gd:extendedProperty ((name "blogger.displayTime") (value "February 19, 2011 at 4:29 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6408265805424965466") (published "2011-02-22T14:24:39.439-05:00") (updated "2011-02-22T14:24:39.439-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Thanks a lot for Racket! It" "&" "#39;s really great.\n\nA...") (post-content "Thanks a lot for Racket! It" 39 "s really great." (br) (br) "And could you help me? Does vim syntax file for Racket exist and how can I find one if yes?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2611063075276519104/comments/default/6408265805424965466") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2611063075276519104/comments/default/6408265805424965466") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/02/racket-v51.html?showComment=1298402679439#c6408265805424965466") (rel "alternate") (title "") (type "text/html"))) (author (name "ul") (uri "https://www.blogger.com/profile/16378507134963214019") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2011/02/racket-v51.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2611063075276519104") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2611063075276519104") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-107714300"))) (gd:extendedProperty ((name "blogger.displayTime") (value "February 22, 2011 at 2:24 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2469249012604019783") (published "2011-03-22T17:42:17.349-04:00") (updated "2011-03-22T17:42:17.349-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "It would be a good idea if the programmer can writ...") (post-content "It would be a good idea if the programmer can write very documentation comments for variables and functions (as in java / ** * /). And in the IDE climbs tips with documentation to functions. And to add intelligent code insertion, and auto completion of the input string.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2251597477702098360/comments/default/2469249012604019783") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2251597477702098360/comments/default/2469249012604019783") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/03/languages-as-libraries-pldi-2011.html?showComment=1300830137349#c2469249012604019783") (rel "alternate") (title "") (type "text/html"))) (author (name "ÐÐ»ÐµÐºÑÐµÐ¹") (uri "https://www.blogger.com/profile/16708408122086755654") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2011/03/languages-as-libraries-pldi-2011.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2251597477702098360") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2251597477702098360") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-924284631"))) (gd:extendedProperty ((name "blogger.displayTime") (value "March 22, 2011 at 5:42 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5945082431944487892") (published "2011-04-06T11:44:25.849-04:00") (updated "2011-04-06T11:44:25.849-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Probably the best way to add documentation strings...") (post-content "Probably the best way to add documentation strings to Racket would be to add a keyword option to the " "\"" "define" "\"" " form:" (br) (br) "(define (foobar . args) #:doc " "\"" "Blah blah blah" "\"" " . body)" (br) (br) "(define myvar myvalue #:doc " "\"" "My value" "\"" ")" (br) (br) "(define myvar #:doc " "\"" "It" 39 "s mine" "\"" " myvalue)") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2251597477702098360/comments/default/5945082431944487892") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2251597477702098360/comments/default/5945082431944487892") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/03/languages-as-libraries-pldi-2011.html?showComment=1302104665849#c5945082431944487892") (rel "alternate") (title "") (type "text/html"))) (author (name "Blog User") (uri "https://www.blogger.com/profile/06896857113012821897") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2011/03/languages-as-libraries-pldi-2011.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2251597477702098360") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2251597477702098360") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-464166213"))) (gd:extendedProperty ((name "blogger.displayTime") (value "April 6, 2011 at 11:44 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3401817737025147181") (published "2011-05-26T11:27:37.800-04:00") (updated "2011-05-26T11:27:37.800-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Audio for this episode and other information about...") (post-content "Audio for this episode and other information about FLOSS Weekly is available " (a ((href "http://twit.tv/floss167") (rel "nofollow")) "here") ".") (link ((href "https://www.blogger.com/feeds/2080885971644496896/7456665387737613746/comments/default/3401817737025147181") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/7456665387737613746/comments/default/3401817737025147181") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/05/racket-on-floss-weekly.html?showComment=1306423657800#c3401817737025147181") (rel "alternate") (title "") (type "text/html"))) (author (name "Jordan Henderson") (uri "https://www.blogger.com/profile/06586821482992546930") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//3.bp.blogspot.com/_lTy-FrcFK8Q/SuOuIOhBi1I/AAAAAAAAAB0/aget6Fzjjn8/S220-s32/Picture+273.jpg") (width "24")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2011/05/racket-on-floss-weekly.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-7456665387737613746") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/7456665387737613746") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-872369030"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 26, 2011 at 11:27 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3674870883113497001") (published "2011-05-26T11:41:28.755-04:00") (updated "2011-05-26T11:41:28.755-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Thanks -- I" "&" "#39;ve updated the post with the link....") (post-content "Thanks -- I" 39 "ve updated the post with the link.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/7456665387737613746/comments/default/3674870883113497001") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/7456665387737613746/comments/default/3674870883113497001") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/05/racket-on-floss-weekly.html?showComment=1306424488755#c3674870883113497001") (rel "alternate") (title "") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_lx1aK_XwT-o/SxSPoMzJgLI/AAAAAAAAAA8/v5ASXddGsSc/s32-R/eli-small.jpg") (width "28")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2011/05/racket-on-floss-weekly.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-7456665387737613746") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/7456665387737613746") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-311455247"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 26, 2011 at 11:41 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8375792878972256165") (published "2011-05-27T06:05:02.361-04:00") (updated "2011-05-27T06:05:02.361-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Thoroughly enjoyed this episode. When is the Racke...") (post-content "Thoroughly enjoyed this episode. When is the Racket book coming out? The online docs are great and the various books like PLAI and HTDP are wonderful, but I want more information on DSLs, continuations, hygenic macros and other advanced features of Racket that I probably don" 39 "t even know exist.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/7456665387737613746/comments/default/8375792878972256165") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/7456665387737613746/comments/default/8375792878972256165") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/05/racket-on-floss-weekly.html?showComment=1306490702361#c8375792878972256165") (rel "alternate") (title "") (type "text/html"))) (author (name "Dwayne R. Crooks") (uri "http://dwaynecrooks.wordpress.com/") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img1.blogblog.com/img/openid16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2011/05/racket-on-floss-weekly.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-7456665387737613746") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/7456665387737613746") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-539743723"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 27, 2011 at 6:05 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4979299176134559906") (published "2011-05-27T11:06:02.477-04:00") (updated "2011-05-27T11:06:02.477-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "The show was excellent... It really feels like the...") (post-content "The show was excellent... It really feels like the possibilities with Racket are unlimited :D") (link ((href "https://www.blogger.com/feeds/2080885971644496896/7456665387737613746/comments/default/4979299176134559906") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/7456665387737613746/comments/default/4979299176134559906") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/05/racket-on-floss-weekly.html?showComment=1306508762477#c4979299176134559906") (rel "alternate") (title "") (type "text/html"))) (author (name "Rodolfo") (uri "https://www.blogger.com/profile/13115401885842551697") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//1.bp.blogspot.com/_vI4PxbAv6pM/SJ-dzrhNvyI/AAAAAAAAAAc/dOyhjpNbx58/s32-R/Rodolfo_safari.png") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2011/05/racket-on-floss-weekly.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-7456665387737613746") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/7456665387737613746") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-337739611"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 27, 2011 at 11:06 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5930339720564586949") (published "2011-06-03T12:46:14.454-04:00") (updated "2011-06-03T12:46:14.454-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Nice! Looking at this video I just got an idea of ...") (post-content "Nice! Looking at this video I just got an idea of how to populate Racket more:" (br) "With Screencasts!") (link ((href "https://www.blogger.com/feeds/2080885971644496896/7456665387737613746/comments/default/5930339720564586949") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/7456665387737613746/comments/default/5930339720564586949") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/05/racket-on-floss-weekly.html?showComment=1307119574454#c5930339720564586949") (rel "alternate") (title "") (type "text/html"))) (author (name "Hoornet") (uri "https://www.blogger.com/profile/17377669859461855590") (email "noreply@blogger.com") (gd:image ((height "24") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//1.bp.blogspot.com/_wNRYllC7xic/S0jGTfDR2BI/AAAAAAAAABs/TaUYPMBqMxs/S220-s32/Hoornet+dreaming.jpg") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2011/05/racket-on-floss-weekly.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-7456665387737613746") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/7456665387737613746") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1596526515"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 3, 2011 at 12:46 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6469410963092400229") (published "2011-06-24T07:15:10.636-04:00") (updated "2011-06-24T07:26:29.874-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Are the Typed Racket versions of the benchmarks me...") (post-content "Are the Typed Racket versions of the benchmarks mentioned in section 7, available anywhere ? " (br) "Thanks") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2251597477702098360/comments/default/6469410963092400229") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2251597477702098360/comments/default/6469410963092400229") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/03/languages-as-libraries-pldi-2011.html?showComment=1308914110636#c6469410963092400229") (rel "alternate") (title "") (type "text/html"))) (author (name "therac25") (uri "https://www.blogger.com/profile/01030437886042722139") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2011/03/languages-as-libraries-pldi-2011.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2251597477702098360") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2251597477702098360") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1041056879"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 24, 2011 at 7:15 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-9067105283532461420") (published "2011-07-04T18:38:08.826-04:00") (updated "2011-07-04T18:38:08.826-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "a lambda calculus symbol in firefox markup\n\n" "<" "a hre...") (post-content "a lambda calculus symbol in firefox markup" (br) (br) (a ((href "https://markup.mozilla.org/fr/#/linear/LNgc?playback=true&amp;be_grateful=true") (rel "nofollow")) "https://markup.mozilla.org/fr/#/linear/LNgc?playback=true" "&" "be_grateful=true")) (link ((href "https://www.blogger.com/feeds/2080885971644496896/546301615685805019/comments/default/9067105283532461420") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/546301615685805019/comments/default/9067105283532461420") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/06/come-to-racketcon.html?showComment=1309819088826#c9067105283532461420") (rel "alternate") (title "") (type "text/html"))) (author (name "stber") (uri "https://www.blogger.com/profile/03495220971459769297") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2011/06/come-to-racketcon.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-546301615685805019") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/546301615685805019") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1407245673"))) (gd:extendedProperty ((name "blogger.displayTime") (value "July 4, 2011 at 6:38 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2246740352246901560") (published "2011-07-10T10:23:55.041-04:00") (updated "2011-07-17T03:36:32.875-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I" "&" "#39;m using the Lion GM and can" "&" "#39;t seem to la...") (post-content "I" 39 "m using the Lion GM and can" 39 "t seem to launch any of the binaries included in the download. They invariably crash on launch.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2611063075276519104/comments/default/2246740352246901560") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2611063075276519104/comments/default/2246740352246901560") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/02/racket-v51.html?showComment=1310307835041#c2246740352246901560") (rel "alternate") (title "") (type "text/html"))) (author (name "Alex Lew") (uri "https://www.blogger.com/profile/11292020484590340251") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2011/02/racket-v51.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2611063075276519104") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2611063075276519104") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1843895450"))) (gd:extendedProperty ((name "blogger.displayTime") (value "July 10, 2011 at 10:23 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8428080503383018572") (published "2011-07-16T15:20:02.646-04:00") (updated "2011-07-17T03:37:58.642-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Are there plans to include a windows x86_64 versio...") (post-content "Are there plans to include a windows x86_64 version at some point?" (br) "Thanks!") (link ((href "https://www.blogger.com/feeds/2080885971644496896/6203425329791139673/comments/default/8428080503383018572") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/6203425329791139673/comments/default/8428080503383018572") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/04/racket-v511.html?showComment=1310844002646#c8428080503383018572") (rel "alternate") (title "") (type "text/html"))) (author (name "deforce") (uri "https://www.blogger.com/profile/17983913733918219750") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2011/04/racket-v511.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-6203425329791139673") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/6203425329791139673") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-591660093"))) (gd:extendedProperty ((name "blogger.displayTime") (value "July 16, 2011 at 3:20 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4563673782946117934") (published "2011-07-17T03:37:39.950-04:00") (updated "2011-07-17T03:37:39.950-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Try a newer version -- IIRC, there were some relev...") (post-content "Try a newer version -- IIRC, there were some relevant fixes since then.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2611063075276519104/comments/default/4563673782946117934") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2611063075276519104/comments/default/4563673782946117934") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/02/racket-v51.html?showComment=1310888259950#c4563673782946117934") (rel "alternate") (title "") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_lx1aK_XwT-o/SxSPoMzJgLI/AAAAAAAAAA8/v5ASXddGsSc/s32-R/eli-small.jpg") (width "28")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2011/02/racket-v51.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2611063075276519104") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2611063075276519104") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-311455247"))) (gd:extendedProperty ((name "blogger.displayTime") (value "July 17, 2011 at 3:37 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7489725561620576845") (published "2011-07-17T03:39:35.538-04:00") (updated "2011-07-17T03:39:35.538-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Yes, we now have a Windows x86_64 build.  You can ...") (post-content "Yes, we now have a Windows x86_64 build.  You can try a nightly build (http://pre.racket-lang.org/installers) or wait for the next version which should be out very soon.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/6203425329791139673/comments/default/7489725561620576845") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/6203425329791139673/comments/default/7489725561620576845") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/04/racket-v511.html?showComment=1310888375538#c7489725561620576845") (rel "alternate") (title "") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/08165322672792335619") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_lx1aK_XwT-o/SxSPoMzJgLI/AAAAAAAAAA8/v5ASXddGsSc/s32-R/eli-small.jpg") (width "28")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2011/04/racket-v511.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-6203425329791139673") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/6203425329791139673") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-311455247"))) (gd:extendedProperty ((name "blogger.displayTime") (value "July 17, 2011 at 3:39 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5173952958393118959") (published "2011-07-28T18:01:34.524-04:00") (updated "2011-07-28T18:01:34.524-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "When will the conference videos be available ?") (post-content "When will the conference videos be available ?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/546301615685805019/comments/default/5173952958393118959") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/546301615685805019/comments/default/5173952958393118959") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/06/come-to-racketcon.html?showComment=1311890494524#c5173952958393118959") (rel "alternate") (title "") (type "text/html"))) (author (name "therac25") (uri "https://www.blogger.com/profile/01030437886042722139") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2011/06/come-to-racketcon.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-546301615685805019") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/546301615685805019") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1041056879"))) (gd:extendedProperty ((name "blogger.displayTime") (value "July 28, 2011 at 6:01 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8757112561913827819") (published "2011-07-29T07:14:14.593-04:00") (updated "2011-07-29T07:14:14.593-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "can" "&" "#39;t wait for the videos!") (post-content "can" 39 "t wait for the videos!") (link ((href "https://www.blogger.com/feeds/2080885971644496896/4765317171885687427/comments/default/8757112561913827819") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/4765317171885687427/comments/default/8757112561913827819") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/07/racketcon-recap.html?showComment=1311938054593#c8757112561913827819") (rel "alternate") (title "") (type "text/html"))) (author (name "Ramakrishnan VU3RDD") (uri "https://www.blogger.com/profile/17889890890960319555") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2011/07/racketcon-recap.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-4765317171885687427") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/4765317171885687427") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-2040134211"))) (gd:extendedProperty ((name "blogger.displayTime") (value "July 29, 2011 at 7:14 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3747434998035316083") (published "2011-07-29T21:59:36.483-04:00") (updated "2011-07-29T21:59:36.483-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Great! thanks for making these available") (post-content "Great! thanks for making these available") (link ((href "https://www.blogger.com/feeds/2080885971644496896/4765317171885687427/comments/default/3747434998035316083") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/4765317171885687427/comments/default/3747434998035316083") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/07/racketcon-recap.html?showComment=1311991176483#c3747434998035316083") (rel "alternate") (title "") (type "text/html"))) (author (name "therac25") (uri "https://www.blogger.com/profile/01030437886042722139") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2011/07/racketcon-recap.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-4765317171885687427") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/4765317171885687427") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1041056879"))) (gd:extendedProperty ((name "blogger.displayTime") (value "July 29, 2011 at 9:59 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-875600951930896525") (published "2011-08-18T20:19:38.618-04:00") (updated "2011-08-23T16:49:01.831-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Very illuminating... Incidentally this is the firs...") (post-content "Very illuminating... Incidentally this is the first FLOSS Video I" 39 "ve seen, and I loved it." (br) (br) "We" 39 "re teaching the Principles of Programming Languages course here at our University in India using Racket... :)" (br) (br) "Cheers!") (link ((href "https://www.blogger.com/feeds/2080885971644496896/7456665387737613746/comments/default/875600951930896525") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/7456665387737613746/comments/default/875600951930896525") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/05/racket-on-floss-weekly.html?showComment=1313713178618#c875600951930896525") (rel "alternate") (title "") (type "text/html"))) (author (name "Sankalp") (uri "https://www.blogger.com/profile/07868541357234053586") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2011/05/racket-on-floss-weekly.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-7456665387737613746") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/7456665387737613746") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-492105519"))) (gd:extendedProperty ((name "blogger.displayTime") (value "August 18, 2011 at 8:19 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3389008250433210734") (published "2011-09-13T00:29:05.446-04:00") (updated "2011-09-14T01:29:30.352-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "How is the progress on the videos?") (post-content "How is the progress on the videos?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/4765317171885687427/comments/default/3389008250433210734") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/4765317171885687427/comments/default/3389008250433210734") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/07/racketcon-recap.html?showComment=1315888145446#c3389008250433210734") (rel "alternate") (title "") (type "text/html"))) (author (name "numbertheory") (uri "http://numbertheory.wordpress.com/") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img1.blogblog.com/img/openid16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2011/07/racketcon-recap.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-4765317171885687427") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/4765317171885687427") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-855536006"))) (gd:extendedProperty ((name "blogger.displayTime") (value "September 13, 2011 at 12:29 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1717443154438822574") (published "2011-09-23T15:58:41.496-04:00") (updated "2011-09-23T16:04:45.334-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Having missed the event, I very much look forward ...") (post-content "Having missed the event, I very much look forward to any videos.   Is there an ETA?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/4765317171885687427/comments/default/1717443154438822574") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/4765317171885687427/comments/default/1717443154438822574") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/07/racketcon-recap.html?showComment=1316807921496#c1717443154438822574") (rel "alternate") (title "") (type "text/html"))) (author (name "jcgsample") (uri "https://www.blogger.com/profile/16994898111283078052") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2011/07/racketcon-recap.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-4765317171885687427") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/4765317171885687427") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1322069881"))) (gd:extendedProperty ((name "blogger.displayTime") (value "September 23, 2011 at 3:58 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6282943844996503941") (published "2011-09-24T10:15:01.338-04:00") (updated "2011-09-24T10:15:01.338-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I" "&" "#39;ve added a note to the keybindings documenta...") (post-content "I" 39 "ve added a note to the keybindings documentation that comes with the code to implement a few of the standard " 39 "send things to the repl" 39 " keybindings.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/6282943844996503941") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8595329905636585805/comments/default/6282943844996503941") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html?showComment=1316873701338#c6282943844996503941") (rel "alternate") (title "") (type "text/html"))) (author (name "Robby") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//people.cs.uchicago.edu/~robby/portrait-2006.jpg") (width "13")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2009/03/drscheme-repl-isnt-lisp.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8595329905636585805") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8595329905636585805") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1090470180"))) (gd:extendedProperty ((name "blogger.displayTime") (value "September 24, 2011 at 10:15 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3964951810997533535") (published "2011-10-19T13:31:47.014-04:00") (updated "2011-11-04T11:12:22.494-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Coming from a security analysis background, I appr...") (post-content "Coming from a security analysis background, I appreciate the arguments about analyzability." (br) (br) "You might be interested in my related response to " "\"" (a ((href "http://programmers.stackexchange.com/questions/33578/what-do-you-wish-language-designers-paid-attention-to/34944#34944") (rel "nofollow")) "What do you wish language designers paid attention to?" "\"") ". The bit excerpted below touches on the same points -- quoting confusion is hard, eval can be bounded, the environment in which the evaled code should be run is often not the environment in which eval is invoked.  " (br) (br) "\"" "\"" "\"" (br) (br) "Please make your language analyzable/auditable for computer security people." (br) (br) "..." (br) (br) "Limit the authority of embedded scripting languages" (br) (br) "A lot of useful systems are organized as a static core that kicks off a lot of code written in dynamic (even functional) languages." (br) (br) "And embedding scripting languages can make a system much more extensible." (br) (br) "But a scripting language shouldn" 39 "t have the full authority of the VM." (br) (br) "If you choose to allow embedded scripting languages, make it easy for the invoker to limit what they can do. An object-capabilities model (see comment on Newspeak above) is very appropriate here ; so when evaluating code in a scripting language, the caller should pass in the code to execute and all the global variables for that code." (br) (br) (b "Treat eval as a language embedding itself as a scripting language") (br) (br) "If your language can invoke its own compiler to turn a string into code, then allow it to be sandboxed the same as you would any embedded scripting language." (br) (br) "..." (br) (br) "Don" 39 "t encourage quoting confusion" (br) (br) "\"" "\"" "\"" (br) (br) "cheers") (link ((href "https://www.blogger.com/feeds/2080885971644496896/176509377051155662/comments/default/3964951810997533535") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/176509377051155662/comments/default/3964951810997533535") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/10/on-eval-in-dynamic-languages-generally.html?showComment=1319045507014#c3964951810997533535") (rel "alternate") (title "") (type "text/html"))) (author (name "Mike Samuel") (uri "https://www.blogger.com/profile/16315216210479061685") (email "noreply@blogger.com") (gd:image ((height "21") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//2.bp.blogspot.com/_6t_UumMM-Z0/Sgm8_cS9CVI/AAAAAAAAA6E/8uRhWoD5cyc/S220-s31/eating.png") (width "31")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2011/10/on-eval-in-dynamic-languages-generally.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-176509377051155662") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/176509377051155662") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-775980257"))) (gd:extendedProperty ((name "blogger.displayTime") (value "October 19, 2011 at 1:31 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2913639638774707577") (published "2011-10-27T15:31:37.145-04:00") (updated "2011-10-28T11:05:29.227-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Thanks!  I was about to code an interface to gnupl...") (post-content "Thanks!  I was about to code an interface to gnuplot, and I see you" 39 "ve already done it.  I owe you a beer (at least).") (link ((href "https://www.blogger.com/feeds/2080885971644496896/7007357599951577374/comments/default/2913639638774707577") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/7007357599951577374/comments/default/2913639638774707577") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2008/11/simple-gnuplotting.html?showComment=1319743897145#c2913639638774707577") (rel "alternate") (title "") (type "text/html"))) (author (name "Geoff Knauth") (uri "https://www.blogger.com/profile/12025560607512616605") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_sWo4l8cUvg0/S82vpaUHzeI/AAAAAAAAABU/oeNNt1KeXSg/S220-s32/gsk200506.jpg") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2008/11/simple-gnuplotting.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-7007357599951577374") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/7007357599951577374") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1692477807"))) (gd:extendedProperty ((name "blogger.displayTime") (value "October 27, 2011 at 3:31 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6997631465177438957") (published "2011-11-12T06:24:12.835-05:00") (updated "2011-11-12T16:08:28.004-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "When will the videos be out?") (post-content "When will the videos be out?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/4765317171885687427/comments/default/6997631465177438957") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/4765317171885687427/comments/default/6997631465177438957") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/07/racketcon-recap.html?showComment=1321097052835#c6997631465177438957") (rel "alternate") (title "") (type "text/html"))) (author (name "dwayne") (uri "https://www.blogger.com/profile/08803279692056926645") (email "noreply@blogger.com") (gd:image ((height "24") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//2.bp.blogspot.com/-KZ3l84Ox3ww/Tbvzsk8WTNI/AAAAAAAAAEU/9OmAKCo5POI/s32/SP_A0330.jpg") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2011/07/racketcon-recap.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-4765317171885687427") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/4765317171885687427") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-738590845"))) (gd:extendedProperty ((name "blogger.displayTime") (value "November 12, 2011 at 6:24 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1751795835826680876") (published "2011-11-24T04:19:24.299-05:00") (updated "2011-11-28T14:14:13.260-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "will the videos ever come out of post-production ?...") (post-content "will the videos ever come out of post-production ?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/4765317171885687427/comments/default/1751795835826680876") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/4765317171885687427/comments/default/1751795835826680876") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/07/racketcon-recap.html?showComment=1322126364299#c1751795835826680876") (rel "alternate") (title "") (type "text/html"))) (author (name "therac25") (uri "https://www.blogger.com/profile/01030437886042722139") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2011/07/racketcon-recap.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-4765317171885687427") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/4765317171885687427") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1041056879"))) (gd:extendedProperty ((name "blogger.displayTime") (value "November 24, 2011 at 4:19 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1723260069000799881") (published "2011-12-02T00:32:59.786-05:00") (updated "2011-12-02T05:18:50.963-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Great.Thank you for the Report.\nwhat is the differ...") (post-content "Great.Thank you for the Report." (br) "what is the difference commercial and business Web Application Development.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2279205445911348013/comments/default/1723260069000799881") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2279205445911348013/comments/default/1723260069000799881") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/08/experience-report-scheme-in-commercial.html?showComment=1322803979786#c1723260069000799881") (rel "alternate") (title "") (type "text/html"))) (author (name "suhan") (uri "https://www.blogger.com/profile/08399572099776777898") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/08/experience-report-scheme-in-commercial.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2279205445911348013") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2279205445911348013") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-2128089709"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 2, 2011 at 12:32 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5826583659070987763") (published "2012-01-19T09:58:43.390-05:00") (updated "2012-01-19T10:09:23.596-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "The new plot is awesome!") (post-content "The new plot is awesome!") (link ((href "https://www.blogger.com/feeds/2080885971644496896/453161652899215709/comments/default/5826583659070987763") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/453161652899215709/comments/default/5826583659070987763") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/11/racket-v52.html?showComment=1326985123390#c5826583659070987763") (rel "alternate") (title "") (type "text/html"))) (author (name "deforce") (uri "https://www.blogger.com/profile/17983913733918219750") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2011/11/racket-v52.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-453161652899215709") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/453161652899215709") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-591660093"))) (gd:extendedProperty ((name "blogger.displayTime") (value "January 19, 2012 at 9:58 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4656943041000182604") (published "2012-02-02T20:14:47.746-05:00") (updated "2012-02-02T20:14:47.746-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "What is your opinion of Clojure?") (post-content "What is your opinion of Clojure?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2390508687802287055/comments/default/4656943041000182604") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2390508687802287055/comments/default/4656943041000182604") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/02/racket-v521.html?showComment=1328231687746#c4656943041000182604") (rel "alternate") (title "") (type "text/html"))) (author (name "Owen") (uri "https://www.blogger.com/profile/15906293040044372784") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/02/racket-v521.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2390508687802287055") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2390508687802287055") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-2068560005"))) (gd:extendedProperty ((name "blogger.displayTime") (value "February 2, 2012 at 8:14 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7174984339544764493") (published "2012-02-07T08:08:25.760-05:00") (updated "2012-02-07T08:08:25.760-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I just compiled and installed the new racket relea...") (post-content "I just compiled and installed the new racket release on my linux laptop! Racket" 39 "s great! The performance seems to be much better than in previous versions and DrRacket IDE has improved much! Thanks!") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2390508687802287055/comments/default/7174984339544764493") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2390508687802287055/comments/default/7174984339544764493") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/02/racket-v521.html?showComment=1328620105760#c7174984339544764493") (rel "alternate") (title "") (type "text/html"))) (author (name "Axel S.") (uri "https://www.blogger.com/profile/11525364729295632847") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_y4JLqxN9T0s/SkY1_DTbbDI/AAAAAAAAAAM/tyWR3hHrpsc/S220-s32/Axel.jpg") (width "24")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/02/racket-v521.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2390508687802287055") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2390508687802287055") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-265830338"))) (gd:extendedProperty ((name "blogger.displayTime") (value "February 7, 2012 at 8:08 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2665974914350280819") (published "2012-03-09T04:30:57.043-05:00") (updated "2012-03-10T19:46:28.033-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Please help me:\n\nMy stateless servlet allways thro...") (post-content "Please help me:" (br) (br) "My stateless servlet allways throw exception:" (br) "D:\\tmpracket\\Racket\\collects\\web-server\\dispatchers\\dispatch-servlets.rkt:85:20: Servlet (@ /c.rkt;((%22c%22%20.%20%220((3)%202%20(((lib%20%5C%22web-server%2Flang%2Fabort-resume.rkt%5C%22)%20.%20%5C%22lifted.6%5C%22)%20((lib%20%5C%22web-server%2Flang%2Fweb-cells.rkt%5C%22)%20.%20deserialize-info:frame-v0))%200%20()%20()%20(0%20(1%20(h%20-%20()))%20()))%22))) exception:" (br) "set-servlet-handler!: contract violation, expected: can-be-response?, given: #" (br) "  contract from: " (br) "    /web-server/private/servlet.rkt" (br) "  blaming: " (br) "    /web-server/servlet/setup.rkt" (br) "  contract: " (br) "    (-" ">" (br) "     servlet?" (br) "     (-" ">" " request? can-be-response?)" (br) "     void?)" (br) "  at: /web-server/private/servlet.rkt:8.15" (br) (br) (br) (br) (br) "The stateless servlet:" (br) (br) "(require web-server/http/xexpr" (br) "         web-server/managers/lru" (br) "         web-server/lang/web" (br) "         web-server/lang/stuff-url)" (br) (br) "(define (start req)" (br) "  (define (render-home u)" (br) "    (response/xexpr" (br) "     `(body " "\"" "Hello World: Stateless" "\"" (br) "            (a ([href ,u]) " "\"" " clickMe" "\"" "))))" (br) "  (send/suspend render-home)" (br) (br) "  (response/xexpr" (br) "   `(body " "\"" "OK, You clickedMe!" "\"" ")))" (br) (br) "(define interface-version " 39 "stateless)" (br) (br) "(define stuffer (make-default-stuffer (build-path " "\"" "f:\\\\lisp\\\\scheme\\\\racket\\\\program\\\\urls.urls" "\"" ")))" (br) (br) "(provide interface-version" (br) "         stuffer" (br) "         start)" (br) (br) (br) "My main dispatcher is :" (br) (br) "#lang racket" (br) (br) "(require web-server/web-server" (br) "         web-server/servlet-dispatch" (br) "         web-server/servlet/setup" (br) "         (prefix-in files: web-server/dispatchers/filesystem-map)" (br) "         (prefix-in servlets: web-server/dispatchers/dispatch-servlets))" (br) (br) "(define p-" ">" "s (make-default-path-" ">" "servlet))" (br) "(define u-" ">" "p (files:make-url-" ">" "path " "\"" "f:\\\\lisp\\\\scheme\\\\racket\\\\program\\\\" "\"" "))" (br) (br) "(define-values (_ u-" ">" "s) (servlets:make-cached-url-" ">" "servlet u-" ">" "p p-" ">" "s))" (br) "(define dis (servlets:make u-" ">" "s))" (br) (br) ";; (serve" (br) ";;  #:dispatch dis" (br) ";;  #:port 9979" (br) ";;  )" (br) (br) (br) "(serve/launch/wait" (br) " (lambda (sem)" (br) "   dis)" (br) " #:port 9968)") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2611538924601880099/comments/default/2665974914350280819") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2611538924601880099/comments/default/2665974914350280819") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/02/zack-gallers-experience-with-stateful.html?showComment=1331285457043#c2665974914350280819") (rel "alternate") (title "") (type "text/html"))) (author (name "cnnzp") (uri "https://www.blogger.com/profile/18041321039815678708") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/02/zack-gallers-experience-with-stateful.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2611538924601880099") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2611538924601880099") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-995047862"))) (gd:extendedProperty ((name "blogger.displayTime") (value "March 9, 2012 at 4:30 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4978876845375361696") (published "2012-03-12T11:27:03.563-04:00") (updated "2012-03-12T11:27:03.563-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "@cnnzp, I copied exactly what you wrote in the com...") (post-content "@cnnzp, I copied exactly what you wrote in the comment (except I added #lang web-server) to the servlet and everything worked fine. If you" 39 "d like to work through it more, I suggest you email the mailing list, as it is a better place to get support." (br) (br) "Jay") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2611538924601880099/comments/default/4978876845375361696") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2611538924601880099/comments/default/4978876845375361696") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/02/zack-gallers-experience-with-stateful.html?showComment=1331566023563#c4978876845375361696") (rel "alternate") (title "") (type "text/html"))) (author (name "Jay McCarthy") (uri "https://www.blogger.com/profile/07912023932333508057") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh3.googleusercontent.com/-13KUDv8LhZw/AAAAAAAAAAI/AAAAAAAAAAA/7MdiB5POU5k/s32-c/photo.jpg") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/02/zack-gallers-experience-with-stateful.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2611538924601880099") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2611538924601880099") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-665606500"))) (gd:extendedProperty ((name "blogger.displayTime") (value "March 12, 2012 at 11:27 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4334163846722880524") (published "2012-03-26T10:00:09.067-04:00") (updated "2012-03-26T10:43:23.543-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "On Windows 7 with both the 32-bit and 64-bit insta...") (post-content "On Windows 7 with both the 32-bit and 64-bit installers, DrRacket can" 39 "t run due to this error:" (br) (br) "read-bitmap: expects type " "<" "path-string or input-port" ">" " as 1st argument, given: " 39 "#(#" "<" "procedure:draw-honu" ">" " 270 270); other arguments were: " 39 "unknown/alpha #f #t" (br) (br) "(The problem shows up for the new 5.2.1, but not on with 5.2 version.)") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2390508687802287055/comments/default/4334163846722880524") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2390508687802287055/comments/default/4334163846722880524") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/02/racket-v521.html?showComment=1332770409067#c4334163846722880524") (rel "alternate") (title "") (type "text/html"))) (author (name "Dan") (uri "https://www.blogger.com/profile/07182648656929559554") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/02/racket-v521.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2390508687802287055") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2390508687802287055") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-542567899"))) (gd:extendedProperty ((name "blogger.displayTime") (value "March 26, 2012 at 10:00 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6844883269023757278") (published "2012-03-26T10:48:14.791-04:00") (updated "2012-03-26T10:48:14.791-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "This is a bug that we are currently working on.  F...") (post-content "This is a bug that we are currently working on.  Full message can be found " (a ((href "http://lists.racket-lang.org/announce/archive/2012/000067.html") (rel "nofollow")) "here") ".") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2390508687802287055/comments/default/6844883269023757278") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2390508687802287055/comments/default/6844883269023757278") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/02/racket-v521.html?showComment=1332773294791#c6844883269023757278") (rel "alternate") (title "") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/04250857957616050612") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh5.googleusercontent.com/-eR9w2qhxsD0/AAAAAAAAAAI/AAAAAAAAADk/2COOb0PUgdo/s32-c/photo.jpg") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/02/racket-v521.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2390508687802287055") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2390508687802287055") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1302984543"))) (gd:extendedProperty ((name "blogger.displayTime") (value "March 26, 2012 at 10:48 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4085550940491486137") (published "2012-04-02T19:55:34.737-04:00") (updated "2012-04-02T19:56:46.054-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text"))) (post-content "This comment has been removed by the author.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/6027746791514492154/comments/default/4085550940491486137") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/6027746791514492154/comments/default/4085550940491486137") (rel "self") (type "application/atom+xml"))) (author (name "Unknown") (uri "https://www.blogger.com/profile/05566851554483852450") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/04/scribble-your-blogs.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-6027746791514492154") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/6027746791514492154") (type "text/html"))) (gd:extendedProperty ((name "blogger.contentRemoved") (value "true"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1871418571"))) (gd:extendedProperty ((name "blogger.displayTime") (value "April 2, 2012 at 7:55 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3121598895359707093") (published "2012-04-02T19:57:24.672-04:00") (updated "2012-04-02T19:57:24.672-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "This is awesome! I actually rolled my own Scribble...") (post-content "This is awesome! I actually rolled my own Scribble-blog hack at http://cscheid.net (click on any post and you can see the scribble source). " (br) (br) "If I could run this on my own backend, I" 39 "d love to get rid of my kludgy setup.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/6027746791514492154/comments/default/3121598895359707093") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/6027746791514492154/comments/default/3121598895359707093") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/04/scribble-your-blogs.html?showComment=1333411044672#c3121598895359707093") (rel "alternate") (title "") (type "text/html"))) (author (name "Unknown") (uri "https://www.blogger.com/profile/05566851554483852450") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/04/scribble-your-blogs.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-6027746791514492154") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/6027746791514492154") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1871418571"))) (gd:extendedProperty ((name "blogger.displayTime") (value "April 2, 2012 at 7:57 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3723669262346268417") (published "2012-06-03T11:49:09.313-04:00") (updated "2012-06-03T11:49:09.313-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "That was enormously helpful.  I" "&" "#39;d followed the...") (post-content "That was enormously helpful.  I" 39 "d followed the discussion of submodules on the mailing list, but  hadn" 39 "t quite " "\"" "gotten" "\"" " them until now.  (I particularly like that you focused on the _problem_ that this feature solves)." (br) (br) "I hope you put this essay, or something like it, into the Racket Guide.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2509585020298466138/comments/default/3723669262346268417") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2509585020298466138/comments/default/3723669262346268417") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/06/submodules.html?showComment=1338738549313#c3723669262346268417") (rel "alternate") (title "") (type "text/html"))) (author (name "offby1") (uri "https://www.blogger.com/profile/01257566357465364171") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//3.bp.blogspot.com/_Tc1Edlz7t68/SQ07R9kk8_I/AAAAAAAAAPk/5Q_vtqPYDG8/S220-s32/yrs+trly.png") (width "21")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/06/submodules.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2509585020298466138") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2509585020298466138") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-267629600"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 3, 2012 at 11:49 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1474022327089535106") (published "2012-08-07T13:03:09.263-04:00") (updated "2012-08-07T13:03:09.263-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Awesome guys. Thanks for the hard work on this!") (post-content "Awesome guys. Thanks for the hard work on this!") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2831471944590539929/comments/default/1474022327089535106") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2831471944590539929/comments/default/1474022327089535106") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/08/racket-v53.html?showComment=1344358989263#c1474022327089535106") (rel "alternate") (title "") (type "text/html"))) (author (name "Robert") (uri "https://www.blogger.com/profile/05513580456463140264") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/08/racket-v53.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2831471944590539929") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2831471944590539929") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1123402806"))) (gd:extendedProperty ((name "blogger.displayTime") (value "August 7, 2012 at 1:03 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6620254185816126865") (published "2012-08-07T14:32:14.392-04:00") (updated "2012-08-08T08:30:22.880-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Interesting and useful... my initial wondering tho...") (post-content "Interesting and useful... my initial wondering though is how easy would it be to forge an interesting continuation? I can think of ways to guard against that as needed.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2611538924601880099/comments/default/6620254185816126865") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2611538924601880099/comments/default/6620254185816126865") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/02/zack-gallers-experience-with-stateful.html?showComment=1344364334392#c6620254185816126865") (rel "alternate") (title "") (type "text/html"))) (author (name "patrickdlogan") (uri "https://www.blogger.com/profile/09030151653908100586") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/02/zack-gallers-experience-with-stateful.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2611538924601880099") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2611538924601880099") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1250689841"))) (gd:extendedProperty ((name "blogger.displayTime") (value "August 7, 2012 at 2:32 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8041452911988163348") (published "2012-08-08T02:32:36.514-04:00") (updated "2012-08-08T02:32:36.514-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "The futures visualizer sounds very interesting!") (post-content "The futures visualizer sounds very interesting!") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2831471944590539929/comments/default/8041452911988163348") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2831471944590539929/comments/default/8041452911988163348") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/08/racket-v53.html?showComment=1344407556514#c8041452911988163348") (rel "alternate") (title "") (type "text/html"))) (author (name "nek") (uri "https://www.blogger.com/profile/17618702265623423602") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/08/racket-v53.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2831471944590539929") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2831471944590539929") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-432666569"))) (gd:extendedProperty ((name "blogger.displayTime") (value "August 8, 2012 at 2:32 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5980553558031928573") (published "2012-08-08T15:26:43.918-04:00") (updated "2012-08-08T15:26:43.918-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "@patrickdlogan, It is pretty easy to change the fr...") (post-content "@patrickdlogan, It is pretty easy to change the free variables, but basically impossible to change the control flow. There" 39 "s a trivial option in the Web server to enable signing (so that you can detect forgery) or encryption (so that you can disable their ability to read the free vars)") (link ((href "https://www.blogger.com/feeds/2080885971644496896/2611538924601880099/comments/default/5980553558031928573") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/2611538924601880099/comments/default/5980553558031928573") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/02/zack-gallers-experience-with-stateful.html?showComment=1344454003918#c5980553558031928573") (rel "alternate") (title "") (type "text/html"))) (author (name "Jay McCarthy") (uri "https://www.blogger.com/profile/07912023932333508057") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh3.googleusercontent.com/-13KUDv8LhZw/AAAAAAAAAAI/AAAAAAAAAAA/7MdiB5POU5k/s32-c/photo.jpg") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/02/zack-gallers-experience-with-stateful.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-2611538924601880099") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/2611538924601880099") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-665606500"))) (gd:extendedProperty ((name "blogger.displayTime") (value "August 8, 2012 at 3:26 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2281718648774822749") (published "2012-08-24T17:33:53.435-04:00") (updated "2012-08-24T17:33:53.435-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Looks like a functional pearl to me!") (post-content "Looks like a functional pearl to me!") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1105457027807151168/comments/default/2281718648774822749") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1105457027807151168/comments/default/2281718648774822749") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/08/fully-inlined-merge-sort.html?showComment=1345844033435#c2281718648774822749") (rel "alternate") (title "") (type "text/html"))) (author (name "Matt") (uri "http://matt.might.net/") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img1.blogblog.com/img/openid16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/08/fully-inlined-merge-sort.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1105457027807151168") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1105457027807151168") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1354225242"))) (gd:extendedProperty ((name "blogger.displayTime") (value "August 24, 2012 at 5:33 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1206854587984635534") (published "2012-08-24T22:11:25.153-04:00") (updated "2012-08-24T22:11:25.153-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "As i remember, sorting networks macro from `Let ov...") (post-content "As i remember, sorting networks macro from `Let over Lambda` book, solves the same problem differently.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1105457027807151168/comments/default/1206854587984635534") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1105457027807151168/comments/default/1206854587984635534") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/08/fully-inlined-merge-sort.html?showComment=1345860685153#c1206854587984635534") (rel "alternate") (title "") (type "text/html"))) (author (name "kmmbvnr") (uri "https://www.blogger.com/profile/07181438886288294598") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//userpic.livejournal.com/37470984/8549220") (width "24")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/08/fully-inlined-merge-sort.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1105457027807151168") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1105457027807151168") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1630574701"))) (gd:extendedProperty ((name "blogger.displayTime") (value "August 24, 2012 at 10:11 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-631749672137111614") (published "2012-08-26T00:47:26.520-04:00") (updated "2012-08-26T00:47:26.520-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Nice teaser blog, but dry. Where is the code to ex...") (post-content "Nice teaser blog, but dry. Where is the code to explain such broad statements?" (br) (br) "It sounds as if you have a point - Enough to make me want to see examples but there is nothing beneath to chew on.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3986652801908321907/comments/default/631749672137111614") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3986652801908321907/comments/default/631749672137111614") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html?showComment=1345956446520#c631749672137111614") (rel "alternate") (title "") (type "text/html"))) (author (name "Paddy3118") (uri "https://www.blogger.com/profile/06899509753521482267") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3986652801908321907") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3986652801908321907") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-100519048"))) (gd:extendedProperty ((name "blogger.displayTime") (value "August 26, 2012 at 12:47 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-455607185699546047") (published "2012-08-26T01:28:06.105-04:00") (updated "2012-08-26T01:28:06.105-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Thank you for such a nice generalization of the co...") (post-content "Thank you for such a nice generalization of the concept. I elaborated on a specific task in one of my earlier posts (http://www.jroller.com/vaclav/entry/memoize_groovy_functions_with_gpars), where by simply adding memoization on top of a recursive Fibonacci function I end-up with " (b "linear time complexity") "." (br) "Since Groovy supports space-limited variants of memoize, getting down to " (b "constant") " space complexity (exactly two values) was easily achievable, too.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3986652801908321907/comments/default/455607185699546047") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3986652801908321907/comments/default/455607185699546047") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html?showComment=1345958886105#c455607185699546047") (rel "alternate") (title "") (type "text/html"))) (author (name "VÃ¡clav Pech") (uri "https://www.blogger.com/profile/16532453869221817145") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3986652801908321907") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3986652801908321907") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1966868914"))) (gd:extendedProperty ((name "blogger.displayTime") (value "August 26, 2012 at 1:28 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5764242592458798275") (published "2012-08-26T03:20:48.603-04:00") (updated "2012-08-26T03:20:48.603-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "@Paddy3118: The simplest example I can think of is...") (post-content "@Paddy3118: The simplest example I can think of is the Fibonacci sequence. The implementations in Javascript can be as follows. " (br) "function FIB_MEMO(num) {" (br) "    var cache = { 1: 1, 2: 1 };" (br) "    function innerFib(x) {" (br) "        if(cache[x]) { return cache[x]; }" (br) "        cache[x] = (innerFib(x-1) + innerFib(x-2));" (br) "        return cache[x];" (br) "    }" (br) "    return innerFib(num);" (br) "}" (br) "function FIB_DP(num) {" (br) "    var a = 1, b = 1, i = 3, tmp;" (br) "    while(i " "<" "= num) {" (br) "        tmp = a;" (br) "        a = b;" (br) "        b = tmp + b;" (br) "        i++;" (br) "    }" (br) "    return b;" (br) "}" (br) "It can be seen that the Memoization version " "\"" "leaves computational description unchanged" "\"" ". And the DP version " "\"" "forces change in desription of the algorithm" "\"" ". Also note that the Memoization version can take a lot of stack space if you try to call the function with a large number. The trade-offs mentioned at the end of the article can easily be seen in these implementations. ") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3986652801908321907/comments/default/5764242592458798275") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3986652801908321907/comments/default/5764242592458798275") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html?showComment=1345965648603#c5764242592458798275") (rel "alternate") (title "") (type "text/html"))) (author (name "simil") (uri "https://www.blogger.com/profile/16692409994253010621") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3986652801908321907") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3986652801908321907") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-80891806"))) (gd:extendedProperty ((name "blogger.displayTime") (value "August 26, 2012 at 3:20 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4745755022496043814") (published "2012-08-26T12:25:57.065-04:00") (updated "2012-08-26T12:25:57.065-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "A small note from someone who was initially confus...") (post-content "A small note from someone who was initially confused - it was hard to parse what you meant by converting a DAG into a tree as the article didn" 39 "t mention what the nodes and edges signify. Presumably the nodes are function calls and edges indicate one call needing another. And the direction of the arrows point from the caller to the callee? It would be more clear if this was mentioned before the DAG to tree statement. " (br) "Nevertheless, a good article.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3986652801908321907/comments/default/4745755022496043814") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3986652801908321907/comments/default/4745755022496043814") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html?showComment=1345998357065#c4745755022496043814") (rel "alternate") (title "") (type "text/html"))) (author (name "commenter23") (uri "http://commenter23.myopenid.com/") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img1.blogblog.com/img/openid16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3986652801908321907") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3986652801908321907") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-483942031"))) (gd:extendedProperty ((name "blogger.displayTime") (value "August 26, 2012 at 12:25 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5973408997681325292") (published "2012-08-27T20:35:19.940-04:00") (updated "2012-08-27T20:35:19.940-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Inserting the line " "&" "quot;memoize" "&" "quot; may work be...") (post-content "Inserting the line " "\"" "memoize" "\"" " may work beautifully, but it doesn" 39 "t really illuminate what" 39 "s going on.  Would there be any point adding a version that expands that into explicitly checking and updating a table?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3986652801908321907/comments/default/5973408997681325292") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3986652801908321907/comments/default/5973408997681325292") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html?showComment=1346114119940#c5973408997681325292") (rel "alternate") (title "") (type "text/html"))) (author (name "sbloch") (uri "https://www.blogger.com/profile/10894855300223607991") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3986652801908321907") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3986652801908321907") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-581600209"))) (gd:extendedProperty ((name "blogger.displayTime") (value "August 27, 2012 at 8:35 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8217969045212102169") (published "2012-08-28T02:06:22.511-04:00") (updated "2012-08-28T02:06:22.511-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "1) I completely agree that pedagogically it" "&" "#39;s ...") (post-content "1) I completely agree that pedagogically it" 39 "s much better to teach memoization first before dynamic programming. The latter has *two* stumbling blocks for students: one the very idea of decomposing of a problem in terms of similar sub-problems, and the other the idea of filling up a table bottom-up, and it" 39 "s best to introduce them one-by-one. Then you can say " "\"" "dynamic programming is doing the memoization bottom-up" "\"" ". As an aside, for students who know mathematical induction, it sometimes helps them to say " "\"" "dynamic programming is somewhat like induction" "\"" "." (br) (br) "2) What are the fundamental misunderstandings in the " (i "Algorithms") " book? (I haven" 39 "t seen it.)" (br) (br) "3) One issue with memoization that you didn" 39 "t mention is stack overflow. Because of its depth-first nature, solving a problem for N can result in a stack depth of nearly N (even worse for problems where answers are to be computed for multiple dimensions like (M,N)); this can be an issue when stack size is small.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3986652801908321907/comments/default/8217969045212102169") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3986652801908321907/comments/default/8217969045212102169") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html?showComment=1346133982511#c8217969045212102169") (rel "alternate") (title "") (type "text/html"))) (author (name "shreevatsa") (uri "http://shreevatsa.wordpress.com/") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img1.blogblog.com/img/openid16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3986652801908321907") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3986652801908321907") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1231635756"))) (gd:extendedProperty ((name "blogger.displayTime") (value "August 28, 2012 at 2:06 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8922189366205456651") (published "2012-08-29T19:13:31.581-04:00") (updated "2012-08-29T19:13:31.581-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Stephen (sbloch), sorry, but no time to do that ri...") (post-content "Stephen (sbloch), sorry, but no time to do that right now. You" 39 "re right that that would help, but I was assuming the reader had some knowledge of memoization to begin with, or could look it up.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3986652801908321907/comments/default/8922189366205456651") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3986652801908321907/comments/default/8922189366205456651") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html?showComment=1346282011581#c8922189366205456651") (rel "alternate") (title "") (type "text/html"))) (author (name "Shriram Krishnamurthi") (uri "https://www.blogger.com/profile/02956763366608000839") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3986652801908321907") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3986652801908321907") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-935176717"))) (gd:extendedProperty ((name "blogger.displayTime") (value "August 29, 2012 at 7:13 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8956351591848367339") (published "2012-08-29T19:16:17.035-04:00") (updated "2012-08-29T19:16:17.035-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "shreevatsa, +1 to everything you said.\n\nI can" "&" "#39;...") (post-content "shreevatsa, +1 to everything you said." (br) (br) "I can" 39 "t locate the comment in " (em "Algorithms") " right now, but it was basically deprecating memoization by writing not particularly enlightened remarks about " "\"" "recursion" "\"" "." (br) (br) "One slight counter to your comment #2: if depth of recursion really is a problem, one could systematically eliminate it using techniques like CPS. Thus the solution can still be expressed as base functionality + functional abstractions + program transformations. This would be easier to read and to maintain.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3986652801908321907/comments/default/8956351591848367339") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3986652801908321907/comments/default/8956351591848367339") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html?showComment=1346282177035#c8956351591848367339") (rel "alternate") (title "") (type "text/html"))) (author (name "Shriram Krishnamurthi") (uri "https://www.blogger.com/profile/02956763366608000839") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3986652801908321907") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3986652801908321907") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-935176717"))) (gd:extendedProperty ((name "blogger.displayTime") (value "August 29, 2012 at 7:16 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1798560178344312308") (published "2012-09-19T13:48:56.530-04:00") (updated "2012-09-19T13:48:56.530-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Shriram and sbloch,\n\nAbout to talk memoization to ...") (post-content "Shriram and sbloch," (br) (br) "About to talk memoization to a class today.  Here" 39 "s a Racket memoize that should work for any number of args on the memoized function:" (br) (br) "(define (memoize f)" (br) "Â Â (local ([define table (make-hash)])" (br) "Â Â Â Â (lambda args" (br) "Â Â Â Â Â Â ;; Look up the arguments." (br) "Â Â Â Â Â Â ;; If they" 39 "re present, just give back the stored result." (br) "Â Â Â Â Â Â ;; If they" 39 "re not present, calculate and store the result." (br) "Â Â Â Â Â Â ;; Note that the calculation will not be expensive as long " (br) "Â Â Â Â Â Â ;; as f uses this memoized version for its recursive call, " (br) "Â Â Â Â Â Â ;; which is the natural way to write it!" (br) "Â Â Â Â Â Â (dict-ref! table args" (br) "Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (lambda ()" (br) "Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (apply f args))))))") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3986652801908321907/comments/default/1798560178344312308") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3986652801908321907/comments/default/1798560178344312308") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html?showComment=1348076936530#c1798560178344312308") (rel "alternate") (title "") (type "text/html"))) (author (name "wolf") (uri "https://www.blogger.com/profile/08316294022615411560") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3986652801908321907") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3986652801908321907") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1902178186"))) (gd:extendedProperty ((name "blogger.displayTime") (value "September 19, 2012 at 1:48 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6025496296346195324") (published "2012-09-19T14:05:36.707-04:00") (updated "2012-09-19T14:05:36.707-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "@wolf, nice, thanks.  Keep in mind that different ...") (post-content "@wolf, nice, thanks.  Keep in mind that different uses might want different kinds of equality comparisons (equal? vs eq?, say). May be good to remind your class of that. They could generalize your memoize to be parameterized over that (even in each position, if they want to go wild).") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3986652801908321907/comments/default/6025496296346195324") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3986652801908321907/comments/default/6025496296346195324") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html?showComment=1348077936707#c6025496296346195324") (rel "alternate") (title "") (type "text/html"))) (author (name "Shriram Krishnamurthi") (uri "https://www.blogger.com/profile/02956763366608000839") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3986652801908321907") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3986652801908321907") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-935176717"))) (gd:extendedProperty ((name "blogger.displayTime") (value "September 19, 2012 at 2:05 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8444712209529893194") (published "2012-09-28T17:21:16.430-04:00") (updated "2012-09-28T17:21:16.430-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Beautiful!") (post-content "Beautiful!") (link ((href "https://www.blogger.com/feeds/2080885971644496896/6798041830905815449/comments/default/8444712209529893194") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/6798041830905815449/comments/default/8444712209529893194") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/09/i-write-funny-lookin-racket-code.html?showComment=1348867276430#c8444712209529893194") (rel "alternate") (title "") (type "text/html"))) (author (name "Robby Findler") (uri "https://www.blogger.com/profile/08402308775580442837") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/09/i-write-funny-lookin-racket-code.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-6798041830905815449") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/6798041830905815449") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1090470180"))) (gd:extendedProperty ((name "blogger.displayTime") (value "September 28, 2012 at 5:21 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4027149730587043659") (published "2012-09-28T17:31:41.581-04:00") (updated "2012-09-28T17:31:41.581-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "There is a good reason for the arguments of a func...") (post-content "There is a good reason for the arguments of a function to be lined up: it makes the sexpr tree easily visible, no thoughts on how things match up needed.  And indeed, as someone who is used to having this very visible structure, I find the two-space indentation for all arguments except for the first that is left on the first line much harder to read.  Combined with multiple expressions on the first line I can see how this can get to be even worse (though not with simple " "\"" "+" "\"" " and " "\"" "0" "\"" ").  (Obviously, you" 39 "ll disagree as someone who is used to not getting these visual cues, which is why these are fertile flamewar materials.)" (br) (br) "In addition, IIUC, the curly brace thing is a way that forces you to specify stuff on each and every form, instead of making your editor know about these forms -- and in that case it looks like a bad deal for me, sacrificing visual readability, and overall requiring me to do more work than adding one more name into my editor configuration." (br)) (link ((href "https://www.blogger.com/feeds/2080885971644496896/6798041830905815449/comments/default/4027149730587043659") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/6798041830905815449/comments/default/4027149730587043659") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/09/i-write-funny-lookin-racket-code.html?showComment=1348867901581#c4027149730587043659") (rel "alternate") (title "") (type "text/html"))) (author (name "Eli Barzilay") (uri "https://www.blogger.com/profile/04250857957616050612") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh5.googleusercontent.com/-eR9w2qhxsD0/AAAAAAAAAAI/AAAAAAAAAHk/-lcs3Nw2_es/s32-c/photo.jpg") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/09/i-write-funny-lookin-racket-code.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-6798041830905815449") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/6798041830905815449") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1302984543"))) (gd:extendedProperty ((name "blogger.displayTime") (value "September 28, 2012 at 5:31 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8521338938021875180") (published "2012-09-28T19:21:30.440-04:00") (updated "2012-09-28T19:21:30.440-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "re:Eli --\n\nYep, this style definitely isn" "&" "#39;t fo...") (post-content "re:Eli --" (br) (br) "Yep, this style definitely isn" 39 "t for everyone, and it" 39 "s definitely got some huge tradeoffs.  I am acutely aware that I sometimes sacrifice the ability to easily tell how many arguments something has, and that" 39 "s one place I" 39 "m not sure I made the right decision.  I am careful to only put multiple things on the same line if they" 39 "re right after the function name, or in the case of functions like error or printf where I" 39 "m just filling in values for the " "\"" "~a" "\"" " or " "\"" "~s" "\"" " escapes.  Otherwise, after the first line, I definitely want a clear visual marker of how many arguments there are." (br) (br) "As for the curly braces, I like that I have to put some thought into the indentation myself.  The braces give more than just whitespace to say what" 39 "s " "\"" "special" "\"" ".  Frankly I" 39 "m annoyed at how much extra duty () does, and I prefer making an explicit distinction." (br) (br) "But I" 39 "m definitely not trying to sway anyone here away from traditional Racket style, just presenting my own odd habits.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/6798041830905815449/comments/default/8521338938021875180") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/6798041830905815449/comments/default/8521338938021875180") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/09/i-write-funny-lookin-racket-code.html?showComment=1348874490440#c8521338938021875180") (rel "alternate") (title "") (type "text/html"))) (author (name "Carl Eastlund") (uri "https://www.blogger.com/profile/00965085482378134816") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/09/i-write-funny-lookin-racket-code.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-6798041830905815449") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/6798041830905815449") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-292384904"))) (gd:extendedProperty ((name "blogger.displayTime") (value "September 28, 2012 at 7:21 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4834738704494983108") (published "2012-10-25T12:44:11.240-04:00") (updated "2012-10-25T12:44:11.240-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Why (define answer ...) rather than a let?") (post-content "Why (define answer ...) rather than a let?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1332705295037674198/comments/default/4834738704494983108") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1332705295037674198/comments/default/4834738704494983108") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/10/the-3n1-problem_4990.html?showComment=1351183451240#c4834738704494983108") (rel "alternate") (title "") (type "text/html"))) (author (name "Ben W") (uri "https://www.blogger.com/profile/06887096661154495898") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/10/the-3n1-problem_4990.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1332705295037674198") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1332705295037674198") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1790256835"))) (gd:extendedProperty ((name "blogger.displayTime") (value "October 25, 2012 at 12:44 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5922141698366506026") (published "2012-10-25T12:51:02.771-04:00") (updated "2012-10-25T12:51:02.771-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "For the short answer, see the Racket Style Guide, ...") (post-content "For the short answer, see the Racket Style Guide, " (a ((href "http://www.ccs.neu.edu/home/matthias/Style/style/Choosing_the_Right_Construct.html#%28part._.Definitions%29") (rel "nofollow")) "Section 4.2") ".") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1332705295037674198/comments/default/5922141698366506026") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1332705295037674198/comments/default/5922141698366506026") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/10/the-3n1-problem_4990.html?showComment=1351183862771#c5922141698366506026") (rel "alternate") (title "") (type "text/html"))) (author (name "John Clements") (uri "https://www.blogger.com/profile/15701081040575095781") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/10/the-3n1-problem_4990.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1332705295037674198") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1332705295037674198") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-997603040"))) (gd:extendedProperty ((name "blogger.displayTime") (value "October 25, 2012 at 12:51 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5363874051121351298") (published "2012-10-25T14:42:35.593-04:00") (updated "2012-10-25T14:42:35.593-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "The â3" "<" "i" ">" "n" "<" "/i" ">" "+1 problemâ is also known as the " "<" "a ...") (post-content "The â3" (i "n") "+1 problemâ is also known as the " (a ((href "http://en.wikipedia.org/wiki/Collatz_conjecture") (rel "nofollow")) "Collatz conjecture") ".") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1332705295037674198/comments/default/5363874051121351298") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1332705295037674198/comments/default/5363874051121351298") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/10/the-3n1-problem_4990.html?showComment=1351190555593#c5363874051121351298") (rel "alternate") (title "") (type "text/html"))) (author (name "roryokane.com") (uri "http://roryokane.com/") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img1.blogblog.com/img/openid16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/10/the-3n1-problem_4990.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1332705295037674198") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1332705295037674198") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-265061826"))) (gd:extendedProperty ((name "blogger.displayTime") (value "October 25, 2012 at 2:42 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1919344779905913967") (published "2012-10-25T15:21:49.490-04:00") (updated "2012-10-25T15:21:49.490-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Here" "&" "#39;s a solution in Factor:\n\n" "<" "a href=\"http://...") (post-content "Here" 39 "s a solution in Factor:" (br) (br) (a ((href "http://re-factor.blogspot.com/2012/10/the-3n1-problem.html") (rel "nofollow")) "http://re-factor.blogspot.com/2012/10/the-3n1-problem.html")) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1332705295037674198/comments/default/1919344779905913967") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1332705295037674198/comments/default/1919344779905913967") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/10/the-3n1-problem_4990.html?showComment=1351192909490#c1919344779905913967") (rel "alternate") (title "") (type "text/html"))) (author (name "mrjbq7") (uri "https://www.blogger.com/profile/06842721076008035602") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//2.bp.blogspot.com/-xLwC1PPMlnI/TfL3qtTjptI/AAAAAAAAAKs/wff2BBuKyBw/s32/ea4776c7b52421a55566eb2a23925c1e") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/10/the-3n1-problem_4990.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1332705295037674198") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1332705295037674198") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-648145052"))) (gd:extendedProperty ((name "blogger.displayTime") (value "October 25, 2012 at 3:21 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4297894421274871777") (published "2012-10-29T14:12:29.756-04:00") (updated "2012-10-29T14:12:29.756-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Wonderful post.  Have you considered using hash-re...") (post-content "Wonderful post.  Have you considered using hash-ref! to make define/memo a little simpler as in:" (br) (br) "(define-syntax-rule (define/memo (name id) body ...)" (br) "  (begin " (br) "    (define table (make-hash))" (br) "    (define (name id)" (br) "      (hash-ref! table id (thunk body ...)))))") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1332705295037674198/comments/default/4297894421274871777") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1332705295037674198/comments/default/4297894421274871777") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/10/the-3n1-problem_4990.html?showComment=1351534349756#c4297894421274871777") (rel "alternate") (title "") (type "text/html"))) (author (name "Marty N.") (uri "https://www.blogger.com/profile/09944627676228188097") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/10/the-3n1-problem_4990.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1332705295037674198") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1332705295037674198") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-438764387"))) (gd:extendedProperty ((name "blogger.displayTime") (value "October 29, 2012 at 2:12 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6168785053455709511") (published "2012-11-01T15:03:07.436-04:00") (updated "2012-11-01T15:03:07.436-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "@marty: I wanted to keep the correspondence betwee...") (post-content "@marty: I wanted to keep the correspondence between the non-macro version of the function and the macro as clear as possible.  That way, it" 39 "s a little more clear how the code evolves.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1332705295037674198/comments/default/6168785053455709511") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1332705295037674198/comments/default/6168785053455709511") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/10/the-3n1-problem_4990.html?showComment=1351796587436#c6168785053455709511") (rel "alternate") (title "") (type "text/html"))) (author (name "Danny Yoo") (uri "https://www.blogger.com/profile/04298793721597988477") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/10/the-3n1-problem_4990.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1332705295037674198") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1332705295037674198") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1141249508"))) (gd:extendedProperty ((name "blogger.displayTime") (value "November 1, 2012 at 3:03 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5447991170667519574") (published "2012-11-15T08:37:41.513-05:00") (updated "2012-11-15T08:37:41.513-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Excellent work!") (post-content "Excellent work!") (link ((href "https://www.blogger.com/feeds/2080885971644496896/6058216596377504471/comments/default/5447991170667519574") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/6058216596377504471/comments/default/5447991170667519574") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/11/drracket-now-more-responsive_15.html?showComment=1352986661513#c5447991170667519574") (rel "alternate") (title "") (type "text/html"))) (author (name "grant rettke") (uri "https://www.blogger.com/profile/09439997834215273665") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_NaL_QCOmC2s/SU59EVByZ2I/AAAAAAAAABE/WK5EiDdNawY/S220-s32/GrantRettkeBC2MKE-HEADSHOT.png") (width "26")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/11/drracket-now-more-responsive_15.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-6058216596377504471") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/6058216596377504471") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1104808594"))) (gd:extendedProperty ((name "blogger.displayTime") (value "November 15, 2012 at 8:37 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1843501996167142867") (published "2012-11-15T18:40:54.766-05:00") (updated "2012-11-15T18:40:54.766-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "the attention to details you guys have is incredib...") (post-content "the attention to details you guys have is incredible. thanks for the hard work.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/6058216596377504471/comments/default/1843501996167142867") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/6058216596377504471/comments/default/1843501996167142867") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/11/drracket-now-more-responsive_15.html?showComment=1353022854766#c1843501996167142867") (rel "alternate") (title "") (type "text/html"))) (author (name "Jay Kominek") (uri "https://www.blogger.com/profile/10329111965764211579") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/11/drracket-now-more-responsive_15.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-6058216596377504471") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/6058216596377504471") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-641119690"))) (gd:extendedProperty ((name "blogger.displayTime") (value "November 15, 2012 at 6:40 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6673367038011100735") (published "2012-11-15T20:10:43.030-05:00") (updated "2012-11-15T20:10:43.030-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "As a user of DrRacket @ 2560x1600, this is amazing...") (post-content "As a user of DrRacket @ 2560x1600, this is amazing news!") (link ((href "https://www.blogger.com/feeds/2080885971644496896/6058216596377504471/comments/default/6673367038011100735") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/6058216596377504471/comments/default/6673367038011100735") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/11/drracket-now-more-responsive_15.html?showComment=1353028243030#c6673367038011100735") (rel "alternate") (title "") (type "text/html"))) (author (name "Nick Sivo") (uri "https://www.blogger.com/profile/05687319746101613481") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh4.googleusercontent.com/-Td3qlFAaP6E/AAAAAAAAAAI/AAAAAAAAAB0/MZZq2vbYUaQ/s32-c/photo.jpg") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/11/drracket-now-more-responsive_15.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-6058216596377504471") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/6058216596377504471") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-124247732"))) (gd:extendedProperty ((name "blogger.displayTime") (value "November 15, 2012 at 8:10 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8869541474363035007") (published "2012-11-16T14:02:25.640-05:00") (updated "2012-11-16T14:02:25.640-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "That is excellent.") (post-content "That is excellent.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/5330446382626738029/comments/default/8869541474363035007") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/5330446382626738029/comments/default/8869541474363035007") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/11/contracts-for-object-oriented_4671.html?showComment=1353092545640#c8869541474363035007") (rel "alternate") (title "") (type "text/html"))) (author (name "grant rettke") (uri "https://www.blogger.com/profile/09439997834215273665") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_NaL_QCOmC2s/SU59EVByZ2I/AAAAAAAAABE/WK5EiDdNawY/S220-s32/GrantRettkeBC2MKE-HEADSHOT.png") (width "26")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/11/contracts-for-object-oriented_4671.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-5330446382626738029") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/5330446382626738029") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1104808594"))) (gd:extendedProperty ((name "blogger.displayTime") (value "November 16, 2012 at 2:02 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-624139430354843116") (published "2012-11-23T13:08:36.311-05:00") (updated "2012-11-23T13:08:36.311-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I(define MMMMM " "&" "quot;that is especially delicious!...") (post-content "I(define MMMMM " "\"" "that is especially delicious!" "\"" ")" (br) (br)) (link ((href "https://www.blogger.com/feeds/2080885971644496896/6990759196656319841/comments/default/624139430354843116") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/6990759196656319841/comments/default/624139430354843116") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/11/roman-numerals-in-racket-sources.html?showComment=1353694116311#c624139430354843116") (rel "alternate") (title "") (type "text/html"))) (author (name "steck") (uri "https://www.blogger.com/profile/13416750891822431224") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/11/roman-numerals-in-racket-sources.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-6990759196656319841") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/6990759196656319841") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1284969587"))) (gd:extendedProperty ((name "blogger.displayTime") (value "November 23, 2012 at 1:08 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7478765915681795623") (published "2012-11-23T15:38:28.000-05:00") (updated "2012-11-23T15:38:28.000-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "It" "&" "#39;s a great setup for counters, too:\n" "<" "i" ">" "(do (...") (post-content "It" 39 "s a great setup for counters, too:" (br) (i "(do ((i i â¦)) â¦)")) (link ((href "https://www.blogger.com/feeds/2080885971644496896/6990759196656319841/comments/default/7478765915681795623") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/6990759196656319841/comments/default/7478765915681795623") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/11/roman-numerals-in-racket-sources.html?showComment=1353703108000#c7478765915681795623") (rel "alternate") (title "") (type "text/html"))) (author (name "YeshuaAaron") (uri "https://www.blogger.com/profile/04044518092162154806") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/11/roman-numerals-in-racket-sources.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-6990759196656319841") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/6990759196656319841") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-186116893"))) (gd:extendedProperty ((name "blogger.displayTime") (value "November 23, 2012 at 3:38 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4281145706155179780") (published "2013-03-24T19:40:19.895-04:00") (updated "2013-03-24T19:40:19.895-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "The Racket home page is unusual in not having any ...") (post-content "The Racket home page is unusual in not having any sort of top-level " "\"" "News" "\"" " link. Perhaps it could have a direct link to the Blog? I was reduced to googling (though I could" 39 "ve found it under " "\"" "Community" "\"" ", I later discovered). If it" 39 "s considered there are already enough top-level links, you might consider removing " "\"" "PLaneT" "\"" ", as it" 39 "s not self-explanatory, and users who frequent it will presumably not go via the Racket home page (there are many quicker ways to get to PLaneT directly, and the home page" 39 "s design looks, as it should be, newbie friendly with comprehensive navigation for experts who" 39 "ve lost their way, rather than efficient for regular expert use).") (link ((href "https://www.blogger.com/feeds/2080885971644496896/4397120307418153629/comments/default/4281145706155179780") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/4397120307418153629/comments/default/4281145706155179780") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2013/02/racket-v533.html?showComment=1364168419895#c4281145706155179780") (rel "alternate") (title "") (type "text/html"))) (author (name "Reuben Thomas") (uri "https://www.blogger.com/profile/09606804507314336057") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2013/02/racket-v533.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-4397120307418153629") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/4397120307418153629") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-339223045"))) (gd:extendedProperty ((name "blogger.displayTime") (value "March 24, 2013 at 7:40 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1578955577333892216") (published "2013-04-30T07:20:21.173-04:00") (updated "2013-06-07T10:53:20.091-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "For reference, cross-ref with Greg" "&" "#39;s post on i...") (post-content "For reference, cross-ref with Greg" 39 "s post on infrequent contributions to Racket:" (br) "www.greghendershott.com/2013/04/a-guide-for-infrequent-contributors-to-racket.html") (link ((href "https://www.blogger.com/feeds/2080885971644496896/6691486104646166484/comments/default/1578955577333892216") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/6691486104646166484/comments/default/1578955577333892216") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/11/tutorial-contributing-to-racket.html?showComment=1367320821173#c1578955577333892216") (rel "alternate") (title "") (type "text/html"))) (author (name "Laurent") (uri "https://www.blogger.com/profile/18317864132967373178") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/11/tutorial-contributing-to-racket.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-6691486104646166484") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/6691486104646166484") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-437702566"))) (gd:extendedProperty ((name "blogger.displayTime") (value "April 30, 2013 at 7:20 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3505271733062681195") (published "2013-05-30T06:47:08.433-04:00") (updated "2013-05-30T06:47:08.433-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "This looks really cool.  I can" "&" "#39;t wait to try i...") (post-content "This looks really cool.  I can" 39 "t wait to try it out.  How does it perform, and how robust is it against cracking attempts?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/4646560227884734416/comments/default/3505271733062681195") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/4646560227884734416/comments/default/3505271733062681195") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2013/05/marketplace-language-for-network-aware.html?showComment=1369910828433#c3505271733062681195") (rel "alternate") (title "") (type "text/html"))) (author (name "Geoff Knauth") (uri "https://www.blogger.com/profile/12025560607512616605") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//4.bp.blogspot.com/_sWo4l8cUvg0/S82vpaUHzeI/AAAAAAAAABU/oeNNt1KeXSg/S220-s32/gsk200506.jpg") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2013/05/marketplace-language-for-network-aware.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-4646560227884734416") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/4646560227884734416") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1692477807"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 30, 2013 at 6:47 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7582010766010738705") (published "2013-05-31T05:21:08.574-04:00") (updated "2013-05-31T05:21:08.574-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Interesting. I guess it" "&" "#39;s inspired by Erlang. ...") (post-content "Interesting. I guess it" 39 "s inspired by Erlang. What" 39 "s the reason for calling this a programming language, and not just a framework or library? I look forward to more information, and tutorials.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/4646560227884734416/comments/default/7582010766010738705") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/4646560227884734416/comments/default/7582010766010738705") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2013/05/marketplace-language-for-network-aware.html?showComment=1369992068574#c7582010766010738705") (rel "alternate") (title "") (type "text/html"))) (author (name "Jon") (uri "https://www.blogger.com/profile/12090708073678465408") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2013/05/marketplace-language-for-network-aware.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-4646560227884734416") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/4646560227884734416") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1447175274"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 31, 2013 at 5:21 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8760978543622532428") (published "2013-05-31T09:09:38.166-04:00") (updated "2013-05-31T09:09:38.166-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Geoff, we haven" "&" "#39;t yet tried to optimize this f...") (post-content "Geoff, we haven" 39 "t yet tried to optimize this for performance, but the DNS proxy built with Marketplace serves all the DNS traffic for a bunch of people in our lab. As for security, that" 39 "s all about what application you write using it.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/4646560227884734416/comments/default/8760978543622532428") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/4646560227884734416/comments/default/8760978543622532428") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2013/05/marketplace-language-for-network-aware.html?showComment=1370005778166#c8760978543622532428") (rel "alternate") (title "") (type "text/html"))) (author (name "Sam Tobin-Hochstadt") (uri "https://www.blogger.com/profile/12049111326816937908") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2013/05/marketplace-language-for-network-aware.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-4646560227884734416") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/4646560227884734416") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1574730235"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 31, 2013 at 9:09 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5298581400124421320") (published "2013-05-31T09:11:10.415-04:00") (updated "2013-05-31T09:11:10.415-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Jon, yes, Erlang is a big inspiration, among many ...") (post-content "Jon, yes, Erlang is a big inspiration, among many other things. It" 39 "s a language in the sense that it goes after `#lang`, and in the sense that it extends the programming model in a fundamental way.  Ultimately, the distinction between framework, language, and library is fuzzy.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/4646560227884734416/comments/default/5298581400124421320") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/4646560227884734416/comments/default/5298581400124421320") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2013/05/marketplace-language-for-network-aware.html?showComment=1370005870415#c5298581400124421320") (rel "alternate") (title "") (type "text/html"))) (author (name "Sam Tobin-Hochstadt") (uri "https://www.blogger.com/profile/12049111326816937908") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2013/05/marketplace-language-for-network-aware.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-4646560227884734416") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/4646560227884734416") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1574730235"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 31, 2013 at 9:11 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4617781136627451500") (published "2013-06-07T18:07:28.685-04:00") (updated "2013-06-13T12:21:33.940-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Racket is climbing the rankings ...\n\nhttp://timb.n...") (post-content "Racket is climbing the rankings ..." (br) (br) "http://timb.net/popular-languages.html") (link ((href "https://www.blogger.com/feeds/2080885971644496896/5066620541424773352/comments/default/4617781136627451500") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/5066620541424773352/comments/default/4617781136627451500") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2013/03/200_25.html?showComment=1370642848685#c4617781136627451500") (rel "alternate") (title "") (type "text/html"))) (author (name "Daniel Prager") (uri "https://www.blogger.com/profile/05502083078481742896") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//1.bp.blogspot.com/_NCmMYTi-30s/Svivw1YDXwI/AAAAAAAAAIU/k0SNR_3QYlg/S220-s32/Screen+shot+2009-11-09+at+9.10.50+AM.png") (width "30")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2013/03/200_25.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-5066620541424773352") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/5066620541424773352") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1464953097"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 7, 2013 at 6:07 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-844435991365407096") (published "2013-07-02T06:43:53.325-04:00") (updated "2013-07-03T09:22:01.056-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Happy Birthday! \nThanks a lot for this great progr...") (post-content "Happy Birthday! " (br) "Thanks a lot for this great program. I am using it in the Coursera class " "\"" "Introduction to Systematic Program Design" "\"" ". I am a beginner in programming and find it very nice to use." (br) "Have a wonderful day!") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8001080601289810210/comments/default/844435991365407096") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8001080601289810210/comments/default/844435991365407096") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2007/09/birthday-easter-eggs-in-drscheme.html?showComment=1372761833325#c844435991365407096") (rel "alternate") (title "") (type "text/html"))) (author (name "Unknown") (uri "https://www.blogger.com/profile/03765350174284658895") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2007/09/birthday-easter-eggs-in-drscheme.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8001080601289810210") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8001080601289810210") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1297296018"))) (gd:extendedProperty ((name "blogger.displayTime") (value "July 2, 2013 at 6:43 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4527948472797081741") (published "2013-12-02T10:17:29.641-05:00") (updated "2013-12-02T11:26:59.228-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Got here from your parsing G+ post.\n\nYou are unfai...") (post-content "Got here from your parsing G+ post." (br) (br) "You are unfair towards " (i "Algorithms") ". The statement they make is: " "\"" "However, the constant factor in this big-O notation is substantially larger because of the overhead of recursion." "\"" " That " (i "was") " true of hardware from more than 20 years ago; It" 39 "s not true today, as far as I know. Although you can make the case that with DP it" 39 "s easier to control cache locality, and cache locality still matters, a lot." (br) (br) (i "If") " you view these remarks as trying to say something about what memoization is, then they are wrong. But, they aren" 39 "t supposed to be remarks about what memoization is. They are simply practical considerations that are " (i "related") " to memoization." (br) (br) "Imagine someone says: " "\"" "DFS might be more appropriate than BFS in this case, because space might be an issue; but be careful -- most hardware takes a lot longer to execute a " 39 "call" 39 " as compared to a " 39 "jmp" 39 "." "\"" " Is this statement a mis-informed indictment of DFS? Not really. You can do DFS without calls. For that matter, you can do memoization without " 39 "call" 39 "s. (Oh, wait, you already mentioned CPS. :) )") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3986652801908321907/comments/default/4527948472797081741") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3986652801908321907/comments/default/4527948472797081741") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html?showComment=1385997449641#c4527948472797081741") (rel "alternate") (title "") (type "text/html"))) (author (name "Radu Grigore") (uri "https://www.blogger.com/profile/02991214367108471744") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh4.googleusercontent.com/-qUUZcf9ulqQ/AAAAAAAAAAI/AAAAAAAAPLs/VW1pP27XtJ8/s32-c/photo.jpg") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3986652801908321907") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3986652801908321907") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1221964742"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 2, 2013 at 10:17 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1549928794933531326") (published "2013-12-02T14:49:58.674-05:00") (updated "2013-12-02T14:49:58.674-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Radu, okay, my remark may be a " "<" "i" ">" "bit" "<" "/i" ">" " too hars...") (post-content "Radu, okay, my remark may be a " (i "bit") " too harsh. Sure.  But I can throw in other criticisms too: the fact that it appears so late in the book, only as a sidebar, and is then called a " "\"" "trick" "\"" ", as if the DP version of the algorithm were somehow fundamental! Of course, the next criticism would be, " "\"" "Hey, they at least mentioned it -- most algorithms textbooks don" 39 "t do even that!" "\"" " So at the end of the day, it" 39 "s all just damning with faint praise.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3986652801908321907/comments/default/1549928794933531326") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3986652801908321907/comments/default/1549928794933531326") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html?showComment=1386013798674#c1549928794933531326") (rel "alternate") (title "") (type "text/html"))) (author (name "Shriram Krishnamurthi") (uri "https://www.blogger.com/profile/02956763366608000839") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3986652801908321907") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3986652801908321907") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-935176717"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 2, 2013 at 2:49 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6036086367814574024") (published "2013-12-02T16:35:35.033-05:00") (updated "2013-12-02T16:35:35.033-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Also, Radu, I" "&" "#39;m curious why it" "&" "#39;s fine for ...") (post-content "Also, Radu, I" 39 "m curious why it" 39 "s fine for a book written in 2006 to say things you believe were out of date for at least 13 years at that point. (-:") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3986652801908321907/comments/default/6036086367814574024") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3986652801908321907/comments/default/6036086367814574024") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html?showComment=1386020135033#c6036086367814574024") (rel "alternate") (title "") (type "text/html"))) (author (name "Shriram Krishnamurthi") (uri "https://www.blogger.com/profile/02956763366608000839") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3986652801908321907") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3986652801908321907") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-935176717"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 2, 2013 at 4:35 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3270968843955600927") (published "2013-12-03T05:01:30.076-05:00") (updated "2013-12-03T13:37:46.741-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "The statement they make about constant factors is ...") (post-content "The statement they make about constant factors is about how hardware works, not about a fundamental issue. This is my point." (br) (br) "I" 39 "ll try to show you why your criticism is unfair, by temporarily putting you at the other end of a similar line of attack. So, please indulge me, and don" 39 "t get too annoyed." (br) (br) "--- start ---" (br) (br) "Your omission of cache locality from the comparison demonstrates a fundamental misunderstanding. OK maybe that is a " (i "bit") " too harsh. However, it does show that you haven" 39 "t actually benchmarked your levenshtein implementation against a DP version that keeps only the fringe, so you don" 39 "t know what" 39 "s the difference in performance. But, how could anyone believe that not knowing this is OK?" (br) (br) "--- stop ---" (br) (br) "I believe that the above criticism of your post is unfair, and similar to your criticism of the book." (br) (br) "The book is a small jewel, with emphasis on small. It is packed with cool tricks (where " "\"" "trick" "\"" " is to be understood as something good). Too bad they wrote that book " (i "after") " I learned those tricks the tedious way." (br) (br) "Your post is pretty good too. I especially liked the quiz at the end.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3986652801908321907/comments/default/3270968843955600927") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3986652801908321907/comments/default/3270968843955600927") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html?showComment=1386064890076#c3270968843955600927") (rel "alternate") (title "") (type "text/html"))) (author (name "Radu Grigore") (uri "https://www.blogger.com/profile/02991214367108471744") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh4.googleusercontent.com/-qUUZcf9ulqQ/AAAAAAAAAAI/AAAAAAAAPLs/VW1pP27XtJ8/s32-c/photo.jpg") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3986652801908321907") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3986652801908321907") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1221964742"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 3, 2013 at 5:01 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-6490226276274326249") (published "2013-12-11T16:43:28.375-05:00") (updated "2013-12-12T01:14:04.726-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Shriram: I wasn" "&" "#39;t sure whether they are right ...") (post-content "Shriram: I wasn" 39 "t sure whether they are right about the " "\"" "overhead of recursion" "\"" ". I thought they are wrong, but I did some experiments and it seems they are right-ish: http://rgrig.blogspot.com/2013/12/edit-distance-benchmarks.html") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3986652801908321907/comments/default/6490226276274326249") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3986652801908321907/comments/default/6490226276274326249") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html?showComment=1386798208375#c6490226276274326249") (rel "alternate") (title "") (type "text/html"))) (author (name "Radu Grigore") (uri "https://www.blogger.com/profile/02991214367108471744") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh4.googleusercontent.com/-qUUZcf9ulqQ/AAAAAAAAAAI/AAAAAAAAPLs/VW1pP27XtJ8/s32-c/photo.jpg") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3986652801908321907") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3986652801908321907") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1221964742"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 11, 2013 at 4:43 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2395751189604660285") (published "2013-12-12T08:26:55.418-05:00") (updated "2013-12-12T08:26:55.418-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Thanks. I did some experiments with using the same...") (post-content "Thanks. I did some experiments with using the same data structure in both cases, and I got a slight gain from the memoized version. " (br) (br) "Note that my DP version uses an option type to prevent accidental use of an uninitialized slot, because if you truly want to compare the two, you should make sure you have the same safety characteristics. " (br) (br) "Remove that and I believe the DP version is indeed a bit faster, but now you" 39 "re comparing a safe and unsafe implementation of a problem. That" 39 "s not a fair comparison and the difference can" 39 "t be attributed entirely to the calling mechanism." (br) (br) "Also, whether or not you use a " "\"" "safe" "\"" " DP, in the memoized version you also have to check for whether the problem has already been solved. How do you know that the overhead you" 39 "re seeing is entirely due to recursion, and not due to this?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3986652801908321907/comments/default/2395751189604660285") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3986652801908321907/comments/default/2395751189604660285") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html?showComment=1386854815418#c2395751189604660285") (rel "alternate") (title "") (type "text/html"))) (author (name "Shriram Krishnamurthi") (uri "https://www.blogger.com/profile/02956763366608000839") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3986652801908321907") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3986652801908321907") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-935176717"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 12, 2013 at 8:26 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-311792297313565757") (published "2013-12-19T03:54:28.021-05:00") (updated "2015-09-21T21:52:33.582-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I will have to disagree with what you call a fair ...") (post-content "I will have to disagree with what you call a fair comparison. But I want to use as a starting point a statement on which we probably agree: Memoization is more clear, more elegant, and safer." (br) (br) "But things like memoization and dynamic programming do not live in a totally ordered universe. There are multiple dimensions across which they can be compared, such as correctness and efficiency. Clarity, elegance and safety all have to do with correctness." (br) (br) "When you say that it isn" 39 "t fair to implement dp without options, that sounds to me like saying it isn" 39 "t fair to compare a program with an optimized version of itself. For example, like saying that comparing a program with array bounds checks against the version without bounds checks isn" 39 "t fair. And I can" 39 "t agree with this." (br) (br) "What wouldn" 39 "t be fair would be to not acknowledge that there is a trade-off involved: you gain efficiency, but you lose safety. The latter means that the programmer needs to do more work to achieve correctness. And yes, almost always this is a bad trade-off." (br) (br) "In summary, comparing memoization with a patched up version of dp that tries to recover some safety looks very odd to me." (br) (br) "\"" "I believe the DP version is indeed a bit faster" "\"" (br) (br) "If by " "\"" "a bit faster" "\"" " you mean " "\"" "about twice as fast" "\"" ", then I agree. Otherwise, I" 39 "m tempted to ask to see your code. :)" (br) (br) "\"" "How do you know that the overhead you" 39 "re seeing is entirely due to recursion, and not due to [checking whether a result is already available]?" "\"" (br) (br) "I could add the checking overhead to dp and see how big it is. But why would I? The number you really care about when comparing efficiency is the overall time.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3986652801908321907/comments/default/311792297313565757") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3986652801908321907/comments/default/311792297313565757") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html?showComment=1387443268021#c311792297313565757") (rel "alternate") (title "") (type "text/html"))) (author (name "Radu Grigore") (uri "https://www.blogger.com/profile/02991214367108471744") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh4.googleusercontent.com/-qUUZcf9ulqQ/AAAAAAAAAAI/AAAAAAAAPLs/VW1pP27XtJ8/s32-c/photo.jpg") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/08/dynamic-programming-versus-memoization.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3986652801908321907") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3986652801908321907") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1221964742"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 19, 2013 at 3:54 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-607309934304914510") (published "2014-01-15T04:50:25.962-05:00") (updated "2014-01-15T06:53:48.542-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Interesting stuff. These days I find data + interf...") (post-content "Interesting stuff. These days I find data + interfaces all I really need to in terms of " "\"" "object orientation" "\"" ". " (br) (br) "Given all this, is it possible to define new sequence methods in a similar way?" (br) (br)) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1317537382478082961/comments/default/607309934304914510") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1317537382478082961/comments/default/607309934304914510") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2012/11/generics.html?showComment=1389779425962#c607309934304914510") (rel "alternate") (title "") (type "text/html"))) (author (name "Unknown") (uri "https://www.blogger.com/profile/08718456473983768321") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2012/11/generics.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1317537382478082961") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1317537382478082961") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1257526543"))) (gd:extendedProperty ((name "blogger.displayTime") (value "January 15, 2014 at 4:50 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4297830106644317847") (published "2014-02-27T12:42:25.918-05:00") (updated "2014-02-27T12:42:25.918-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "How do I install the minimal set?  So far I can on...") (post-content "How do I install the minimal set?  So far I can only find it mentioned in announcements but can never find any instruction.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3293119573994585529/comments/default/4297830106644317847") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3293119573994585529/comments/default/4297830106644317847") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2014/02/racket-v60.html?showComment=1393522945918#c4297830106644317847") (rel "alternate") (title "") (type "text/html"))) (author (name "Yi D") (uri "https://www.blogger.com/profile/14359320866411018319") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh5.googleusercontent.com/-00-NS5MmYO4/AAAAAAAAAAI/AAAAAAAAAgw/s34Xju-tvQY/s32-c/photo.jpg") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2014/02/racket-v60.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3293119573994585529") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3293119573994585529") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1596998224"))) (gd:extendedProperty ((name "blogger.displayTime") (value "February 27, 2014 at 12:42 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7403718769284913191") (published "2014-02-27T17:04:27.579-05:00") (updated "2014-02-27T17:04:27.579-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "To install Minimal Racket, follow the " "&" "quot;All Ve...") (post-content "To install Minimal Racket, follow the " "\"" "All Versions" "\"" " link from the download page, and then click " "\"" "[download Racket Minimal]" "\"" " on the first row of the table." (br) (br) "We plan to revise the download page so that the Minimal Racket option easier to find.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3293119573994585529/comments/default/7403718769284913191") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3293119573994585529/comments/default/7403718769284913191") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2014/02/racket-v60.html?showComment=1393538667579#c7403718769284913191") (rel "alternate") (title "") (type "text/html"))) (author (name "Matthew Flatt") (uri "https://www.blogger.com/profile/12609292743297097983") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2014/02/racket-v60.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3293119573994585529") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3293119573994585529") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-352392060"))) (gd:extendedProperty ((name "blogger.displayTime") (value "February 27, 2014 at 5:04 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4678235335766346990") (published "2014-03-19T05:55:17.213-04:00") (updated "2014-03-19T05:55:17.213-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Will there be a section on compiling for ARM? Is i...") (post-content "Will there be a section on compiling for ARM? Is it possible to target Android and use NDK? I have not been finding much on this.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3293119573994585529/comments/default/4678235335766346990") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3293119573994585529/comments/default/4678235335766346990") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2014/02/racket-v60.html?showComment=1395222917213#c4678235335766346990") (rel "alternate") (title "") (type "text/html"))) (author (name "Chris Gill") (uri "https://www.blogger.com/profile/06293547590363666776") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh3.googleusercontent.com/-U2sYxfYBXg4/AAAAAAAAAAI/AAAAAAAABnA/q4_-pHZArWk/s32-c/photo.jpg") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2014/02/racket-v60.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3293119573994585529") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3293119573994585529") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1837114536"))) (gd:extendedProperty ((name "blogger.displayTime") (value "March 19, 2014 at 5:55 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1944466137934552016") (published "2014-04-27T01:57:22.606-04:00") (updated "2015-09-21T21:52:33.571-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Why don" "&" "#39;t you provide source packages?") (post-content "Why don" 39 "t you provide source packages?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3293119573994585529/comments/default/1944466137934552016") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3293119573994585529/comments/default/1944466137934552016") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2014/02/racket-v60.html?showComment=1398578242606#c1944466137934552016") (rel "alternate") (title "") (type "text/html"))) (author (name "Des Nerger") (uri "https://www.blogger.com/profile/13329975273386302628") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2014/02/racket-v60.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3293119573994585529") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3293119573994585529") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1113185545"))) (gd:extendedProperty ((name "blogger.displayTime") (value "April 27, 2014 at 1:57 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5862307794303293892") (published "2014-04-27T08:33:33.463-04:00") (updated "2015-09-21T21:52:33.563-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Typo:\n\nI think there" "&" "#39;s a problem with the foll...") (post-content "Typo:" (br) (br) "I think there" 39 "s a problem with the following sentence:" (br) (br) "Using eval means accepting the burden of using instructions will make sense by the time they are delivered" (br) (br) "Perhaps the word " "\"" "that" "\"" " between " "\"" "instructions" "\"" " and " "\"" "will" "\"" "?" (br)) (link ((href "https://www.blogger.com/feeds/2080885971644496896/176509377051155662/comments/default/5862307794303293892") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/176509377051155662/comments/default/5862307794303293892") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2011/10/on-eval-in-dynamic-languages-generally.html?showComment=1398602013463#c5862307794303293892") (rel "alternate") (title "") (type "text/html"))) (author (name "Hendrik Boom") (uri "https://www.blogger.com/profile/03664840145177541236") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2011/10/on-eval-in-dynamic-languages-generally.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-176509377051155662") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/176509377051155662") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-92058045"))) (gd:extendedProperty ((name "blogger.displayTime") (value "April 27, 2014 at 8:33 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5836084008926590210") (published "2014-05-24T12:26:01.909-04:00") (updated "2014-05-24T12:26:01.909-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Racket blog ... Talk about Rackets !! I know some ...") (post-content "Racket blog ... Talk about Rackets !! I know some people running quite a rachet ! " (br) (br) "Ask Annabel ") (link ((href "https://www.blogger.com/feeds/2080885971644496896/24483917585479499/comments/default/5836084008926590210") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/24483917585479499/comments/default/5836084008926590210") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2014/05/racket-v601.html?showComment=1400948761909#c5836084008926590210") (rel "alternate") (title "") (type "text/html"))) (author (name "IOnlyDealInMiracles") (uri "https://www.blogger.com/profile/10067676702702553427") (email "noreply@blogger.com") (gd:image ((height "24") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//3.bp.blogspot.com/-WLLoS_NjUyg/U2v1LbLobvI/AAAAAAAADGo/hNPs7lsymKQ/s32/*") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2014/05/racket-v601.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-24483917585479499") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/24483917585479499") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1400740308"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 24, 2014 at 12:26 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1354955538495991004") (published "2014-05-25T22:33:17.563-04:00") (updated "2014-05-25T22:33:17.563-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Dear Annabel,\n\nOn a scale of 1 to 10, how rachet w...") (post-content "Dear Annabel," (br) (br) "On a scale of 1 to 10, how rachet would you say you are?" (br) (br) "Ben") (link ((href "https://www.blogger.com/feeds/2080885971644496896/24483917585479499/comments/default/1354955538495991004") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/24483917585479499/comments/default/1354955538495991004") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2014/05/racket-v601.html?showComment=1401071597563#c1354955538495991004") (rel "alternate") (title "") (type "text/html"))) (author (name "Benjamin Greenman") (uri "https://www.blogger.com/profile/13533765201799083877") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh3.googleusercontent.com/-xhlFny-FnEg/AAAAAAAAAAI/AAAAAAAAABM/eVzpHVFWztg/s32-c/photo.jpg") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2014/05/racket-v601.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-24483917585479499") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/24483917585479499") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-2105229111"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 25, 2014 at 10:33 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1100569434997245854") (published "2014-06-02T16:42:59.300-04:00") (updated "2014-06-02T16:42:59.300-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Please, provide PGP signatures for the installers ...") (post-content "Please, provide PGP signatures for the installers and/or support download over SSL. I would not risk running an executable on my computer unless I can verify it" 39 "s origin.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/24483917585479499/comments/default/1100569434997245854") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/24483917585479499/comments/default/1100569434997245854") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2014/05/racket-v601.html?showComment=1401741779300#c1100569434997245854") (rel "alternate") (title "") (type "text/html"))) (author (name "verduphs") (uri "http://verduphs.livejournal.com/") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img1.blogblog.com/img/openid16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2014/05/racket-v601.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-24483917585479499") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/24483917585479499") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-538271753"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 2, 2014 at 4:42 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1142117327564078977") (published "2014-06-19T05:44:02.822-04:00") (updated "2014-06-19T05:44:02.822-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Funny. I came here from the old plt site and initi...") (post-content "Funny. I came here from the old plt site and initially misread the redirection alert: " "\"" "PLT is now a racket!" "\"") (link ((href "https://www.blogger.com/feeds/2080885971644496896/24483917585479499/comments/default/1142117327564078977") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/24483917585479499/comments/default/1142117327564078977") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2014/05/racket-v601.html?showComment=1403171042822#c1142117327564078977") (rel "alternate") (title "") (type "text/html"))) (author (name "Unknown") (uri "https://www.blogger.com/profile/06492810948327972737") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2014/05/racket-v601.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-24483917585479499") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/24483917585479499") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-75278422"))) (gd:extendedProperty ((name "blogger.displayTime") (value "June 19, 2014 at 5:44 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-902187212900330149") (published "2014-09-09T20:46:29.689-04:00") (updated "2014-09-09T20:46:29.689-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I an running the new beta version of Mac OSX Yosem...") (post-content "I an running the new beta version of Mac OSX Yosemite and DrRacket will not run! please help!!!") (link ((href "https://www.blogger.com/feeds/2080885971644496896/9182643764549091140/comments/default/902187212900330149") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/9182643764549091140/comments/default/902187212900330149") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2014/08/racket-v61.html?showComment=1410309989689#c902187212900330149") (rel "alternate") (title "") (type "text/html"))) (author (name "John Sheriff") (uri "https://www.blogger.com/profile/05110639728661354618") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2014/08/racket-v61.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-9182643764549091140") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/9182643764549091140") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-817555122"))) (gd:extendedProperty ((name "blogger.displayTime") (value "September 9, 2014 at 8:46 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3058549979083498999") (published "2014-09-10T11:02:43.525-04:00") (updated "2014-09-10T11:02:43.525-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Is there a way to order http://docs.racket-lang.or...") (post-content "Is there a way to order http://docs.racket-lang.org/guide/ as a printed manual or download as a PDF to print my own for reference?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/9182643764549091140/comments/default/3058549979083498999") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/9182643764549091140/comments/default/3058549979083498999") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2014/08/racket-v61.html?showComment=1410361363525#c3058549979083498999") (rel "alternate") (title "") (type "text/html"))) (author (name "The Drifter") (uri "https://www.blogger.com/profile/08721848658689105737") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2014/08/racket-v61.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-9182643764549091140") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/9182643764549091140") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1509286533"))) (gd:extendedProperty ((name "blogger.displayTime") (value "September 10, 2014 at 11:02 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3848394518559009651") (published "2014-09-10T14:20:16.071-04:00") (updated "2014-09-10T14:20:16.071-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "+John Sherriff: It looks like a bug related to Yos...") (post-content "+John Sherriff: It looks like a bug related to Yosemite was fixed on August 27th, after the release of 6.1. " (br) (br) "Here" 39 "s the (closed) bug report." (br) (br) "http://bugs.racket-lang.org/query/?cmd=view%20audit-trail" "&" "database=default" "&" "pr=14672" (br) (br) "If you want to run a newer version, you might be interested in the nightly-build package, available at " (br) (br) "http://www.cs.utah.edu/plt/snapshots/") (link ((href "https://www.blogger.com/feeds/2080885971644496896/9182643764549091140/comments/default/3848394518559009651") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/9182643764549091140/comments/default/3848394518559009651") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2014/08/racket-v61.html?showComment=1410373216071#c3848394518559009651") (rel "alternate") (title "") (type "text/html"))) (author (name "John Clements") (uri "https://www.blogger.com/profile/15701081040575095781") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2014/08/racket-v61.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-9182643764549091140") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/9182643764549091140") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-997603040"))) (gd:extendedProperty ((name "blogger.displayTime") (value "September 10, 2014 at 2:20 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5407428319731999500") (published "2014-10-18T12:03:19.265-04:00") (updated "2015-09-21T21:52:33.552-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I can" "&" "#39;t run it on Mac OS X Yosemite") (post-content "I can" 39 "t run it on Mac OS X Yosemite ") (link ((href "https://www.blogger.com/feeds/2080885971644496896/9182643764549091140/comments/default/5407428319731999500") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/9182643764549091140/comments/default/5407428319731999500") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2014/08/racket-v61.html?showComment=1413648199265#c5407428319731999500") (rel "alternate") (title "") (type "text/html"))) (author (name "Ege Åenkul") (uri "https://www.blogger.com/profile/05221432392034168005") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh6.googleusercontent.com/-t-BaJO0DxU0/AAAAAAAAAAI/AAAAAAAATlQ/uMnhfxPPGFU/s32-c/photo.jpg") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2014/08/racket-v61.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-9182643764549091140") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/9182643764549091140") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-584205217"))) (gd:extendedProperty ((name "blogger.displayTime") (value "October 18, 2014 at 12:03 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1378666190361168338") (published "2014-11-24T00:22:01.118-05:00") (updated "2014-11-24T00:22:01.118-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "That" "&" "#39;s good! But, it" "&" "#39;s also interesting wh...") (post-content "That" 39 "s good! But, it" 39 "s also interesting what real projects use Racket. Is this information available?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3825278690456396369/comments/default/1378666190361168338") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3825278690456396369/comments/default/1378666190361168338") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2014/11/800.html?showComment=1416806521118#c1378666190361168338") (rel "alternate") (title "") (type "text/html"))) (author (name "Ð Ð¾Ð¼Ð°Ð½ ÐÐ¸ÐºÐ¾Ð»Ð°ÐµÐ²Ð¸Ñ") (uri "https://www.blogger.com/profile/03876152634032744442") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh4.googleusercontent.com/-PfzzqaPpsaY/AAAAAAAAAAI/AAAAAAAABPg/oWzUYF4pI0s/s32-c/photo.jpg") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2014/11/800.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3825278690456396369") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3825278690456396369") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1621873365"))) (gd:extendedProperty ((name "blogger.displayTime") (value "November 24, 2014 at 12:22 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-240159667077560931") (published "2014-11-24T17:16:14.116-05:00") (updated "2014-11-24T17:16:14.116-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Hi Ð Ð¾Ð¼Ð°Ð½. You can look at the videos from the thir...") (post-content "Hi Ð Ð¾Ð¼Ð°Ð½. You can look at the videos from the third and fourth RacketCons which have several talks from industrial users of Racket: " (a ((href "https://www.youtube.com/user/racketlang/playlists") (rel "nofollow")) "https://www.youtube.com/user/racketlang/playlists")) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3825278690456396369/comments/default/240159667077560931") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3825278690456396369/comments/default/240159667077560931") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2014/11/800.html?showComment=1416867374116#c240159667077560931") (rel "alternate") (title "") (type "text/html"))) (author (name "Racket Lang") (uri "https://www.blogger.com/profile/04457170879495206689") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh6.googleusercontent.com/-JwzzzGxUiXM/AAAAAAAAAAI/AAAAAAAAABI/dlTNbLhLdSo/s32-c/photo.jpg") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2014/11/800.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3825278690456396369") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3825278690456396369") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1537625003"))) (gd:extendedProperty ((name "blogger.displayTime") (value "November 24, 2014 at 5:16 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7897301491982121834") (published "2014-12-16T11:01:13.913-05:00") (updated "2014-12-16T11:01:13.913-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Congrats guys.") (post-content "Congrats guys.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3825278690456396369/comments/default/7897301491982121834") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3825278690456396369/comments/default/7897301491982121834") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2014/11/800.html?showComment=1418745673913#c7897301491982121834") (rel "alternate") (title "") (type "text/html"))) (author (name "Paddy3118") (uri "https://www.blogger.com/profile/06899509753521482267") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2014/11/800.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3825278690456396369") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3825278690456396369") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-100519048"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 16, 2014 at 11:01 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1291363325320395347") (published "2015-01-09T16:30:40.486-05:00") (updated "2015-01-09T16:30:40.486-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I think node.js" "&" "#39;s package manager gets version...") (post-content "I think node.js" 39 "s package manager gets versioning right. NPM uses " (a ((href "http://semver.org/") (rel "nofollow")) "semver") " to manage dependency versions, and it works well. The " (a ((href "https://github.com/npm/node-semver") (rel "nofollow")) "node-semver") " package demonstrates how this versioning works. A semver string is then included a module" 39 "s dependencies list, which can specify all sorts of things, including " "\"" "use the latest version of the library," "\"" " " "\"" "use the latest version given a particular major.minor string," "\"" " and " "\"" "use this precise major.minor.patch" "\"" " version." (br) (br) "NPM handles the rest, downloading the correct version of the dependencies. The reason this is tricky is that this requires every module to have its " (i "own") " set of dependencies, since different modules can request different versions of packages. I" 39 "m not sure exactly how Node handles loading multiple versions of the same dependency with regards to performance and interaction, though it might be worth looking into." (br) (br) "In contrast, the Racket package manager provides very little versioning support, and packages have to be installed in an entire user or installation scope, rather than having module-specific dependency versioning. Is this bad? I don" 39 "t know. But it" 39 "s different, and I think NPM" 39 "s model is worth considering.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/4691382008530336512/comments/default/1291363325320395347") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/4691382008530336512/comments/default/1291363325320395347") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2014/12/the-racket-package-system-and-planet.html?showComment=1420839040486#c1291363325320395347") (rel "alternate") (title "") (type "text/html"))) (author (name "Alexis King") (uri "https://www.blogger.com/profile/06300904692701050829") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh6.googleusercontent.com/-aHLbfvoNrNc/AAAAAAAAAAI/AAAAAAAAAAw/iEh8yZ776uU/s32-c/photo.jpg") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2014/12/the-racket-package-system-and-planet.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-4691382008530336512") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/4691382008530336512") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1968639178"))) (gd:extendedProperty ((name "blogger.displayTime") (value "January 9, 2015 at 4:30 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-538030447502780202") (published "2015-05-06T06:23:34.281-04:00") (updated "2015-05-06T06:23:34.281-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Where is the list of unsolved task?  I would think...") (post-content "Where is the list of unsolved task?  I would think this would be in one place.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1210073682735379495/comments/default/538030447502780202") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1210073682735379495/comments/default/538030447502780202") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2015/05/king-of-hill-on-rosetta-code.html?showComment=1430907814281#c538030447502780202") (rel "alternate") (title "") (type "text/html"))) (author (name "L.A.") (uri "https://www.blogger.com/profile/16454084205472041698") (email "noreply@blogger.com") (gd:image ((height "24") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//3.bp.blogspot.com/_SrtFx43wu8I/TEdxW_RSeDI/AAAAAAAAAOs/zFtHoLlhYEg/S220-s32/me1.jpg") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2015/05/king-of-hill-on-rosetta-code.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1210073682735379495") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1210073682735379495") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1680863155"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 6, 2015 at 6:23 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2042955070869262181") (published "2015-05-06T16:19:08.944-04:00") (updated "2015-05-06T16:19:08.944-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "The list of unsolved tasks is here: http://rosetta...") (post-content "The list of unsolved tasks is here: http://rosettacode.org/wiki/Reports:Tasks_not_implemented_in_Racket") (link ((href "https://www.blogger.com/feeds/2080885971644496896/1210073682735379495/comments/default/2042955070869262181") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/1210073682735379495/comments/default/2042955070869262181") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2015/05/king-of-hill-on-rosetta-code.html?showComment=1430943548944#c2042955070869262181") (rel "alternate") (title "") (type "text/html"))) (author (name "Jens Axel SÃ¸gaard") (uri "https://www.blogger.com/profile/15211030864341077735") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2015/05/king-of-hill-on-rosetta-code.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-1210073682735379495") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/1210073682735379495") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1852501234"))) (gd:extendedProperty ((name "blogger.displayTime") (value "May 6, 2015 at 4:19 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8681201236804317893") (published "2015-08-11T20:34:35.724-04:00") (updated "2015-08-11T20:34:35.724-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Why was there no mention of " "&" "quot;units" "&" "quot; http...") (post-content "Why was there no mention of " "\"" "units" "\"" " http://docs.racket-lang.org/reference/mzlib_unit.html ?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8688269311969682396/comments/default/8681201236804317893") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8688269311969682396/comments/default/8681201236804317893") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2015/08/modules-packages-and-collections.html?showComment=1439339675724#c8681201236804317893") (rel "alternate") (title "") (type "text/html"))) (author (name "Franklin Chen") (uri "https://www.blogger.com/profile/14762341306710286314") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh3.googleusercontent.com/-i5IiWYS6jjk/AAAAAAAAAAI/AAAAAAAAAAA/X0b5XTJpBV4/s32-c/photo.jpg") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2015/08/modules-packages-and-collections.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8688269311969682396") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8688269311969682396") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1797950791"))) (gd:extendedProperty ((name "blogger.displayTime") (value "August 11, 2015 at 8:34 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3501841316109328269") (published "2015-08-13T11:51:40.384-04:00") (updated "2015-08-13T11:51:40.384-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Units are also a modularity mechanism, but at a mo...") (post-content "Units are also a modularity mechanism, but at a more local level. That is, they" 39 "re used to organize code at and below the module-level, rather than above the module level, as collections and packages do." (br) (br) "Units, in modern Racket, are also a " "\"" "niche" "\"" " feature, that" 39 "s useful in very specific situations. In contrast, most Racket programmers writing programs that don" 39 "t fit in a single file will end up working with packages and collections, whether they realize it or not." (br) (br) "But to say a few words about them, units are first-class module-like values. Unlike Racket modules, they allow recursive linking, which allows for circular dependencies. They also allow dynamic linking, which makes it possible to " "\"" "swap in" "\"" " different implementations of the same signature. Dynamic linking also makes units useful for implementing plug-in systems, like the one in DrRacket, which can dynamically link in new plug-ins.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8688269311969682396/comments/default/3501841316109328269") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8688269311969682396/comments/default/3501841316109328269") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2015/08/modules-packages-and-collections.html?showComment=1439481100384#c3501841316109328269") (rel "alternate") (title "") (type "text/html"))) (author (name "Vincent St-Amour") (uri "https://www.blogger.com/profile/03325477589666862838") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2015/08/modules-packages-and-collections.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8688269311969682396") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8688269311969682396") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-392328068"))) (gd:extendedProperty ((name "blogger.displayTime") (value "August 13, 2015 at 11:51 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8631861503214403703") (published "2015-08-14T09:45:00.655-04:00") (updated "2015-08-14T09:45:00.655-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Thanks Vincent for an illuminating post. Regarding...") (post-content "Thanks Vincent for an illuminating post. Regarding units, is it useful to think of modules as units with automatically generated signatures bounded together with the code?" (br) (br) "Modules cannot be recursively linked because they are values that are evaluated at compile/run time, while units can be because they can be represented by signature values that can be linked to arbitrary units satisfying the signatures. Is that a reasonable phrasing of the difference between modules and units?" (br) (br) "I" 39 "m curious, what are the disadvantages of organizing code using only units versus using modules?" (br) (br) (br) (br)) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8688269311969682396/comments/default/8631861503214403703") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8688269311969682396/comments/default/8631861503214403703") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2015/08/modules-packages-and-collections.html?showComment=1439559900655#c8631861503214403703") (rel "alternate") (title "") (type "text/html"))) (author (name "Alexander McLin") (uri "https://www.blogger.com/profile/09528525222808463023") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2015/08/modules-packages-and-collections.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8688269311969682396") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8688269311969682396") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1645153785"))) (gd:extendedProperty ((name "blogger.displayTime") (value "August 14, 2015 at 9:45 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1591868059619161966") (published "2015-08-16T16:03:21.339-04:00") (updated "2015-08-16T16:03:21.339-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Alexander,\n\nThe main thing modules and units have ...") (post-content "Alexander," (br) (br) "The main thing modules and units have in common is that they are code containers that import and export names. Beyond that, the two systems are different enough that I don" 39 "t think trying to understand one in terms of the other is helpful. Modules are static, while units are dynamic. Units are values, whereas modules are not. Modules interact nicely with macros, but units don" 39 "t." (br) (br) "Some of the disadvantages of using units instead of modules are:" (br) "* units do not support importing / exporting macros" (br) "* linking errors happen at run-time instead of compile-time" (br) "* units are syntactically more heavyweight" (br) "* the dynamic nature of units prevents some optimizations" (br) "That said, units are the right tool for some use cases, but modules are what you want most of the time." (br) (br) "Because units predate modules in Racket" 39 "s history, there" 39 "s a fair amount of code out there (including in the main distribution) that uses units in places where we" 39 "d use modules today, e.g., parts of the net collection. That code is doing roughly what you" 39 "re describing, so you may be interested in looking at the result. :)") (link ((href "https://www.blogger.com/feeds/2080885971644496896/8688269311969682396/comments/default/1591868059619161966") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8688269311969682396/comments/default/1591868059619161966") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2015/08/modules-packages-and-collections.html?showComment=1439755401339#c1591868059619161966") (rel "alternate") (title "") (type "text/html"))) (author (name "Vincent St-Amour") (uri "https://www.blogger.com/profile/03325477589666862838") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2015/08/modules-packages-and-collections.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8688269311969682396") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8688269311969682396") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-392328068"))) (gd:extendedProperty ((name "blogger.displayTime") (value "August 16, 2015 at 4:03 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4233476071051741935") (published "2015-08-17T15:54:48.735-04:00") (updated "2015-08-17T15:54:48.735-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Thank you Vincent!\n") (post-content "Thank you Vincent!" (br)) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8688269311969682396/comments/default/4233476071051741935") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/8688269311969682396/comments/default/4233476071051741935") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2015/08/modules-packages-and-collections.html?showComment=1439841288735#c4233476071051741935") (rel "alternate") (title "") (type "text/html"))) (author (name "Alexander McLin") (uri "https://www.blogger.com/profile/09528525222808463023") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2015/08/modules-packages-and-collections.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-8688269311969682396") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/8688269311969682396") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1645153785"))) (gd:extendedProperty ((name "blogger.displayTime") (value "August 17, 2015 at 3:54 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5678915029756224159") (published "2015-09-04T17:12:41.697-04:00") (updated "2015-09-21T21:51:24.605-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "NPM uses local packages. Essentially, every depend...") (post-content "NPM uses local packages. Essentially, every dependancy you install is local to your package, and no other packages can access them. Your dependancies, in turn have a tree of packages that you can" 39 "t access. In other words, every single package gets a separate copy of its dependancies. This might seem terrible, but the node community is deeply rooted in  UNIX, so most packages expose only a few functions doing one thing well, and so the overhead of having many copies is very low.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/4691382008530336512/comments/default/5678915029756224159") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/4691382008530336512/comments/default/5678915029756224159") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2014/12/the-racket-package-system-and-planet.html?showComment=1441401161697#c5678915029756224159") (rel "alternate") (title "") (type "text/html"))) (author (name "g145") (uri "https://www.blogger.com/profile/12847357955811996617") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2014/12/the-racket-package-system-and-planet.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-4691382008530336512") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/4691382008530336512") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-715455139"))) (gd:extendedProperty ((name "blogger.displayTime") (value "September 4, 2015 at 5:12 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2886219142109544731") (published "2015-09-07T08:55:18.650-04:00") (updated "2015-09-07T08:55:18.650-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "did anyone notice that the download page is broken...") (post-content "did anyone notice that the download page is broken?" (br) (br) "when i click download on the home page, it gives a 403 forbidden error with message:" (br) (br) "Request forbidden by administrative rules.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/226388589638038874/comments/default/2886219142109544731") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/226388589638038874/comments/default/2886219142109544731") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2015/08/racket-v621.html?showComment=1441630518650#c2886219142109544731") (rel "alternate") (title "") (type "text/html"))) (author (name "Ke Kevin") (uri "https://www.blogger.com/profile/09639678714568761646") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh5.googleusercontent.com/-uTh4Td-8RVQ/AAAAAAAAAAI/AAAAAAAAACU/uCmwcdTrxNM/s32-c/photo.jpg") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2015/08/racket-v621.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-226388589638038874") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/226388589638038874") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1583980545"))) (gd:extendedProperty ((name "blogger.displayTime") (value "September 7, 2015 at 8:55 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-1559560471526581982") (published "2015-09-07T11:21:22.480-04:00") (updated "2015-09-07T11:21:22.480-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Are you still seeing that error? I can" "&" "#39;t repro...") (post-content "Are you still seeing that error? I can" 39 "t reproduce it on my end.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/226388589638038874/comments/default/1559560471526581982") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/226388589638038874/comments/default/1559560471526581982") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2015/08/racket-v621.html?showComment=1441639282480#c1559560471526581982") (rel "alternate") (title "") (type "text/html"))) (author (name "Vincent St-Amour") (uri "https://www.blogger.com/profile/03325477589666862838") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2015/08/racket-v621.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-226388589638038874") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/226388589638038874") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-392328068"))) (gd:extendedProperty ((name "blogger.displayTime") (value "September 7, 2015 at 11:21 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3046939111640522312") (published "2015-09-10T04:19:37.691-04:00") (updated "2015-09-10T04:19:37.691-04:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "it" "&" "#39;s ok now.\n\ncheers") (post-content "it" 39 "s ok now." (br) (br) "cheers") (link ((href "https://www.blogger.com/feeds/2080885971644496896/226388589638038874/comments/default/3046939111640522312") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/226388589638038874/comments/default/3046939111640522312") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2015/08/racket-v621.html?showComment=1441873177691#c3046939111640522312") (rel "alternate") (title "") (type "text/html"))) (author (name "Ke Kevin") (uri "https://www.blogger.com/profile/09639678714568761646") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh5.googleusercontent.com/-uTh4Td-8RVQ/AAAAAAAAAAI/AAAAAAAAACU/uCmwcdTrxNM/s32-c/photo.jpg") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2015/08/racket-v621.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-226388589638038874") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/226388589638038874") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1583980545"))) (gd:extendedProperty ((name "blogger.displayTime") (value "September 10, 2015 at 4:19 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-319527634221494559") (published "2015-11-08T15:59:06.139-05:00") (updated "2015-11-08T15:59:06.139-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "&" "quot;Superseded" "&" "quot;\n\nSorry, pet peeve. :-)") (post-content "\"" "Superseded" "\"" (br) (br) "Sorry, pet peeve. :-)") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3633011834223686647/comments/default/319527634221494559") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3633011834223686647/comments/default/319527634221494559") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2015/10/retiring-unstable.html?showComment=1447016346139#c319527634221494559") (rel "alternate") (title "") (type "text/html"))) (author (name "steck") (uri "https://www.blogger.com/profile/13416750891822431224") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2015/10/retiring-unstable.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3633011834223686647") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3633011834223686647") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1284969587"))) (gd:extendedProperty ((name "blogger.displayTime") (value "November 8, 2015 at 3:59 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4666016241356798438") (published "2015-11-25T02:54:13.953-05:00") (updated "2015-11-25T02:54:13.953-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "How to run the installer silently when we would li...") (post-content "How to run the installer silently when we would like to distribute this to teachers with SCCM 2012.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/5211027193984274951/comments/default/4666016241356798438") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/5211027193984274951/comments/default/4666016241356798438") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2015/11/racket-v63.html?showComment=1448438053953#c4666016241356798438") (rel "alternate") (title "") (type "text/html"))) (author (name "Ari Toivola") (uri "https://www.blogger.com/profile/17125839541087395226") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2015/11/racket-v63.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-5211027193984274951") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/5211027193984274951") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1410902937"))) (gd:extendedProperty ((name "blogger.displayTime") (value "November 25, 2015 at 2:54 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-7632836034535666512") (published "2015-11-27T13:25:14.471-05:00") (updated "2015-11-27T13:25:14.471-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Hi, it" "&" "#39;s my first day with Racket. Attempting ...") (post-content "Hi, it" 39 "s my first day with Racket. Attempting to install the " (b "pict3d") " library is failing in a way that mentions not finding " (b "unstable/custom-write") "." (br) (br) "I" 39 "m guessing this probably relates to the reorganization mentioned above." (br) (br) "Any tips? Thanks!") (link ((href "https://www.blogger.com/feeds/2080885971644496896/3633011834223686647/comments/default/7632836034535666512") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/3633011834223686647/comments/default/7632836034535666512") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2015/10/retiring-unstable.html?showComment=1448648714471#c7632836034535666512") (rel "alternate") (title "") (type "text/html"))) (author (name "Corporate Sheep") (uri "https://www.blogger.com/profile/18111238321267528973") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2015/10/retiring-unstable.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-3633011834223686647") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/3633011834223686647") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1453779347"))) (gd:extendedProperty ((name "blogger.displayTime") (value "November 27, 2015 at 1:25 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-3071555267102916469") (published "2015-12-05T13:34:29.545-05:00") (updated "2015-12-05T13:34:29.545-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I believe you broke the 2htdp/planetcute libraries...") (post-content "I believe you broke the 2htdp/planetcute libraries with this release. " (br) (br) "At least, I get an error just like this page now shows:  http://docs.racket-lang.org/teachpack/2htdpPlanet_Cute_Images.html" (br) (br) (br) "(require 2htdp/planetcute)" (br) (br) "in the REPL:" (br) (br) ">" " character-cat-girl" (br) "g1: unbound identifier;" (br) " also, no #%top syntax transformer is bound in: g1" (br)) (link ((href "https://www.blogger.com/feeds/2080885971644496896/5211027193984274951/comments/default/3071555267102916469") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/5211027193984274951/comments/default/3071555267102916469") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2015/11/racket-v63.html?showComment=1449340469545#c3071555267102916469") (rel "alternate") (title "") (type "text/html"))) (author (name "lalamine") (uri "https://www.blogger.com/profile/13255831071509414213") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2015/11/racket-v63.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-5211027193984274951") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/5211027193984274951") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-239982065"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 5, 2015 at 1:34 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2304509714091716409") (published "2015-12-09T07:04:27.929-05:00") (updated "2015-12-09T07:04:27.929-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Ari: To run the Windows installer silently, supply...") (post-content "Ari: To run the Windows installer silently, supply the /S command-line argument") (link ((href "https://www.blogger.com/feeds/2080885971644496896/5211027193984274951/comments/default/2304509714091716409") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/5211027193984274951/comments/default/2304509714091716409") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2015/11/racket-v63.html?showComment=1449662667929#c2304509714091716409") (rel "alternate") (title "") (type "text/html"))) (author (name "Matthew Flatt") (uri "https://www.blogger.com/profile/12609292743297097983") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2015/11/racket-v63.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-5211027193984274951") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/5211027193984274951") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-352392060"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 9, 2015 at 7:04 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-5662390933303668943") (published "2015-12-09T07:08:25.526-05:00") (updated "2015-12-09T07:08:25.526-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "lalamine: Thanks for the report! I cam able to rep...") (post-content "lalamine: Thanks for the report! I cam able to replicate the problem with planetcute in v6.3. It looks like the problem happens only in interactive modes like the REPL and docs, and not when used within a module." (br) (br) "The problem seems to be fixed in our development snapshots. Unfortunately, I don" 39 "t know how it got broken or fixed, so we" 39 "ll have to investigate more to ensure that the bug stays fixed.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/5211027193984274951/comments/default/5662390933303668943") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/5211027193984274951/comments/default/5662390933303668943") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2015/11/racket-v63.html?showComment=1449662905526#c5662390933303668943") (rel "alternate") (title "") (type "text/html"))) (author (name "Matthew Flatt") (uri "https://www.blogger.com/profile/12609292743297097983") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2015/11/racket-v63.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-5211027193984274951") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/5211027193984274951") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-352392060"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 9, 2015 at 7:08 AM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-2405519840085545682") (published "2015-12-10T23:41:41.893-05:00") (updated "2015-12-10T23:41:41.893-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "I see this bug; glad it" "&" "#39;s getting fixed. My da...") (post-content "I see this bug; glad it" 39 "s getting fixed. My daughter has made an awesome maze runner game with the planetcute images, so she was distressed about the broken compile. :)") (link ((href "https://www.blogger.com/feeds/2080885971644496896/5211027193984274951/comments/default/2405519840085545682") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/5211027193984274951/comments/default/2405519840085545682") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2015/11/racket-v63.html?showComment=1449808901893#c2405519840085545682") (rel "alternate") (title "") (type "text/html"))) (author (name "Peter") (uri "https://www.blogger.com/profile/06461151492756466276") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2015/11/racket-v63.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-5211027193984274951") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/5211027193984274951") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1801806398"))) (gd:extendedProperty ((name "blogger.displayTime") (value "December 10, 2015 at 11:41 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-868377740041894663") (published "2016-01-05T13:23:12.485-05:00") (updated "2016-01-05T13:23:12.485-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "It will force the use of dedicated AMD graphics of...") (post-content "It will force the use of dedicated AMD graphics of a 15-inch MacBook Pro but the previous version does not require it, it is consuming more battery than before.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/5211027193984274951/comments/default/868377740041894663") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/5211027193984274951/comments/default/868377740041894663") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2015/11/racket-v63.html?showComment=1452018192485#c868377740041894663") (rel "alternate") (title "") (type "text/html"))) (author (name "éèå®") (uri "https://www.blogger.com/profile/14105779383789007905") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh4.googleusercontent.com/-wNQlaTL-O_Y/AAAAAAAAAAI/AAAAAAAAACE/4ePVEKnei1k/s32-c/photo.jpg") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2015/11/racket-v63.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-5211027193984274951") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/5211027193984274951") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-327362923"))) (gd:extendedProperty ((name "blogger.displayTime") (value "January 5, 2016 at 1:23 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-202947319938356260") (published "2016-01-21T15:11:04.858-05:00") (updated "2016-02-08T10:33:06.378-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Regarding AMD graphics: The only change in graphic...") (post-content "Regarding AMD graphics: The only change in graphics visible from that changelog is about the underlying graphical library Gtk. Can you check if setting PLT_GTK2=y before starting DrRacket makes a difference?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/5211027193984274951/comments/default/202947319938356260") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/5211027193984274951/comments/default/202947319938356260") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2015/11/racket-v63.html?showComment=1453407064858#c202947319938356260") (rel "alternate") (title "") (type "text/html"))) (author (name "Paolo Giarrusso") (uri "https://www.blogger.com/profile/04485097839438234853") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh3.googleusercontent.com/-2fzxmzCMxAA/AAAAAAAAAAI/AAAAAAAAFWs/GTtw8nKPTDM/s32-c/photo.jpg") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2015/11/racket-v63.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-5211027193984274951") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/5211027193984274951") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-888705034"))) (gd:extendedProperty ((name "blogger.displayTime") (value "January 21, 2016 at 3:11 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-345494228677723488") (published "2016-02-02T13:15:50.830-05:00") (updated "2016-02-08T10:33:02.600-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Do you have a portable distribution for Windows an...") (post-content "Do you have a portable distribution for Windows anywhere?  I used to use zipped binary snapshots  for this purpose but they don" 39 "t seem to be available any longer, only *.exe versions.") (link ((href "https://www.blogger.com/feeds/2080885971644496896/5211027193984274951/comments/default/345494228677723488") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/5211027193984274951/comments/default/345494228677723488") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2015/11/racket-v63.html?showComment=1454436950830#c345494228677723488") (rel "alternate") (title "") (type "text/html"))) (author (name "Kevin Havener") (uri "https://www.blogger.com/profile/02714189988415421804") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//lh3.googleusercontent.com/-NMhL8GA5zIo/AAAAAAAAAAI/AAAAAAAAAZo/DAedRdkVDE0/s32-c/photo.jpg") (width "32")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2015/11/racket-v63.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-5211027193984274951") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/5211027193984274951") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1112640592"))) (gd:extendedProperty ((name "blogger.displayTime") (value "February 2, 2016 at 1:15 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-4542607342638102602") (published "2016-02-08T17:39:12.097-05:00") (updated "2016-02-08T17:39:12.097-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Great work! and thank you.\n\nI was wondering why is...") (post-content "Great work! and thank you." (br) (br) "I was wondering why isn" 39 "t incremental garbage collection the default option?") (link ((href "https://www.blogger.com/feeds/2080885971644496896/9155326247533000133/comments/default/4542607342638102602") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/9155326247533000133/comments/default/4542607342638102602") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2016/02/racket-v64.html?showComment=1454971152097#c4542607342638102602") (rel "alternate") (title "") (type "text/html"))) (author (name "Harikrishnan") (uri "https://www.blogger.com/profile/05761651188124481359") (email "noreply@blogger.com") (gd:image ((height "32") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//3.bp.blogspot.com/_U3b0BsPQe84/TJWNXMsHtAI/AAAAAAAABfs/fdzl9iqnJuk/S220-s32/dp.jpg") (width "31")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2016/02/racket-v64.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-9155326247533000133") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/9155326247533000133") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-1567787751"))) (gd:extendedProperty ((name "blogger.displayTime") (value "February 8, 2016 at 5:39 PM")))) (entry (id "tag:blogger.com,1999:blog-2080885971644496896.post-8340436929369617758") (published "2016-02-09T06:45:16.972-05:00") (updated "2016-02-09T06:45:16.972-05:00") (category ((scheme "http://schemas.google.com/g/2005#kind") (term "http://schemas.google.com/blogger/2008/kind#comment"))) (title ((type "text")) "Incremental mode has shorter GC pauses, but it ten...") (post-content "Incremental mode has shorter GC pauses, but it tends to use more memory and use more time overall. Those trade-offs are usually worthwhile for interactive programs, but not for batch programs." (br) (br) "Given the trade-offs, non-incremental mode is a more transparent default. It" 39 "s easy to tell when an interactive program suffers from pauses and needs to turn on incremental mode. It would be more difficult to notice that a batch program runs too slowly because incremental mode hasn" 39 "t been disabled." (br) (br) "(Incremental mode uses more memory because it moves objects to the old generation sooner, and because the old generation is not compacted. Incremental mode uses more time because extra steps are needed to pause and resume traversal of the old generation â and also because it uses more memory.)" (br)) (link ((href "https://www.blogger.com/feeds/2080885971644496896/9155326247533000133/comments/default/8340436929369617758") (rel "edit") (type "application/atom+xml"))) (link ((href "https://www.blogger.com/feeds/2080885971644496896/9155326247533000133/comments/default/8340436929369617758") (rel "self") (type "application/atom+xml"))) (link ((href "http://blog.racket-lang.org/2016/02/racket-v64.html?showComment=1455018316972#c8340436929369617758") (rel "alternate") (title "") (type "text/html"))) (author (name "Matthew Flatt") (uri "https://www.blogger.com/profile/12609292743297097983") (email "noreply@blogger.com") (gd:image ((height "16") (rel "http://schemas.google.com/g/2005#thumbnail") (src "//img2.blogblog.com/img/b16-rounded.gif") (width "16")))) (thr:in-reply-to ((href "http://blog.racket-lang.org/2016/02/racket-v64.html") (ref "tag:blogger.com,1999:blog-2080885971644496896.post-9155326247533000133") (source "https://www.blogger.com/feeds/2080885971644496896/posts/default/9155326247533000133") (type "text/html"))) (gd:extendedProperty ((name "blogger.itemClass") (value "pid-352392060"))) (gd:extendedProperty ((name "blogger.displayTime") (value "February 9, 2016 at 6:45 AM")))))